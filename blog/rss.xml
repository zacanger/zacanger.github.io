<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Zac Anger's Blog</title><link>https://zacanger.com/blog/</link><description>Programming, socialism, and Buddhism.</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><language>en</language><lastBuildDate>Sun, 03 Jan 2021 03:00:25 +0000</lastBuildDate><item><title>Meditation Log</title><link>https://zacanger.com/blog/posts/meditation-log</link><description>&lt;h1 id="meditation-log"&gt;Meditation Log&lt;/h1&gt;
&lt;p&gt;This will be a continually-updated document, rather than a series of separate
posts, presented in reverse-chronological order. Entries are sometimes written
the following day.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#meditation-log"&gt;Meditation Log&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2021-01-02"&gt;2021-01-02&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2021-01-01"&gt;2021-01-01&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-31"&gt;2020-12-31&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-28"&gt;2020-12-28&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-27"&gt;2020-12-27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-26"&gt;2020-12-26&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-25"&gt;2020-12-25&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes-about-siddhispowers"&gt;Notes About Siddhis/Powers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-24-2"&gt;2020-12-24-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-24"&gt;2020-12-24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-23"&gt;2020-12-23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-22"&gt;2020-12-22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-21"&gt;2020-12-21&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-19"&gt;2020-12-19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-18"&gt;2020-12-18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-17"&gt;2020-12-17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-16"&gt;2020-12-16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-15"&gt;2020-12-15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-14"&gt;2020-12-14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-13"&gt;2020-12-13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2020-12-12"&gt;2020-12-12&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="2021-01-02"&gt;2021-01-02&lt;/h2&gt;
&lt;p&gt;Things continue to be interesting. Drawing an orange line in the air, seeing a
deity in bubbles of light, supporting a glowing blue being with my cupped hands,
my hands themselves flickering in and out of existence, drawing a dharmachakra
on a door in blue sparkly fire, bright purple malleable clouds, overwhelming
feelings of bliss — the longer I sit, as long as I'm patient and don't restart
the cycle, the stranger and more intense things get. I'm moving more towards
only light as an object, since good candles aren't cheap, and it also gets a
usable after-image much faster.&lt;/p&gt;
&lt;p&gt;I have trouble sometimes not slipping into noting everything, which I didn't
realize was a habit I'd built until I started these couple weeks of kasina-based
practice with the intention of reaching at least the fourth samatha jhana (as
defined in the Vimuttimagga and clarified in MCTB). When I do switch back to
insight practice (in about a week), I hope some of this translates into
something valuable.&lt;/p&gt;
&lt;h2 id="2021-01-01"&gt;2021-01-01&lt;/h2&gt;
&lt;p&gt;I had trouble getting warm this morning, so I tried tummo practice for a while.
Psychologically, at least, it worked, but that could be because I was so focused
on the visualization and breath control that I forgot about being cold. My body
temperature went up about 1.5 degrees (F), but that's not a significant amount.&lt;/p&gt;
&lt;p&gt;I read &lt;em&gt;The Slacker's Guide To Stream-Entry&lt;/em&gt; today, a short log from someone I
assume is a Catholic that goes into some parallels between Christian mysticism
and Buddhism. I was hoping for an actual guide to stream-entry, but it was
interesting anyway. One big thing I got out of it was the idea of breaking one
meditation up into a few periods of 15-30 minutes with 5-10 minute breaks to
stretch and do walking meditation. That may help a bit with discomfort,
especially since my legs tend to fall asleep during longer sits (I haven't found
a posture that completely helps — Burmese style seems to be good for my legs,
but not for my back; half-lotus and cross-legged with a zafu seem to be good for
my back, but my legs fall asleep).&lt;/p&gt;
&lt;p&gt;Fire/light kasina practice (after reading the Vimuttimagga I've started thinking
of kasina practice using my pinhole flashlight contraption as light kasina, not
fire) hasn't really progressed much, just the same cycles. I can't seem to stay
in the murk for more than 10 minutes or so without getting bored or distracted
and starting a fresh cycle, though I can stretch it out longer when it's
completely dark and I can see shapes and colors in the murk more clearly, so
nighttime practice has been going better than during the day. I can still play
with it, move colors around, change colors (very slowly), etc., but that gets
old pretty fast. I haven't experienced anything that sounds like fourth jhana
yet, and am starting to wonder if I should switch things up by trying a
different kasina, dropping the mantra I try to keep running all the time, or
some other change. Or maybe I just need need to put in more time; my practice
probably totals less than four hours a day right now, so I could try going for
six or eight over the next few days and seeing how things go.&lt;/p&gt;
&lt;h2 id="2020-12-31"&gt;2020-12-31&lt;/h2&gt;
&lt;p&gt;Still doing fire and light kasina practice. I haven't made any significant
progress the past few days, just more of the same cycles, though they're getting
faster and I'm able to "see" things more clearly. I'm sitting more and more
(yesterday was around two and a half hours, across a few sits), hoping the extra
time will help me get tired of bliss and visuals and move on to the fourth
jhana. We'll see. I'm planning on giving this another week and then switching
back to insight practices.&lt;/p&gt;
&lt;h2 id="2020-12-28"&gt;2020-12-28&lt;/h2&gt;
&lt;p&gt;A good artificial light source is better than a low quality (dim, flickering,
diffused) flame, but a good quality candle flame seems to be nicer than an
artificial light. That could be some internal bias I have against using an LED
light or whatever else since it feels "unnatural", though.&lt;/p&gt;
&lt;p&gt;The visual aspects of second jhana through a kasina can be fun, but I want to
move ahead. It doesn't help that I keep getting drawn into having fun with them.
I've touched on third jhana, but haven't been able to stay there consistently or
to push on to fourth. Seeing through one's eyelids and being able to physically
squish the swirling visual field with one's hands doesn't actually have any
practical value, I think.&lt;/p&gt;
&lt;h2 id="2020-12-27"&gt;2020-12-27&lt;/h2&gt;
&lt;p&gt;I've noticed that the initial nimitta tends to take on recognizable shapes
sometimes, especially when I start with something brighter than a candle. I
fashioned a little "nimitta-getting" device out of a flashlight, some cardboard,
and tape, to get a pinhole light with a yellowish surrounding, and that's
working much better than candles have been. I'm not sure what's up with the
candles — it could be the altitude, or some air currents I'm not feeling, or
maybe I should've just spent the money on beeswax. This thing is working fine,
though. The shapes seem to come up right around when the very first white/purple
spot starts to fade to red, before it rounds out into a dot. I've seen
completely random things like the shapes of Texas and Australia, and a padlock
side-by-side with a five-pointed star. I assume this is just the brain trying to
find meaning in a confusing, relatively new, experience, so I just notice it,
pay attention, and wait for it to solidify and round down to a small circle.&lt;/p&gt;
&lt;p&gt;I've also noticed (for months now, I just wasn't writing about it back then)
that when my attention wanders, I can see/feel it. It's like walking a dog that
keeps trying to dart off, and I can feel the tug on the leash and see the
direction it's going in, except the leash is made of elastic, and the elastic
got stronger/tighter over time.&lt;/p&gt;
&lt;h2 id="2020-12-26"&gt;2020-12-26&lt;/h2&gt;
&lt;p&gt;I read the &lt;a href="https://firekasina.org/"&gt;fire kasina book&lt;/a&gt; over the last couple
days, and some things make more sense now. I'm back to reading the Vimuttimagga
which might clarify more. I was interested to read that Shannon Stein's fear
stage also included little crab-like things. I don't know if that's common but
it seems awfully specific. Maybe we just both dislike shellfish.&lt;/p&gt;
&lt;p&gt;My practice has been interesting. I found out that, if I have trouble getting a
dot to start with when I think I should have one, blinking twice helps me find
it, like when someone takes a photo with a flash and you blink a few times and
see spots (the exact same thing, probably).&lt;/p&gt;
&lt;p&gt;I'm also able to rise to what I believe is third jhana within about 20 minutes
(three or four cycles), but haven't figured out how to turn over into fourth
yet. I'm fairly confident about saying it's third jhana now, since that lines up
with what's in MCTB and the fire kasina book, as well as what I've read
elsewhere. There's a distinct dropping-off of the sort of feeling of awe and
joy, attention spreads to the whole visual/inner-visual field, a dopamine rush
that comes and then falls away, and if I briefly (less than one out-breath)
attend to pain anywhere (like my lower back, which is killing me as I'm typing
this) it vanishes (the pain, not my back). And I can just sit without wanting to
return to second. I think the trick will be to sit for long enough that I get
tired of it, but not so tired of it that I get up.&lt;/p&gt;
&lt;p&gt;Another fun thing is that I can play with the stuff in the visual field.
Eventually, more single-pointed things come back in, not necessarily red or
white dots but just concentrated areas of cloud stuff. I can move those around,
or, using my hands, I can kind of shape and form the whole thing. I tried
pressing the lighter parts together into a fairly thin vertical line, then
squishing that down into a ball I could hold, then flicking it out to take up
the whole field again. I can't draw in colors, but it's neat to be able to play
with the stuff that's already there.&lt;/p&gt;
&lt;p&gt;One more interesting note is that the initial nimitta tends to flicker more now,
and I've gone from perceiving it as spinning to flickering. Maybe it was
flickering all along, and it was just too fast for me to see. The flickering
aspect of basically everything is still growing, making me wonder what that will
do when I switch back to insight practices.&lt;/p&gt;
&lt;h2 id="2020-12-25"&gt;2020-12-25&lt;/h2&gt;
&lt;h3 id="notes-about-siddhispowers"&gt;Notes About Siddhis/Powers&lt;/h3&gt;
&lt;p&gt;Condensed and edited version of the instructions in
&lt;a href="https://www.mctb.org/mctb2/table-of-contents/part-vi-my-spiritual-quest/65-how-to-cultivate-the-powers/"&gt;MCTB2&lt;/a&gt;
(see the &lt;a href="https://www.mctb.org/about/"&gt;fair use notice&lt;/a&gt;). I have not attained
the powers (I have not attained fourth jhana yet), I just wanted to have this in
a place where I could easily reference it. I may edit this more as I progress.&lt;/p&gt;
&lt;p&gt;First, be able to attain at least fourth jhana with a variety of objects.
Kasina meditation is a good way to go here, particularly using fire (a candle).
You can tell which jhana you're in by the qualities. First jhana: rapture,
pleasure, still with discriminating thought, takes effort; second: rapture,
pleasure, tranquility, effortless; third: sense of non-attachment, bodily
pleasure; fourth: no particular pleasure and no particular pain, clarity, pure
mindfulness and equanimity.&lt;/p&gt;
&lt;p&gt;Quietly and mindfully make yourself and your meditation area clean: take a calm
shower, put on clean clothes, tidy up. Make any other preparations that make
sense in context, like prayers, etc.&lt;/p&gt;
&lt;p&gt;Think the whole thing through. Your intentions, your reactions, and as many
possible outcomes as you can think of. Think about what you're planing to
request or intend, how to phrase it specifically, why you want this (and reason
out if there's a root issue that really needs your attention instead of what
you were thinking of), everyone and/or everything involved, and every possible
outcome or ramification for everyone and/or everything involved (negative or
positive, as much as possible; try visualizing your magic echoing out along
space and time as far as you can).&lt;/p&gt;
&lt;p&gt;If the previous step, especially the last part, doesn't feel completely okay
with you, you should stop now and rethink it. This is a time when deeply
thinking about karma is useful.&lt;/p&gt;
&lt;p&gt;Rise through the jhanas to at least fourth, but up through past eighth if you
can. Do it slowly, carefully, and deeply so you're in a strong and steady
state. It helps to have been working on concentration practice specifically in
the days or weeks leading up to this. (From the descriptions I'm not sure if
it's even possible without retreat time).&lt;/p&gt;
&lt;p&gt;When you are as high in the jhanas as you can get, leave that state, and
formally intend to make happen whatever you want to happen (as you decided on
earlier), releasing all of the energy of your intent out into the world without
any restraint or hesitation. You have to be absolutely committed. Let it out,
then let it go.&lt;/p&gt;
&lt;h2 id="2020-12-24-2"&gt;2020-12-24-2&lt;/h2&gt;
&lt;p&gt;I just practiced for about an hour: fifteen minutes on a candle, maybe five
minutes walking and with a streetlight, and I reclined and used my phone's
flashlight for two cycles. The candle cycles weren't particularly interesting,
except that I feel like (from the descriptions) I briefly touched on third
jhana.&lt;/p&gt;
&lt;p&gt;The first phone flashlight cycle was pretty standard: retina burn after-image,
red dot, black disk, counter-clockwise spinning thing (like a circle with
spikes, or maybe a 9-pointed star, murk). The second cycle was not standard.&lt;/p&gt;
&lt;p&gt;The second time I hit my eyeballs with that light, it started off pretty normal,
like above. Then I hung out in the murk and just tried to see all of it. The
greenish white cloudy stuff, purplish black stuff, little sparkles. One of the
sparkles seemed fairly stationary, and it's the holidays, so I willed for there
to be more of them and for them to fall like snow, which didn't exactly work,
but more of them did come into focus and move downwards (as long as I was
keeping my focus on them). Around this time I was feeling pretty good,
physically. Aches, pains, itches, all either vanished or turned into nice
sensations.&lt;/p&gt;
&lt;p&gt;Then the flickering started. It was like giant white glowing books with their
pages being flipped, or a deck of cards being shuffled, maybe. Huge and white,
coming from both sides, on top of light black. Then the sort of white pulsing
circles that I usually see showed up, but they also started flickering, and had
some spikes or something around the outside. Somewhere in here I also clearly
saw a woman dancing and spinning in a circle, but when she turned to face me her
face turned into a creepy demonic type thing, stuck out its tongue, and then
she/it vanished.&lt;/p&gt;
&lt;p&gt;Anyway, back to the circle: like I said, lots of flickering recently, but this
white flickering circle with spikes was new. It expanded until it sort of zoomed
up and fit around my head, and suddenly it hit me that it's not just the circle
or things in my visual field that are flickering, I'm the one flickering, or I'm
included in the flickering. When I say "it hit me" I mean I felt it like cold
water hit my chest and mind at the same time, it had a physical impact.&lt;/p&gt;
&lt;p&gt;I'm not sure how that fits into the maps since, as far as I know, I shouldn't be
expecting any big insights or even strong visualizations at this point, but it
was a jarring enough experience that I wanted to write it up tonight so I didn't
forget anything, rather than wait until tomorrow morning. It felt weirdly
bad-good, like if someone suddenly grabs your shoulder and you're a little
shocked and freaked out, but then you turn around and see that it's someone you
love and trust, so there's a mixture of relief and happiness — except all of
those emotions happened in maybe one or two seconds.&lt;/p&gt;
&lt;h2 id="2020-12-24"&gt;2020-12-24&lt;/h2&gt;
&lt;p&gt;Still working on fire kasina practice. Not much luck last night. I was able to
get black discs regularly, but they faded quickly, and I wasn't getting a red
dot. At first I thought it was because of the candles; I was using one that
had a pretty dim flame, then tried switching to a different one, but due to
where it was in burning down, I couldn't see that one clearly over the top or
through the jar it's in. Then I thought that was nonsense and it was clearly
due to my concentration and I shouldn't blame external factors, but after
getting up to switch back to the previous candle, I tried using a streetlight,
and was able to get a very clear red dot after less than 10 seconds and hold
it with my eyes open, so now I think it really was the candles. I ended up
going back to bed and using my phone's flashlight for a few more very clear
cycles (after-image, red dot, red dot spinning counter-clockwise with a bit of
yellow in the middle, fading darker, growing little points around the outside,
black disk, murk). That all took a good hour or so and it was getting late, so
even though I'd figured out the problem I didn't keep at it. Tonight should be
better.&lt;/p&gt;
&lt;p&gt;Key takeaway: the quality of the light definitely matters, at least for
getting a clear nimitta to work with. If you try this and use a candle, it's
important for it to be bright, steady, and clearly visible (not diffused and
distorted through the thick lip of a mason jar, for example).&lt;/p&gt;
&lt;p&gt;A side note: I bought myself a zafu for Christmas, rather than sitting on the
floor or my bed mat, and having my hips raised like this is definitely
helping with pain and keeping a good posture. Highly recommended.&lt;/p&gt;
&lt;p&gt;Another side note: my visual perception of reality doesn't seem to be all
that stable since I started this. I forget what night it was, but I was
typing something up and saw my left hand and left side of my computer
keyboard shift maybe six inches to the left and then back again, as quick as
you could blink. And there's a low-frame-rate sort of thing going on when my
eyes are closed, including while practicing. This seems related to
understanding impermanence eventually, so I'm not concerned about it, it's
just curious.&lt;/p&gt;
&lt;h2 id="2020-12-23"&gt;2020-12-23&lt;/h2&gt;
&lt;p&gt;Nothing much happened last night except for cycles, over and over again:
flame, dot, red dot, murk, sometimes a black dot. At one point I tried
willing the black dot to change color, saying "be green, be green" in my
head, which didn't exactly work, but it got a sort of green hazy aura around
it, so that's something. I also was able to sustain the nimitta with my eyes
open and get it back quickly from other sources like a street lamp and car
headlights.&lt;/p&gt;
&lt;h2 id="2020-12-22"&gt;2020-12-22&lt;/h2&gt;
&lt;p&gt;Last night I had a false start trying to get into fire kasina meditation, got
up for a bit, then settled down into it. I was able hold onto the nimitta for
longer each cycle, but got into the murk and had trouble expanding attention.
I kept at it anyway for a bit, then went to bed holding onto the mantra I'd
been using in the background (I've been attracted to the Heart Sutra mantra
recently, so it was that one), and kept my attention also on the vague
purple/green/white swirls of the murk.&lt;/p&gt;
&lt;p&gt;While watching the murk a bunch of strange visuals came up. I don't know how
suggestible this stuff is, but it definitely sounded like bhaya-nana (fear)
from some of the descriptions I've read. I distinctly remember some sort of
warrior-like figures out of a fantasy movie, specifically helmets/masks and
armor that reminded me of the witch-king of Angmar's costume in the LOTR
films. Also an odd effect that was like a thin sliver of a flashlight (like if
you hold your hand over the light and part your fingers a bit) passing over
some faces, one that was a full-face mask, one that was rotting, one that had
blood running across it. Also some visuals of bugs, some crabs or crab-like
things, and other generally kind of creepy stuff. The weird thing was, I can't
really stand bugs, but none of that freaked me out, maybe because I was still
holding on to the mantra and just watching this stuff pop up and then
disappear into the murk. Eventually I did fall asleep.&lt;/p&gt;
&lt;p&gt;I'm not sure how this is related, but about 30 or 40 minutes after I went to
sleep, I had a huge shock of energy through my core and bolted upright.
I was shaking, but it felt like everything else (reality) was shaking. At
first I thought there was an earthquake, and I shot off a quick prayer to
Avaloketisvara that it wasn't "The Big One", but then I looked at my water
bottle, and it wasn't shaking, then got up and looked at other objects, and
they weren't shaking. I wasn't shaking either, my hands and limbs seemed
steady, so it was just my perception of everything. I don't know where that
came from but it was intense and disconcerting. I went back to bed holding
onto a simpler mantra (om mani padme hum).&lt;/p&gt;
&lt;p&gt;Something else that's probably worth mentioning is that when I use a mantra
as the only object or primary object (but not when I'm using it to augment
something else, so far), it sort of expands on itself, especially if I set
into it somewhat melodically instead of just reciting it. For example with
"Om Mani Padme Hum", if I keep it at one note, eventually a slight harmony
will be added a fourth above, and then that one tries to creep up to a flat
fifth and then a fifth. If I start the Heart Sutra mantra, eventually it
takes on a melody of its own that I didn't consciously indent for it, and
then that seems to double and triple like multiple voices singing in unison.
Possibly related, the soft nimitta (whether it's the "murk" from kasina
practice or the nimitta that appears when doing non-visualization-based
practice), has started to pulse in recent weeks, starting synchronized with
the breath but then shifting a bit so the pulses are coming before or after
the breath, and sometimes much faster than the breath (like it's trying to
sync with my heartbeat instead, maybe). All of this seems to be expected
according to what I've read so I'm not concerned about it, it's just
interesting.&lt;/p&gt;
&lt;h2 id="2020-12-21"&gt;2020-12-21&lt;/h2&gt;
&lt;p&gt;Decided to really try fire kasina practice last night not give up on it. I
went at it for 25 minutes, took a break for a couple minutes, then another 20
minutes. After the first two or three cycles (stare at the flame in one spot
for around 30-60 seconds, close eyes, focus on what happens) it got
interesting. The little dot would be reddish, surrounded by a soft pale blue
circle, and then the dot would vanish taking the aura with it, then come back
much more stable and red, then sometimes a little bit of yellowish white would
appear in the middle and the whole thing would spin. MCTB describes that as
having a gold star in the center, but to me it looked more like a laser
pointer dot that got slightly deeper red and larger, shaped like a stylised
flower outline filled with yellowish white. The dot didn't like to stay in one
spot, and would usually drift off to the upper right, but I could move it
around by moving my head from side to side, the dot would follow a second or
two later. I could also put my right hand up like some kind of mudra, in front
of my face, and it seemed to work as a barrier than the dot didn't want to
pass through when it was moving around. That's about as far as I got, but it
seems promising.&lt;/p&gt;
&lt;h2 id="2020-12-19"&gt;2020-12-19&lt;/h2&gt;
&lt;p&gt;My weekend practice is usually lacking, due I think mostly to my neighbors'
loud music. I've started reading the Vimuttimagga while I wait for it to
quiet down, and as a theoretical warm-up to the Visuddhimagga, which I'd like
to get through sometime this coming year. Of course, the most important thing
is actually doing the work, not just reading about it. Maybe some
industrial-grade earplugs would help.&lt;/p&gt;
&lt;p&gt;Something else that's been happening on and off in the past week or two is
seeing other random visualizations. These aren't something I'm intending to
see, but I think mantra practice combined with trying to examine the nimitta
does something a little weird. I'll usually see things that remind me of the
style of Chinese or maybe Korean paintings of dragons, tigers, etc., from
maybe the 15th-18th century or so; not that I'm seeing dragons or tigers
specifically, but beings that look like they could've popped out of one of
those paintings, and usually only for a few moments.&lt;/p&gt;
&lt;h2 id="2020-12-18"&gt;2020-12-18&lt;/h2&gt;
&lt;p&gt;Last night I got started late due to work, so was worried I wouldn't have
time before needing to get to sleep. I tried to maintain mindfulness during
everyday activities (washing, washing; brushing, brushing; left foot, right
foot, left foot, turning, turning). Before bed, I sat doing concentration
practice with the prajnaparamita mantra (gate gate paragate parasamgate bodhi
svaha), initially in sync with the breath but then diverging. After around 40
minutes, the discomfort in my knees and hips was becoming hard to ignore, and
since I had resolved to stick to samatha practices, rather than try to
examine the pain I decided to recline, and I also switched to a simpler
mantra (buddho). About ten minutes into this, the mantra sort of faded into
the background, replaced by some common early visuals (white swirling light
type stuff). I focused on that a bit more, and suddenly had a shallow mental
image of spinning lights, like a carousel without horses or riders and with
long tassels of Christmas lights along and slung out from its ceiling, in
bright colors. That shallow mental thought almost immediately solidified into
a concrete visualization which seemed extremely real (I was fully aware that
it wasn't truly there, but it had depth and seemed to really be there). My
eyes were still closed, but I could clearly see it spinning along where my
wall and ceiling met. A deep sense of happiness and something like awe struck
me, I felt it heavily in my chest. The whole experience lasted for probably
less than a second, but it was extremely intense. Afterwards, I at first
tried to cling to it for a breath or two, but then realized that was the
point; it was over and I needed to understand that it was never going to be
permanent. I went back to focusing on the mantra (buddho) for another ten or
fifteen minutes before going to sleep.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="2020-12-17"&gt;2020-12-17&lt;/h2&gt;
&lt;p&gt;Last night I had very little luck, but the night before a strange
visualization happened. Out of the fuzzy/swirly black and white field, in the
bottom right corner, I clearly saw some sort of black-clothed figure. The
clothing was like something out of a fantasy movie, a wispy robe with long
trailers or tatters that were blowing in all directions and pushing into or
overlapping part of the mostly white field behind my eyelids. This was after
a good amount of time doing mantra practice. No idea what it means except
maybe that my ability to concentrate is improving.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="2020-12-16"&gt;2020-12-16&lt;/h2&gt;
&lt;p&gt;I don't think there's much value in adding entries to this log unless
something notable happened, so I'll be skipping days here.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="2020-12-15"&gt;2020-12-15&lt;/h2&gt;
&lt;p&gt;The past couple of days have been extraordinarily stressful, and that will
probably continue for at least the next few weeks. I'm finding that eyes-open
meditation in daily life can help somewhat. Mantra meditation, even for 3-5
minutes if done sincerely, seems to slow everything down and chill everything
out.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="2020-12-14"&gt;2020-12-14&lt;/h2&gt;
&lt;p&gt;Since I usually meditate before going to sleep, most of the entries here will
probably be written the next day about the previous night. I attempted to
reproduce the experience from the 12th (or 10th or 11th, not sure of the
exact date). I didn't set a firm resolution when I got started, so I bounced
between different mantras and the breath for a few minutes, but eventually
stabilized on "bu-dho" again, while reclining. After maybe five minutes, I
was able to interact with the nimitta in interesting ways. I could move it
around with my will, though it didn't always respond exactly the way I
thought it would, and not always immediately. I also tried using my hands to
move it and shape it, with similar results. I could vaguely make out the
shape of my hands (my eyes were closed and this was in a dark room, so it was
a mental image), and they were definitely larger than usual, and seemed to be
made out of some sort of darkness (not in a creepy way, just in a way that
contrasted with the nimitta). I could squeeze, shape, poke, and swirl around
the light in this way. I don't know if this had any value, but it was an
interesting experience. I tried to use this to jump into insight practice by
trying to notice aspects of the three characteristics, but then my
concentration fell apart and it ended. I think I'm pretty weak on both the
concentration and insight sides of practice, but making some progress.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="2020-12-13"&gt;2020-12-13&lt;/h2&gt;
&lt;p&gt;Some background since I started the log late: I started meditating more over
last winter, but didn't really make it anywhere until spring or maybe early
summer 2020. I'd used some basic sort of mindfulness practice years ago in
therapy, but got back into the idea after reading "Why Buddhism Is True". I
also read some of the major Mahayana and Theravada sutras, then MCTB1, TMI,
and then MCTB2, all of which made a big impact. I've attended (online) sangha
on and off (a Plum Village one mostly), and have tried out techniques from
various traditions. After trying noting practice for a while, and also trying
to find the beginnings and ends of breaths as emphasized in parts of TMI, I
realized there was something to this stuff. Basically, when they say "if you
follow these instructions you will get these results", they mean it. So I'm a
believer now. All of the map theory in MCTB is very interesting to me, and I
think, using the main maps Dr. Ingram presents there, it would be reasonable
to say that I had an A&amp;amp;P event when I was 14 (in a Christian context), and
spent the following 15 years or so dealing with the Dark Night. That lines up
too well with my experience to completely discount it, anyway. So now my
focus is on moving past that, but also in learning and experimenting with
these different techniques. Kasina meditation sounds very handy, so I think
I'll want to read the Visuddhimagga and Vimuttimagga sometime soon, too. I
don't know enough, doctrinally, to say I absolutely belong with one specific
tradition or lineage, but Theravada techniques seem to work for me, but I
also like some of the aspects of Chan/Thien/Zen, and am starting to
appreciate the Vajrayana. Maybe I'm en Ekayana Buddhist, if there is such a
thing.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="2020-12-12"&gt;2020-12-12&lt;/h2&gt;
&lt;p&gt;Not sure of the exact date, could be the 10th or 11th too. This comes a few
days after taking the bodhisattva vows (on the 5th). These days were
high-tension. I had been having trouble solidifying the breath as an object.
This night, I tried mantra instead — initially the prajnaparamita mantra from
the heart sutra, I think, but then I switched to just "bu-dho" with the in
and out breath. After maybe 3 or 4 minutes of this, things had become really
thick and syrupy, like my perception was muffled but in a pleasant way, but
it also took some effort to clearly mentally "hear" the mantra. But then as
soon as I noticed that muffled/thick quality, it was like that warm
yellow-brown thickness got cleaned out in an instant, and everything was
clear. I could hear "bu-dho" clearly but didn't feel like I needed to focus
on it as much, and mentally there was a feeling of crispness, like the brown
and yellow had been replaced with a cool blueish white and deep black. That
change startled me enough that I wasn't able to stay in it, though. I don't
know if this was just making it into the first jhana, or mind and body (I
wasn't really doing anything like noting practice so I assume not), but it
felt like progress, so I hope I can do it again.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/meditation-log</guid><pubDate>Sat, 02 Jan 2021 00:00:00 -0700</pubDate></item><item><title>The Question Of Tibet</title><link>https://zacanger.com/blog/posts/the-question-of-tibet</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#addressing-the-anti-communist-viewpoint"&gt;Addressing the Anti-Communist Viewpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#addressing-the-pro-communist-viewpoint"&gt;Addressing the Pro-Communist Viewpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#my-position"&gt;My Position&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#further-reading"&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I don't usually blog about politics, but as both a Buddhist with a deep
appreciation for the Vajrayana and its syncretic Tibetan forms (Buddhism, like
most religions, tends to absorb bits of other religions when it goes somewhere
new; the Taoist and folk religion influence on Chan and Theravada influence on
Thien are good examples of this), and as a Marxist who critically supports the
Communist Party of China (some would call me a Dengist and think that's an
insult), I've thought a lot about the political and religious situation in
Tibet.&lt;/p&gt;
&lt;p&gt;If you watch any documentary that has anything to do with Tibetan Buddhism, and
it was produced anywhere other than in China, you're likely to be inundated with
political posturing whether you realize it or not (Sinophobia is so ingrained in
Western, and especially American, culture, that we frequently don't even realize
that we're hearing racist and imperialist propaganda when it comes to China!).
As far as I can tell, the people putting this stuff out there fall into two
camps: blatantly anti-Communist and/or anti-Chinese State-department fans
and/or racists who see the Dalai Lama and Tibet as a tool they can use to
demonize the PRC or CPC, and those who are well-meaning but uneducated and not
capable of critical thinking on a complex subject like the history of Tibet.&lt;/p&gt;
&lt;p&gt;Tibet is complicated, and anyone uncritically supporting (including unwittingly)
the so-called government-in-exile &lt;em&gt;or&lt;/em&gt; the Communist Party of China's history in
Tibet should really take a deeper look. I'll address both viewpoints.&lt;/p&gt;
&lt;h2 id="addressing-the-anti-communist-viewpoint"&gt;Addressing the Anti-Communist Viewpoint&lt;/h2&gt;
&lt;p&gt;The common perception of pre-Communist Tibet in the global north is of an
idyllic, highly religious, peaceful society. This is a fabrication. Tibet was a
theocratic dictatorship (I don't often use the word 'dictatorship', since in
America, everyone we don't like is a dictator and everyone we do like is a
benevolent leader, but this case warrants it) for much of its history, and until
the communists reclaimed the region, was extremely poor (it's still poor, but
less extremely) and essentially a feudal society, with serfs (some media will
say slaves). Tibet was not like Bhutan is now, with a state religion and a
monarchy but a largely happy and productive society. Think something more like
the Taliban. The period between 1912 and 1950 was not a happy time for the
average Tibetan under the theocratic absolute monarchy of the Gelug sect.&lt;/p&gt;
&lt;p&gt;There is also a common misunderstanding about Tibetan Buddhism, namely that the
Dalai Lama represents all Buddhists in Tibet. It's true that the Gelug sect was
predominant since the time of the 5th Dalai Lama (17th century), but it is just
one of four major Buddhist traditions (and there are other smaller sects
besides). The Dalai Lama represents the Gelug tradition, which held political
power for roughly three centuries, of which two centuries were actually under
Qing rule, which brings me to the next point.&lt;/p&gt;
&lt;p&gt;The fact that Tibet was only (de facto) independent in recent centuries for a
few decades is almost always completely conveniently ignored. It was considered
a part of the Qing Dynasty since the early 1700s, and retaken by China in 1950.
Before Qing, Tibet was independent for roughly four centuries, and before that
it was under the Yuan. Going back to before the 10th century the history is
equally mixed. I'll address whether that's actually a justification for Chinese
governance later.&lt;/p&gt;
&lt;p&gt;Tibet is also an extremely poor region, and that factors heavily into how the
CPC works with it. The Tibet Autonomous Region has 90% of its government costs
paid for by the central government, and Tibet is exempt from paying taxes.
China's crusade to end absolute poverty succeeded in October 2020. Tibet is
still poor, but by sending teams to improve infrastructure and education,
utilities, internet connectivity, and develop agricultural, commerce, and
manufacturing industries, the CPC has worked hard to raise the average net
income per person from roughly $220 to $1400 in four years in a sustainable way.
That's not a lot of money, but it's a lot more than it was.&lt;/p&gt;
&lt;p&gt;On the myth of cultural genocide or "Sinicization": that is largely a myth, just
as it is in the case of Xinjiang. Tibet is roughly 90% ethnically Tibetan, and
culturally still very much Tibet. The primary point most people make about this
is that photos of the Dalai Lama were banned for a period and political (and
religious) groups supporting him and the Central Tibetan Administration (the
government in exile) have been repressed. Think about this in generic terms to
bypass your internalized Sinophobia: If a government knows that there are groups
actively supporting an organization that wants to overthrow part of your
government, and that organization is partially supported and funded by other
governments that are active enemies of your government who are known for a long
history of staging coups and invasions far outside of its borders, is it
reasonable to try to weed that out? Once you take out words like "China" and
"Tibet", it probably seems pretty reasonable, even to Americans.&lt;/p&gt;
&lt;p&gt;The last point I'll make here is that the government in exile and ant-Communist
activity in Tibet were and likely still are heavily backed, funded, and trained,
by the CIA, which is not known for spreading democracy and doing good deeds. The
CIA overthrows democracies and destroys nations for capital and political gains.
It's not the kind of organization you want on your side.&lt;/p&gt;
&lt;h2 id="addressing-the-pro-communist-viewpoint"&gt;Addressing the Pro-Communist Viewpoint&lt;/h2&gt;
&lt;p&gt;All that said, China is not necessarily in the right. This is a complicated
subject and can't be reduced to "The Dalai Lama had slaves so China did the
right thing".&lt;/p&gt;
&lt;p&gt;The fact that Tibet has not been a truly independent state for more than 40
years in a long, long time, to me, is not actually all that important. Let's
apply the same logic to the United States (with the obvious caveat that this is
not an equal comparison, since the United States is a settler-colonial empire
initially ruled by slaver landowners and now ruled by billionaires through their
millionaire political pawns in both major parties, and also China didn't kill
tens of millions of Tibetans....), and see how that works out. The indigenous
peoples of the United States might have some opinions about whether having been
occupied for centuries by Europeans is actually justification for continuing
occupation. The same could be said about less brutal and oppressive empires than
the US.&lt;/p&gt;
&lt;p&gt;China's re-taking of Tibet, whether justified or not, was not not done well. In
hindsight it could be seen as a liberation, but, like the Great Leap Forward and
Cultural Revolution, there were many many mistakes made, some of them
disastrous. That shouldn't be a point of debate among Marxists, even Maoists,
because Marxism is not about dogma and leader-worship, it's about careful
analysis. The annexation and effects of the Cultural Revolution in particular
were unduly destructive of life, culture, and history. Important religious sites
were destroyed. It didn't have to be that way. (If you're a Marxist who loves
the "opium of the people" quote and uses that to justify some country or
another's religious oppression, I challenge you to read the entire quote, in
context, from the &lt;em&gt;Critique of Hegel's Philosophy of Right&lt;/em&gt;, while keeping in
mind that opium was seen largely as a painkiller and nothing more in the early
1800s in Europe. The problem with religion from a Marxist standpoint is
organized religion as a political tool of capital, not religion in and of
itself.)&lt;/p&gt;
&lt;h2 id="my-position"&gt;My Position&lt;/h2&gt;
&lt;p&gt;I'm not Chinese, and I'm not Tibetan either, so my personal opinion isn't worth
anything. If there was a movement for an independent Tibet that wasn't backed by
imperialist nations to try to win political points against China and restore the
theocratic rule of one of four major sects of Tibetan Buddhism, that might be an
idea worth considering. There isn't, and even the current Dalai Lama no longer
calls for something like that, so it's really a moot point (or would be, if the
CIA and their Hollywood stooge mouthpieces would let it go). Right now, in 2020,
it makes sense to support what the CPC is doing in Tibet, despite their mixed
history for the first thirty or so years in Tibet.&lt;/p&gt;
&lt;p&gt;Taking a hardline stance either way shows a lack of critical thinking, and is
especially prevalent among Maoist types and pro-US-empire "Buddhists". That's
not Marxism, it's also not the Middle Way. I hope this little post helped bring
you some clarity on the Tibet issue.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.theguardian.com/commentisfree/2009/feb/10/tibet-china-feudalism"&gt;What we don't hear about
  Tibet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.chicagotribune.com/news/ct-xpm-1997-01-26-9701270002-story.html"&gt;The CIA's Secret War in
  Tibet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reuters.com/article/us-china-tibet/dalai-lamas-pro-independence-brother-dies-in-u-s-idUSPEK19832520080906"&gt;Dalai Lama's CIA Brother
  Dies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nybooks.com/daily/2013/04/09/cias-cancelled-war-tibet/"&gt;Tibet: The CIA's Cancelled
  War&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.umsl.edu/~thomaskp/dalai.htm"&gt;The Dalai Lama and the CIA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.cgtn.com/news/2020-10-16/How-Tibet-eliminated-absolute-poverty-despite-harsh-climate--UDkSdO4J5S/index.html"&gt;How China's Toughest Battleground Defeated Absolute
  Poverty&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/the-question-of-tibet</guid><pubDate>Sat, 26 Dec 2020 00:00:00 -0700</pubDate></item><item><title>Portable Environments With Bash</title><link>https://zacanger.com/blog/posts/portable-environments-with-bash</link><description>&lt;p&gt;I recently switched from &lt;code&gt;st&lt;/code&gt; to &lt;code&gt;xterm&lt;/code&gt; on my Linux machines, and I also have a
Mac and a Windows machine with WSL. &lt;code&gt;st&lt;/code&gt; and Terminal.app allow for copy-pasting
using fairly intuitive keyboard shortcuts, but I didn't know what the equivalent
was for &lt;code&gt;xterm&lt;/code&gt;. Fortunately, it doesn't matter, because I have bash aliases
that do what I need to do. The nice thing about having well-developed config
files ("dotfiles") is that you may not even need to learn all the new shortcuts
and clicking options for new software, you can just use what you already have.
In the case of copying and pasting, here's what's in &lt;a href="https://github.com/zacanger/dotfiles"&gt;my
dotfiles&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;if [[ $(uname) == 'Darwin' ]]; then
  alias co='pbcopy'
  alias pa='pbpaste'
  alias clc='echo -n | co'
else
  alias co='xclip -selection clipboard'
  alias pa='xclip -selection clipboard -o'
  alias clc='echo -n | co &amp;amp;&amp;amp; echo -n | xclip -selection primary'
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage is something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;# copy some text. let's say you're trying to use youtube-dl to
# download a video, and you put the youtube URL on your clipboard
youtube-dl $(pa)

# to put something on the clipboard, just pipe it through:
echo foo | co
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I thought this was handy enough to share, particularly from the standpoint of a
philosophy for working with your computers: you could spend lots of time reading
the manpages for each new app you run into, or you could handle enough of the
edge-cases to get by in your own config and never have to worry about it.&lt;/p&gt;
&lt;p&gt;Happy holidays!&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/portable-environments-with-bash</guid><pubDate>Fri, 25 Dec 2020 00:00:00 -0700</pubDate></item><item><title>vows</title><link>https://zacanger.com/blog/posts/vows</link><description>&lt;ul&gt;
&lt;li&gt;suffering beings are numberless; i vow to save them all.&lt;/li&gt;
&lt;li&gt;attachment is inexhaustible; i vow to end it all.&lt;/li&gt;
&lt;li&gt;the dharma gates are numberless; I vow to learn them all.&lt;/li&gt;
&lt;li&gt;the way of awakening is unsurpassable; for the benefit of all beings, i vow
  to accomplish it.&lt;/li&gt;
&lt;/ul&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/vows</guid><pubDate>Sat, 05 Dec 2020 00:00:00 -0700</pubDate></item><item><title>pluralsight 'secure coding, preventing sensitive data exposure' notes</title><link>https://zacanger.com/blog/posts/secure-coding-notes</link><description>&lt;p&gt;had to run through this for compliance so i took a few notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not all user data is "sensitive", depends on regulations:&lt;ul&gt;
&lt;li&gt;logs are not sensitive data (assuming they're clean)&lt;/li&gt;
&lt;li&gt;acls are not sensitive data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;attack vectors:&lt;ul&gt;
&lt;li&gt;connection between browser and application (in transit)&lt;/li&gt;
&lt;li&gt;connection between app and db (in transit)&lt;/li&gt;
&lt;li&gt;db itself (at rest)&lt;/li&gt;
&lt;li&gt;browser itself (at rest)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sensitive data can be either plain text or ciphertext (encrypted or hashed)&lt;/li&gt;
&lt;li&gt;attack stuff:&lt;/li&gt;
&lt;li&gt;in transit:&lt;ul&gt;
&lt;li&gt;mitm&lt;ul&gt;
&lt;li&gt;sniffing, or sitting in the path/shaping traffic&lt;/li&gt;
&lt;li&gt;dns-based&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tls&lt;ul&gt;
&lt;li&gt;tls is at tcp layer&lt;/li&gt;
&lt;li&gt;https is http over tls&lt;/li&gt;
&lt;li&gt;how it works:&lt;ul&gt;
&lt;li&gt;browser generates shared secret, encrypts using the cert's public key&lt;/li&gt;
&lt;li&gt;app decrypts shared secret&lt;/li&gt;
&lt;li&gt;then the application generates a shared symmetric key for the actual traffic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;there can be another attack by stealing the private key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;private key storage:&lt;ul&gt;
&lt;li&gt;software: no physical access restrictions (cryptographic module)&lt;/li&gt;
&lt;li&gt;hardware: physical access restrictions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;perfect forward secrecy&lt;ul&gt;
&lt;li&gt;attacker only sniffing/recording, not tampering&lt;/li&gt;
&lt;li&gt;negotiation of DH params is in plaintext&lt;/li&gt;
&lt;li&gt;backend signs params, client verifies signature&lt;/li&gt;
&lt;li&gt;prevents decryption of previous traffic (but not current traffic)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;more on certificates&lt;ul&gt;
&lt;li&gt;the 'which directory?' problem comes up when the chain can't be followed (for example, if the root cert isn't available)&lt;/li&gt;
&lt;li&gt;public key pinning is associating a cert with a known host&lt;ul&gt;
&lt;li&gt;pins cert, public key, or hash of either. hashing is preferred.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;protocol downgrade attack&lt;ul&gt;
&lt;li&gt;get cookies, headers, etc&lt;/li&gt;
&lt;li&gt;no mixed content, hsts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;at rest:&lt;ul&gt;
&lt;li&gt;passwords&lt;ul&gt;
&lt;li&gt;inexpensive to work with&lt;/li&gt;
&lt;li&gt;convenient&lt;/li&gt;
&lt;li&gt;password (in)security&lt;/li&gt;
&lt;li&gt;some overhead on policies, proper storage&lt;/li&gt;
&lt;li&gt;ACLs on the db&lt;/li&gt;
&lt;li&gt;hashing, salting (hashing is one-way, fixed output length)&lt;/li&gt;
&lt;li&gt;vulnerable to brute force attacks depending on password lengths and probability of known strings (dictionary attacks)&lt;/li&gt;
&lt;li&gt;rainbow tables (known hashed passwords, try to match to plaintext)&lt;/li&gt;
&lt;li&gt;salt has to be stored with computed hash&lt;ul&gt;
&lt;li&gt;with a salt, basically no lookup tables will actually work, since there would need to be a different table per salt&lt;/li&gt;
&lt;li&gt;salts hide identical passwords&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hashing function can be ~1s, run as slow as possible without hurting regular user perf&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;crypto alone is not enough. ACLs, other access restrictions, prevent db tampering&lt;ul&gt;
&lt;li&gt;admin roles&lt;/li&gt;
&lt;li&gt;signed columns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;owasp recommendations:&lt;ul&gt;
&lt;li&gt;never put sensitive data in the url (caching, referrer - &lt;code&gt;a&lt;/code&gt; tag &lt;code&gt;rel&lt;/code&gt;s help here too)&lt;/li&gt;
&lt;li&gt;tls everywhere, no mixed content or requests&lt;/li&gt;
&lt;li&gt;always use recent versions of tls and strong ciphers&lt;/li&gt;
&lt;li&gt;at least 2048 bits in key&lt;/li&gt;
&lt;li&gt;multiple domain certificates (SANs)&lt;/li&gt;
&lt;li&gt;never use unqualified domains&lt;/li&gt;
&lt;li&gt;wildcard certs might be shady&lt;/li&gt;
&lt;li&gt;no self-signed certs&lt;/li&gt;
&lt;li&gt;return all necessary certs to clients&lt;/li&gt;
&lt;li&gt;don't use sha-1&lt;/li&gt;
&lt;li&gt;salt should be generated with cryptographically strong random data generator&lt;/li&gt;
&lt;li&gt;salt should be unique per credential (not per user)&lt;/li&gt;
&lt;li&gt;pw security should not depend on hiding or obscuring salt&lt;/li&gt;
&lt;li&gt;good hashing functions (in this order): argon2, pbkdf2, scrypt, bcrypt, hmacs&lt;/li&gt;
&lt;li&gt;max length for pws with no limited character set (160 chars)&lt;/li&gt;
&lt;li&gt;hash as part of several steps&lt;/li&gt;
&lt;li&gt;design password storage keeping in mind potential compromise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/secure-coding-notes</guid><pubDate>Fri, 04 Dec 2020 00:00:00 -0700</pubDate></item><item><title>Digital Security Guide</title><link>https://zacanger.com/blog/posts/digital-security-guide</link><description>&lt;p&gt;Crossposted from &lt;a href="https://prolesoft.github.io"&gt;ProleSoft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most major tech companies sell your data to advertisers and governments. You
need to stay safe online, so you should be careful about what you use and how
you use it.&lt;/p&gt;
&lt;p&gt;All the recommendations here are just that: recommendations. Most users will not
need to follow everything in this guide.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#general"&gt;General&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#unionizing"&gt;Unionizing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#passwords"&gt;Passwords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#encryption"&gt;Encryption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#os"&gt;OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#browsers"&gt;Browsers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#email"&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#messaging"&gt;Messaging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mfa"&gt;MFA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#search"&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#videos"&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dns"&gt;DNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vpn"&gt;VPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documents"&gt;Documents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sync"&gt;Sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="general"&gt;General&lt;/h3&gt;
&lt;p&gt;You should try to avoid anything hosted in, or owned by, a company in the US.
You should also use end to end encryption wherever possible.&lt;/p&gt;
&lt;p&gt;Don't use your real name, real address, or information that could be linked to
your identity in sensitive situations. This includes social media, photos, email
addresses, location, and anything else that could be linked to your identity. If
you host a website, use WHOIS privacy protection.&lt;/p&gt;
&lt;h3 id="unionizing"&gt;Unionizing&lt;/h3&gt;
&lt;p&gt;This section is not a guide on unionizing, just security recommendations.&lt;/p&gt;
&lt;p&gt;Do not use company Email, Messaging (Slack, Hipchat, etc.), phones, computers,
networks, or other resources for organization. A simple rule of thumb is: If the
company pays for it, don't use it. You have no protection under labor law if you
do. Check your company handbook/policies to see what they can access or claim
they can access, because you may also want to avoid organizing on your own
devices during work hours. Follow the other recommendations in this guide for
what apps and services to use, especially when it comes to messaging and email.&lt;/p&gt;
&lt;h3 id="passwords"&gt;Passwords&lt;/h3&gt;
&lt;p&gt;Use &lt;a href="https://www.xkcd.com/936/"&gt;passphrases&lt;/a&gt; over passwords if you need to be
able to remember it. Prefer random passwords generated by a password manager
like &lt;a href="https://keepassxc.org/"&gt;KeePassXC&lt;/a&gt; or &lt;a href="https://bitwarden.com/"&gt;Bitwarden&lt;/a&gt;
when you can. Never reuse passwords anywhere, and rotate your passwords
regularly. Check for password/phrase security
&lt;a href="https://howsecureismypassword.net/"&gt;here&lt;/a&gt;, and check regularly to see if your
data has been involved in a leak &lt;a href="https://haveibeenpwned.com/"&gt;here&lt;/a&gt;
(&lt;a href="#browsers"&gt;Firefox&lt;/a&gt; has this feature built in now).&lt;/p&gt;
&lt;h3 id="encryption"&gt;Encryption&lt;/h3&gt;
&lt;p&gt;Using &lt;a href="https://gnupg.org/"&gt;GnuPG&lt;/a&gt; (an implementation of PGP) takes some
practice, but is worth it for encrypting files manually and sending encypted
emails. Check out &lt;a href="https://github.com/bfrg/gpg-guide"&gt;this guide&lt;/a&gt; to getting up
and running with GPG.&lt;/p&gt;
&lt;h3 id="os"&gt;OS&lt;/h3&gt;
&lt;p&gt;Prefer almost any OS over Windows. Windows is buggy, full of telemetry (read:
Microsoft Spyware), and insecure. If you're tech savvy, learning Linux is a good
route. You could try &lt;a href="https://xubuntu.org/"&gt;Xubuntu&lt;/a&gt; as a good starter distro.
If you're very tech-minded, you could try &lt;a href="https://www.openbsd.org/"&gt;OpenBSD&lt;/a&gt; or
&lt;a href="https://www.freebsd.org/"&gt;FreeBSD&lt;/a&gt;. Mac OS is also a better choice than
Windows, but comes with some of the same vendor lock in (and a huge price tag).&lt;/p&gt;
&lt;p&gt;For extreme needs, you should look into &lt;a href="https://tails.boum.org/"&gt;Tails&lt;/a&gt; or
&lt;a href="https://www.qubes-os.org/"&gt;Qubes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Whichever OS you use, you absolutely need to enable Full-Disk Encryption&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Disk_encryption"&gt;Linux&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Most Linux distributions will offer setting up FDE at install time, which
  is easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forums.freebsd.org/threads/howto-quick-geli-encryption-guide.29652/"&gt;BSD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.apple.com/en-us/HT204837"&gt;Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.microsoft.com/en-us/help/4028713/windows-10-turn-on-device-encryption"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For mobile, both iOS and Android are okay options, as long as you keep them up
to date and don't install anything requiring permissions it shouldn't need. In
the Android world, you could also look into Lineage, UBPorts (Ubuntu Phone
fork), and other hobbyist OSs and phones.&lt;/p&gt;
&lt;h3 id="browsers"&gt;Browsers&lt;/h3&gt;
&lt;p&gt;Avoid Chrome. Google's business model is surveillance, and their browser exists
to collect your data. Also avoid Internet Explorer (it's unmaintained and
insecure), Microsoft Edge (because of the telemetry), and anything closed-source
or proprietary (which rules out Opera and Vivaldi).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mozilla.org/en-US/firefox/"&gt;Firefox&lt;/a&gt; is all-around the easiest
  option, and has tons of addons.&lt;ul&gt;
&lt;li&gt;See &lt;a href="https://github.com/pyllyukko/user.js"&gt;here&lt;/a&gt; for privacy settings tweaks.&lt;/li&gt;
&lt;li&gt;Recommended addons:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/"&gt;uBlock Origin&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/privacy-badger17/"&gt;Privacy Badger&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/duckduckgo-for-firefox/"&gt;DuckDuckGo&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/smart-https-revived/"&gt;Smart HTTPS&lt;/a&gt; or &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/https-everywhere/"&gt;HTTPS Everywhere&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.waterfox.net/"&gt;Waterfox&lt;/a&gt; is an independent fork of Firefox.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brave.com/"&gt;Brave&lt;/a&gt; is Chrome-based, has built in ad and tracker
  blocking, and has a Tor mode. It also includes its own advertisements and a
  cryptocurrency, though.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.torproject.org/download/"&gt;Tor Browser&lt;/a&gt; is a very secure option,
  but will be slow for everyday browsing, and Tor itself has had numerous flaws,
  besides being funded by the US military.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="email"&gt;Email&lt;/h3&gt;
&lt;p&gt;Avoid Google, Microsoft, Yahoo, and other US companies. Also try to avoid
companies that want your real name. &lt;a href="https://protonmail.com/"&gt;Protonmail&lt;/a&gt; is in
Switzerland and has a free plan. &lt;a href="https://tutanota.com/"&gt;Tutanota&lt;/a&gt; also has a
free plan, and is in Germany. See the links at the bottom of the page for more
recommendations.&lt;/p&gt;
&lt;h3 id="messaging"&gt;Messaging&lt;/h3&gt;
&lt;p&gt;You &lt;em&gt;need&lt;/em&gt; end-to-end encrpytion for anything sensitive. This means your
communications should be encrypted in transit (TLS 1.2 is the only thing you
should accept as of early 2020), and also encrypted at rest (on the server where
they're stored) without the company running the messaging platform being able to
read them. If communications are not E2EE, you should treat them as if they're
public.&lt;/p&gt;
&lt;p&gt;Use &lt;a href="https://signal.org/"&gt;Signal&lt;/a&gt; for an SMS/KakaoTalk/WhatsApp alternative, and
&lt;a href="https://about.riot.im/"&gt;Riot/Matrix&lt;/a&gt; for group chat.&lt;/p&gt;
&lt;h3 id="mfa"&gt;MFA&lt;/h3&gt;
&lt;p&gt;Enable &lt;a href="https://en.wikipedia.org/wiki/Multi-factor_authentication"&gt;MFA&lt;/a&gt; wherever
possible. &lt;a href="https://authy.com/"&gt;Authy&lt;/a&gt; is a convenient MFA app that isn't tied to
a specific device or external (Google, Apple) account. For a hardware device,
check out &lt;a href="https://www.yubico.com/"&gt;YubiKey&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="search"&gt;Search&lt;/h3&gt;
&lt;p&gt;Use &lt;a href="https://duckduckgo.com/"&gt;DuckDuckGo&lt;/a&gt;,
&lt;a href="https://www.startpage.com/"&gt;Startpage&lt;/a&gt;, or &lt;a href="https://searx.me/"&gt;Searx&lt;/a&gt; for
search.&lt;/p&gt;
&lt;h3 id="videos"&gt;Videos&lt;/h3&gt;
&lt;p&gt;Use &lt;a href="https://youtube-dl.org/"&gt;youtube-dl&lt;/a&gt; to watch videos from almost any
website, and &lt;a href="https://www.invidio.us/"&gt;Invidious&lt;/a&gt; to watch YouTube videos. Play
videos locally with &lt;a href="https://mpv.io/"&gt;MPV&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="dns"&gt;DNS&lt;/h3&gt;
&lt;p&gt;Change your default DNS provider, which is probably your ISP or Google, to
something like &lt;a href="https://blahdns.com/"&gt;BlahDNS&lt;/a&gt; or
&lt;a href="https://securedns.eu/"&gt;SecureDNS&lt;/a&gt;. See the links at the bottom of the page for
more recommendations. Avoid DNS providers hosted or run in the US, providers
that have logging, and providers that do not have DNSSEC. You can also use
&lt;a href="https://pi-hole.net/"&gt;Pi-hole&lt;/a&gt;,
&lt;a href="https://forums.freebsd.org/threads/pi-hole-alternative.67704/"&gt;Unbound&lt;/a&gt;, or
other systems to block trackers, ads, and other bad IPs. Lists to get you
started are available &lt;a href="https://www.iblocklist.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="vpn"&gt;VPN&lt;/h3&gt;
&lt;p&gt;Use a VPN with no logging, that is not hosted or run by a company in the US:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mullvad.net/en/"&gt;Mullvad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://protonvpn.com/"&gt;ProtonVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ivpn.net/"&gt;IVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://airvpn.org/"&gt;AirVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nordvpn.com/"&gt;NordVPN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="documents"&gt;Documents&lt;/h3&gt;
&lt;p&gt;Avoid proprietary and exploitable formats. That means no Microsoft Word
&lt;code&gt;doc&lt;/code&gt;/&lt;code&gt;docx&lt;/code&gt; and no PDFs if possible. Plain text formats (&lt;code&gt;txt&lt;/code&gt;, &lt;code&gt;md&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt;,
etc.) allow reading through any application and limit the chance of executing
arbitrary code. Use plain text editors that are open source and not made by
major US companies (avoid Google Docs, VS Code, Atom, etc.) as much as you can,
and use LibreOffice when you can't. &lt;a href="#encryption"&gt;Encrypt&lt;/a&gt; any documents that
contain sensitive data, like information that could be used to identify someone,
schedules, and addresses.&lt;/p&gt;
&lt;h3 id="sync"&gt;Sync&lt;/h3&gt;
&lt;p&gt;Dropbox is a US company, and stores your data on their servers. Prefer a
self-hosted alternative like &lt;a href="https://github.com/haiwen/seafile"&gt;Seafile&lt;/a&gt;,
&lt;a href="https://github.com/syncthing/syncthing"&gt;Syncthing&lt;/a&gt;,
&lt;a href="https://github.com/syncany/syncany"&gt;Syncany&lt;/a&gt;, or
&lt;a href="https://www.sparkleshare.org/"&gt;SparkleShare&lt;/a&gt;. &lt;a href="#encryption"&gt;Encrypt&lt;/a&gt; any
sensitive files.&lt;/p&gt;
&lt;h3 id="links"&gt;Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dnsleaktest.com/"&gt;DNS Leak Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dnsprivacy.org/wiki/"&gt;DNS Privacy Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dessalines/essays/blob/master/favorite_apps_and_services.md"&gt;Dessaline's Favorite Apps and Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.eff.org/pages/tools"&gt;EFF Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dessalines/Messaging-Services-Comparison"&gt;Messaging Services Comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.privacytools.io/"&gt;PrivacyTools&lt;/a&gt; (List of software recommendations)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thinkprivacy.io/"&gt;ThinkPrivacy&lt;/a&gt; (Software recommendations blog)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://riseup.net/en/security"&gt;RiseUp Digital Security Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ethical.net/resources/"&gt;Ethical Alternatives&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/digital-security-guide</guid><pubDate>Thu, 19 Dec 2019 00:00:00 -0700</pubDate></item><item><title>Switching from MIT to LGPL-3.0</title><link>https://zacanger.com/blog/posts/mit-to-lgpl-3</link><description>&lt;p&gt;If you use my libraries, you should know:&lt;/p&gt;
&lt;p&gt;I'm in the process of changing most of my active projects from the MIT license
to LGPL-3.0. If that doesn't work for you, you're more then welcome to keep
using old versions.&lt;/p&gt;
&lt;p&gt;Every project that is stable (at least 1.0.0, that's most libraries) will get a
major version bump, so it'll be easy to figure out when and if you can upgrade.&lt;/p&gt;
&lt;p&gt;I'm not doing this because I want to scare people off from using my software,
I'm doing this because I want people to give back to the community and because I
think it's time that the GitHub generation of developers (myself included) faces
up to the fact that open source != free software.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/mit-to-lgpl-3</guid><pubDate>Fri, 30 Aug 2019 00:00:00 -0700</pubDate></item><item><title>Use Boring Stuff (It's Okay!)</title><link>https://zacanger.com/blog/posts/use-boring-stuff</link><description>&lt;p&gt;(copy-pasted from a mastodon thread.)&lt;/p&gt;
&lt;p&gt;i've seen this meme going around a bit that compares unix-y systems/linux
distros and categorizes them in terms of something like "actual sysadmin" to
"windows user" and i just wanna say, don't take it seriously.&lt;/p&gt;
&lt;p&gt;i've been using 95%-ish free software for about 10 years now, including linux
on the desktop. my job is mostly working with linux stuff, including all the
hip, modern ops stuff (like containers and kubernetes and shit).&lt;/p&gt;
&lt;p&gt;on my own computers, i've run debian, arch, ubuntu, elementary, freebsd (very
briefly), opensuse (also briefly), fedora, and lots of other debian and arch
derivatives. i am, like, sort of a professional at this stuff, since i get
paid lots of money to do it, as a living.&lt;/p&gt;
&lt;p&gt;right now, i have five laptops. one is a mac, one runs windows 10, one has
debian sid, one has manjaro, and one has peppermint (i am not joking,
peppermint is slick). i do linux and servers and shit &lt;em&gt;for a job&lt;/em&gt; and i run
the distros that the meme says is for babies.&lt;/p&gt;
&lt;p&gt;there's nothing wrong with using shit that just works. i use windows on one
laptop because audio software (vsts, the DAW i like) just works. i have a mac
because it Just Works with Meraki and AD and whatnot. i use boring, "babby"
distros on my personal laptops because i spend a lot less time memorizing tar
flags and compiling openssl when pacman shits itself.&lt;/p&gt;
&lt;p&gt;as a certified professional person who does computers for a living, i'm
telling you, you don't need to use netbsd or gentoo to be good at computers.
and tbh i'd argue that if you're using gentoo at work, you're wasting your
time and your employers money, and you should just use something that works.
(nothing against gentoo, i've never actually run gentoo, i'm sure it's swell.)&lt;/p&gt;
&lt;p&gt;i've been thinking a lot lately about Not Invented Here syndrome and too much
abstraction and always doing the cool thing rather than the thing that makes
sense, so this stuff is on my mind. i should not be spending time debugging an
in-house hacky feature flag system when we could just use a thing that's
already well-supported. and no one should run their own kubernetes, you should
just use the thing your cloud provider already has (or rancher).&lt;/p&gt;
&lt;p&gt;and you should not be hunting down your own drivers and trying to figure out
how to get a working version of glibc on your super hip unix software
distribution.&lt;/p&gt;
&lt;p&gt;unless that's something you're really into! if you are, that's cool, and you
should totally do that!&lt;/p&gt;
&lt;p&gt;but if that's not why you're using linux or bsd, then fuck that, find
something stable and usable! i like watching kdramas on viki! i don't like
trying to figure out how to use curl without a libc!&lt;/p&gt;
&lt;p&gt;anyway, there's a sunday rant for you. TLDR: use shit that works if you have
better things to do. if you have good reasons to use shit that needs help to
get it working (including just for fun!), then do that. but don't feel like a
noob if you use shit that just works. i use shit that just works. people will
pay you money if you know how to use shit that just works.&lt;/p&gt;
&lt;p&gt;i'm also definitely not saying we should all use the same boring, stable stuff
all the time. if you're a person who hacks on really fun, low level stuff,
that's awesome! people working on wayland, for example: that's awesome! the
rest of us need you!&lt;/p&gt;
&lt;p&gt;but if you're a person trying to just use linux on the desktop, or trying to
maintain a whole bunch of servers, or whatever, just use the boring thing! use
the boring thing until the hipster thing is the boring thing! that's okay!&lt;/p&gt;
&lt;p&gt;it's easy to argue that the exciting new stuff won't become stable and boring
unless we all adopt it and contribute back, and i guess there's some validity
to that, but at the same time, i need to watch my korean soap operas, and i
definitely DON'T need to try to explain to the CTO that i put some hipster
distro in production because i thought we should be supporting experimental
stuff and that's why we lost a million dollars yesterday.&lt;/p&gt;
&lt;p&gt;it's OKAY to use boring stuff, because boring stuff works.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/use-boring-stuff</guid><pubDate>Sun, 10 Feb 2019 00:00:00 -0700</pubDate></item><item><title>We Should Build Stuff</title><link>https://zacanger.com/blog/posts/we-should-build-stuff</link><description>&lt;p&gt;One thing that bugs me, as a person who does computers for a living, is that
people who do computers for a living suck at sharing our progress with the
rest of the world.&lt;/p&gt;
&lt;p&gt;If writers, musicians, visual artists, bloggers, even people we work with like
marketing folks and UX designers, had any idea how cool the tools are that
we’ve built for ourselves, we could have a thousand new amazing businesses to
build.&lt;/p&gt;
&lt;p&gt;In the writing space alone, we could build tools based on vim, pandoc, alex,
git, rsync, latex, and probably more that i’m not thinking of.&lt;/p&gt;
&lt;p&gt;I know Abstract exists and that's awesome, but it's only one very narrow,
specific problem. Why aren't we solving other problems that way? We have cool
shiny stuff and it works really well, mostly. And people are emailing
themselves drafts so they don't lose their work if their computer dies, like
it's 1995. Why don't we build more cool stuff for other people who create cool
stuff?&lt;/p&gt;
&lt;p&gt;I want to help people make cool stuff, and it pisses me off that the best
advice folks can offer people is "learn git and get bitbucket because you get
free private repos" and also "stop using microsoft products, you can't diff a
docx."&lt;/p&gt;
&lt;p&gt;I don't have a point, I'm just annoyed that programmers have all these cool
toys and we haven't done anything useful for anyone else with them, we've just
made our own lives better.&lt;/p&gt;
&lt;p&gt;IF YOU HAVE IDEAS let me know. Can we version control audio? Diff images in a
way that makes sense? Give graphic designers the power to make images that are
optimized for different platforms? Let writers check their writing for
insensitive language or easily export pretty PDFs and Word documents? IDK, but
I think it's pretty shitty that we engineers can do all that shit for
ourselves and not find ways to share that with anyone else.&lt;/p&gt;
&lt;p&gt;Developers made rsync friendly (dropbox). What if we could do the same with
Git? Imagemagick? Static analysis? I don't know what that would look like, but
those are products I would care about, because they'd be helping people get
work done.&lt;/p&gt;
&lt;p&gt;Some ideas:&lt;/p&gt;
&lt;p&gt;MS Word, but build on pandoc for incredibly easy file conversions, and also
Git for easy change management ('I liked this edit, but not this one'), and an
'advanced mode' which just goes into Vim's normal mode. We could build this!&lt;/p&gt;
&lt;p&gt;Figma and Invision are at least partially built in JS, CSS, and in Figma's
case some WASM. Why don't they have really good visual diffing integrated? Why
hasn't anyone build something for this?&lt;/p&gt;
&lt;p&gt;Audio files are hard. MIDI is a mess. I don't know what to do here, but to
start with, just using open formats would help. No more VST 2.x crap, no more
FLPs, use something build on plain text that can be parsed by other tools.
Free software DAWs are actually pretty damn good, and have been for ten years
or more.&lt;/p&gt;
&lt;p&gt;IDK. We need better tools for people who aren't programmers, and they need a
better business model than MS Word and any fucking Adobe subscription. FOSS
with a paid service (think npm) seems to work pretty ok. If you have any big
ideas, get in touch.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/we-should-build-stuff</guid><pubDate>Mon, 29 Oct 2018 00:00:00 -0700</pubDate></item><item><title>From Smoking to Vaping</title><link>https://zacanger.com/blog/posts/from-smoking-to-vaping</link><description>&lt;p&gt;So, I finally quit smoking. I think it might stick, this time, too.&lt;/p&gt;
&lt;p&gt;I've been a smoker for about 12 years, and in the last few years I've probably
averaged about a pack and a half a day. I've tried quitting cold turkey, tried
Chantix (which was awful), and tried e-cigs years ago when they were a new idea.&lt;/p&gt;
&lt;p&gt;This time, I quit by vaping, and I want to talk a little bit about that for
people who might be considering doing the same.&lt;/p&gt;
&lt;p&gt;Last time I tried e-cigarettes, they were crap. You'd buy disposables at the gas
station and hope they lasted more than a day or two. It wasn't significantly
cheaper than smoking, and wasn't even slightly satisfying. I think that marred
my opinion of smoking replacements for a while.&lt;/p&gt;
&lt;p&gt;I bought a vape about a year ago from a friend, but didn't use it much. What I'd
seen of vaping so far looked complex and inconvenient. You had to know things
like Ohm's Law, and I watched friends build their own coils and talk about
organic cotton and all kinds of stuff. I wanted something to help me quit
smoking, not a new hobby, so I kind of used that vape until it tasted like crap
and then stopped.&lt;/p&gt;
&lt;p&gt;This time, I went to a smoke shop and asked for the simplest thing possible. I
ended up walking out with a Smok Priv V8 starter kit, extra atomizers, and two
bottles of juice. This thing is pretty nice. There's only one button (don't need
to care about wattage and voltage), it fills from the top (don't need to take it
apart to refill), charges with a standard micro-USB cable, and changing the
atomizers is super straightforward. My only complaint with it is that the
battery door doesn't stay shut easily. I ended up putting a strip of duct tape
across the bottom, and it's fine.&lt;/p&gt;
&lt;p&gt;As a sidenote, I actually bought more coils for the vape I'd bought earlier (an
iStick 40w with a Kanger subtank mini) and it turns out it's actually very
straightforward to operate and maintain, too. I just had a mental block about
it.&lt;/p&gt;
&lt;p&gt;I've been vaping steadily for about a month now, and haven't had an analog (real
cigarette) in about two weeks, and it's mostly been fine. I had quitter's flu a
bit, but because I'm still getting &lt;em&gt;some&lt;/em&gt; nicotine it wasn't nearly as bad as
when you quit cold turkey.&lt;/p&gt;
&lt;p&gt;I've also learned a bit about vaping, as I've needed to know it, but it hasn't
been an overwhelming amount of stuff to figure out right up front. I found out
that juice with high sugar content seems to burn up the cotton in the atomizer
more quickly, and juice with a high VG to PG ratio does the same.&lt;/p&gt;
&lt;p&gt;I feel a bit better. I still get out of breath when walking quickly for a long
time, but not when going up stairs anymore. I think I probably smell better,
too. My sense of smell is a little better, and the smell of cigarettes actually
grosses me out a bit now.&lt;/p&gt;
&lt;p&gt;I'm not trying to put together a "what you need to know" sort of post, but if
you're thinking about quitting smoking, I can say that vaping is actually a
decent option these days. I didn't take time off work, didn't get the shakes,
haven't been seriously sick, and haven't flipped out on anyone. I started on
juice at 6mg and am slowly starting to work down to 3 (and then hopefully
eventually 0), and it hasn't been a problem. The most difficult thing has been
buying stuff online, since I live in Utah and Utah is weird.&lt;/p&gt;
&lt;p&gt;I don't really have a good ending to this post. Give vaping a shot. You can get
started for less than $50 these days, so why not?&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/from-smoking-to-vaping</guid><pubDate>Wed, 22 Nov 2017 00:00:00 -0700</pubDate></item><item><title>GFM Test</title><link>https://zacanger.com/blog/posts/gfm-test</link><description>&lt;h1 id="this-is-a-test-of-github-flavoured-markdown"&gt;This is a Test of GitHub-Flavoured Markdown&lt;/h1&gt;
&lt;p&gt;Text can be &lt;strong&gt;bold&lt;/strong&gt;, &lt;em&gt;italic&lt;/em&gt;, or &lt;del&gt;strikethrough&lt;/del&gt;. &lt;a href="https://github.com"&gt;Links&lt;/a&gt; should be blue with no underlines (unless hovered over).&lt;/p&gt;
&lt;p&gt;There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.&lt;/p&gt;
&lt;p&gt;There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs. There should be whitespace between paragraphs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There should be no margin above this first sentence.&lt;/p&gt;
&lt;p&gt;Blockquotes should be a lighter gray with a gray border along the left side.&lt;/p&gt;
&lt;p&gt;There should be no margin below this final sentence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="header-1"&gt;Header 1&lt;/h1&gt;
&lt;p&gt;This is a normal paragraph following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p&gt;
&lt;h2 id="header-2"&gt;Header 2&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="header-3"&gt;Header 3&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;This is a code block following a header.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="header-4"&gt;Header 4&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;This is an unordered list following a header.&lt;/li&gt;
&lt;li&gt;This is an unordered list following a header.&lt;/li&gt;
&lt;li&gt;This is an unordered list following a header.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="header-5"&gt;Header 5&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;This is an ordered list following a header.&lt;/li&gt;
&lt;li&gt;This is an ordered list following a header.&lt;/li&gt;
&lt;li&gt;This is an ordered list following a header.&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id="header-6"&gt;Header 6&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;What&lt;/th&gt;
&lt;th&gt;Follows&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A table&lt;/td&gt;
&lt;td&gt;A header&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A table&lt;/td&gt;
&lt;td&gt;A header&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A table&lt;/td&gt;
&lt;td&gt;A header&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;There's a horizontal rule above and below this.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Here is an unordered list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Salt-n-Pepa&lt;/li&gt;
&lt;li&gt;Bel Biv DeVoe&lt;/li&gt;
&lt;li&gt;Kid 'N Play&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And an ordered list:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Michael Jackson&lt;/li&gt;
&lt;li&gt;Michael Bolton&lt;/li&gt;
&lt;li&gt;Michael Bublé&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And an unordered task list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked="checked" disabled="disabled" type="checkbox" /&gt; Create a sample markdown document&lt;/li&gt;
&lt;li&gt;&lt;input checked="checked" disabled="disabled" type="checkbox" /&gt; Add task lists to it&lt;/li&gt;
&lt;li&gt;&lt;input disabled="disabled" type="checkbox" /&gt; Take a vacation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a "mixed" task list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled="disabled" type="checkbox" /&gt; Steal underpants&lt;/li&gt;
&lt;li&gt;?&lt;/li&gt;
&lt;li&gt;&lt;input disabled="disabled" type="checkbox" /&gt; Profit!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a nested list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jackson 5&lt;ul&gt;
&lt;li&gt;Michael&lt;/li&gt;
&lt;li&gt;Tito&lt;/li&gt;
&lt;li&gt;Jackie&lt;/li&gt;
&lt;li&gt;Marlon&lt;/li&gt;
&lt;li&gt;Jermaine&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TMNT&lt;ul&gt;
&lt;li&gt;Leonardo&lt;/li&gt;
&lt;li&gt;Michelangelo&lt;/li&gt;
&lt;li&gt;Donatello&lt;/li&gt;
&lt;li&gt;Raphael&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Definition lists can be used with HTML syntax. Definition terms are bold and italic.&lt;/p&gt;
&lt;dl&gt;
    &lt;dt&gt;Name&lt;/dt&gt;
    &lt;dd&gt;Godzilla&lt;/dd&gt;
    &lt;dt&gt;Born&lt;/dt&gt;
    &lt;dd&gt;1952&lt;/dd&gt;
    &lt;dt&gt;Birthplace&lt;/dt&gt;
    &lt;dd&gt;Japan&lt;/dd&gt;
    &lt;dt&gt;Color&lt;/dt&gt;
    &lt;dd&gt;Green&lt;/dd&gt;
&lt;/dl&gt;

&lt;hr /&gt;
&lt;p&gt;Tables should have bold headings and alternating shaded rows.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Artist&lt;/th&gt;
&lt;th&gt;Album&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Michael Jackson&lt;/td&gt;
&lt;td&gt;Thriller&lt;/td&gt;
&lt;td&gt;1982&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prince&lt;/td&gt;
&lt;td&gt;Purple Rain&lt;/td&gt;
&lt;td&gt;1984&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Beastie Boys&lt;/td&gt;
&lt;td&gt;License to Ill&lt;/td&gt;
&lt;td&gt;1986&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If a table is too wide, it should condense down and/or scroll horizontally.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Artist&lt;/th&gt;
&lt;th&gt;Album&lt;/th&gt;
&lt;th&gt;Year&lt;/th&gt;
&lt;th&gt;Label&lt;/th&gt;
&lt;th&gt;Awards&lt;/th&gt;
&lt;th&gt;Songs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Michael Jackson&lt;/td&gt;
&lt;td&gt;Thriller&lt;/td&gt;
&lt;td&gt;1982&lt;/td&gt;
&lt;td&gt;Epic Records&lt;/td&gt;
&lt;td&gt;Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R&amp;amp;B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical&lt;/td&gt;
&lt;td&gt;Wanna Be Startin' Somethin', Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Prince&lt;/td&gt;
&lt;td&gt;Purple Rain&lt;/td&gt;
&lt;td&gt;1984&lt;/td&gt;
&lt;td&gt;Warner Brothers Records&lt;/td&gt;
&lt;td&gt;Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R&amp;amp;B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal&lt;/td&gt;
&lt;td&gt;Let's Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I'm a Star, Purple Rain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Beastie Boys&lt;/td&gt;
&lt;td&gt;License to Ill&lt;/td&gt;
&lt;td&gt;1986&lt;/td&gt;
&lt;td&gt;Mercury Records&lt;/td&gt;
&lt;td&gt;noawardsbutthistablecelliswide&lt;/td&gt;
&lt;td&gt;Rhymin &amp;amp; Stealin, The New Style, She's Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Code snippets like &lt;code&gt;var foo = "bar"&lt;/code&gt; can be shown inline.&lt;/p&gt;
&lt;p&gt;Also, &lt;code&gt;this should vertically align&lt;/code&gt; &lt;del&gt;&lt;code&gt;with this&lt;/code&gt;&lt;/del&gt; &lt;del&gt;and this&lt;/del&gt;.&lt;/p&gt;
&lt;p&gt;Code can also be shown in a block element.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var foo = &amp;quot;bar&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code can also use syntax highlighting.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;var foo = &amp;quot;bar&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inline code inside table cells should still be distinguishable.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Javascript&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var foo = "bar"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;&lt;code&gt;foo = "bar"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;Small images should be shown at their actual size.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.placecage.com/gif/300/500" /&gt;&lt;/p&gt;
&lt;p&gt;Large images should always scale down and fit in the content container.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://placekitten.com/g/1200/800/" /&gt;&lt;/p&gt;
&lt;p&gt;This is the final element on the page and there should be no margin below this.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/gfm-test</guid><pubDate>Sun, 19 Nov 2017 00:00:00 -0700</pubDate></item><item><title>So You Want To Learn Vim</title><link>https://zacanger.com/blog/posts/so-you-want-to-learn-vim</link><description>&lt;h2 id="why-read-this"&gt;Why Read This?&lt;/h2&gt;
&lt;p&gt;Why am I qualified to talk about this? There are &lt;em&gt;so many&lt;/em&gt; Intro To Vim
posts/articles/whatever out there, so why should you read this one?&lt;/p&gt;
&lt;p&gt;This isn't going to be a Vim tutorial. It's more of a guide to guides and a
short overview of resources.&lt;/p&gt;
&lt;p&gt;I've been using Vim full-time for around two years now, and used a lot of other
editors before Vim. It took me a while to figure out what I wanted in an editor,
and when I did figure it out it turned out Vim was what I needed. I'm not a Vim
expert, but I'm solid enough with it that I can be much more productive in Vim
than in any other editor. I'm writing this post in Vim because it's far more
comfortable for me now than some other thing with buttons and menus and pointing
and clicking and all that. Vim fits really nicely into the environment and
workflow I already had (entirely terminal-based).&lt;/p&gt;
&lt;h2 id="do-you-really-want-to-learn-vim"&gt;Do You Really Want To Learn Vim?&lt;/h2&gt;
&lt;p&gt;Are you sure? Why do you want to learn Vim? Is it because someone told you your
editor isn't a &lt;em&gt;real&lt;/em&gt; editor and &lt;em&gt;real&lt;/em&gt; programmers use Vim (or Emacs)? That's
bullshit. Real programmers use whatever tools help them be productive. If you're
already good with your editor, and it suits your needs, stick with it. You
should learn Vim if you're not happy with what you're using now. It doesn't
matter if you use Atom or Emacs or Eclipse or whatever. If you know your editor
well and can get stuff done in it, don't switch editors just because someone
said you should. Learn Vim if you're tired of how resource-heavy Atom is, or you
spend a lot of time sshed into servers, or you just haven't found something that
felt &lt;em&gt;right&lt;/em&gt; yet.&lt;/p&gt;
&lt;p&gt;That being said, I love Vim, and if you want to learn it, and have the time to
get moving with it, I think you should. I've used loads of editors in the past
(Nano, Notepad++, Kilo/OpenEmacs, Hipper, Atom, LightTable, WebStorm, Visual
Studio, VS Code, TextAdept, Sublime Text, and probably others). They all have
their good parts and their bad parts. So does Vim, but for me the good far
outweighs the bad with Vim (and most of the bad is Vimscript, which is kind of
really rough).&lt;/p&gt;
&lt;h2 id="where-you-should-start"&gt;Where You Should Start&lt;/h2&gt;
&lt;p&gt;There are &lt;em&gt;loads&lt;/em&gt; of resources for learning Vim out there. A lot of them take
the form of games and such. Ignore all those. They'll only teach you the basics,
usually just of navigation and maybe two modes. They won't help you &lt;em&gt;understand&lt;/em&gt;
Vim, they'll just teach you enough to be able to open it, enter text, move
around, and quit. If that's all you need in an editor, switch to Notepad or
Nano. Learning how to move and enter text is important, but it's also important
to know why things are the way they are in Vim.&lt;/p&gt;
&lt;h2 id="vimtutor"&gt;Vimtutor&lt;/h2&gt;
&lt;p&gt;Start with &lt;code&gt;vimtutor&lt;/code&gt;. If you're on Linux, BSD, or Mac, you probably already
have it installed. Just type &lt;code&gt;vimtutor&lt;/code&gt; in a terminal, and do the whole thing.
You don't have to do it all at once, and you don't have to do it &lt;em&gt;only&lt;/em&gt; once. I
think I've gone through it two or three times, and the first time took me three
days, doing just a bit at a time.&lt;/p&gt;
&lt;p&gt;If you're on Windows, you'll need to install Vim manually, and then you should
have Vim available under &lt;code&gt;%ProgramFiles%\vim\vim[version]\vimtutor.bat&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="reading"&gt;Reading&lt;/h2&gt;
&lt;p&gt;Then read
&lt;a href="https://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118"&gt;this&lt;/a&gt;.
It explains a lot about how to &lt;em&gt;think&lt;/em&gt; about using Vim.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.moolenaar.net/habits.html"&gt;This bit&lt;/a&gt;, from the guy who wrote Vim
originally, is also worth a read.&lt;/p&gt;
&lt;p&gt;Then go &lt;a href="https://github.com/mhinz/vim-galore"&gt;read this&lt;/a&gt;. There's a &lt;em&gt;lot&lt;/em&gt; of
information there. You don't need to remember it all, but it's a handy
reference.&lt;/p&gt;
&lt;p&gt;If you get stuck at any point, use the built-in help (with &lt;code&gt;:h thing&lt;/code&gt;, like &lt;code&gt;:h
reg&lt;/code&gt;). The help in Vim is &lt;em&gt;great&lt;/em&gt;, probably better than any other editor's. You
should get in the habit of checking the help before Googling something, because
the help is probably more accurate, and is also closer at hand.&lt;/p&gt;
&lt;h2 id="which-vim"&gt;Which Vim?&lt;/h2&gt;
&lt;p&gt;Most OSs will come with some version of Vim already installed (the exception
being Windows). Chances are it's a stripped-down and/or old version, though. I
use and highly recommend &lt;a href="https://github.com/neovim/neovim/"&gt;Neovim&lt;/a&gt;, but if
that's not available or up to date for your system, make sure you're on Vim 8.
Vim 7.x is pretty old, and missing a lot of the nice things that are in Neovim
and now in Vim 8.&lt;/p&gt;
&lt;p&gt;There are graphical versions of Vim &amp;mdash; Gvim, MacVim, GUI wrappers for
Neovim, etc. You can use those if you want, there's nothing wrong with them. I
don't see the point in them personally, because they don't add anything except
some menus and buttons which all do things you can just do in Vim or in the
shell anyway, but some people really like them. Use the thing that makes you
comfortable.&lt;/p&gt;
&lt;h2 id="other-editors"&gt;Other Editors&lt;/h2&gt;
&lt;p&gt;You can also get started in some other editor. Every good editor has a Vim
plugin, and I actually recommend starting this way if you're not comfortable
switching all at once. I used Vim plugins in LightTable, Atom, and TextAdept for
a few months before actually making the switch, and it made things a bit easier.
You will hit limits with those plugins, though: most of them don't have any &lt;code&gt;ex&lt;/code&gt;
command support (all the things that start with &lt;code&gt;:&lt;/code&gt;), and some of them (like VS
Code's) are &lt;em&gt;really&lt;/em&gt; basic.&lt;/p&gt;
&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;
&lt;p&gt;It's really easy to get lost in configuration, for any editor (or any tool, I
guess). Vim is just as bad as the rest. Some people, myself included, spend way
too much time tweaking their configs. I don't recommend starting with someone
else's configs, though. They'll have opinions that don't align with yours, and
their &lt;code&gt;.vimrc&lt;/code&gt; will be built for how &lt;em&gt;they&lt;/em&gt; do things not how &lt;em&gt;you&lt;/em&gt; do. I &lt;em&gt;do&lt;/em&gt;
recommend cruising GitHub and looking at people's dotfiles for ideas, but don't
go with some preconfigured setup that you don't understand.&lt;/p&gt;
&lt;p&gt;I use this &lt;a href="https://github.com/zacanger/z/blob/master/.vimrc"&gt;very minimal
vimrc&lt;/a&gt; sometimes, when I need
to, and here's my (kinda messy)
&lt;a href="https://github.com/zacanger/z/blob/master/.config/nvim/init.vim"&gt;init.vim&lt;/a&gt; for
Neovim.&lt;/p&gt;
&lt;p&gt;You will need a plugin manager, eventually. I use NeoBundle, which I think is
Neovim-specific. I hear really good things about Vundle for Vim. Pathogen and
Dein are also out there, but I haven't tried either of them.&lt;/p&gt;
&lt;h2 id="other-stuff"&gt;Other Stuff&lt;/h2&gt;
&lt;p&gt;You might end up on systems that don't have Vim (like in containers). They will
probably have &lt;code&gt;vi&lt;/code&gt;, though. A lot of the stuff you're used to doing in Vim might
not work in vi, but some of it will. You should read up a little bit on
&lt;a href="http://wiki.c2.com/?ViEditor"&gt;vi&lt;/a&gt; just in case. Also read the bit on how to
pronounce it, because people will be confused if you say &lt;code&gt;veye&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Read &lt;a href="https://sanctum.geek.nz/arabesque/vim-koans"&gt;this post&lt;/a&gt; (and everything
else on that blog). Seriously. Even to an intermediate user, there's a lot of
good stuff to be learned.&lt;/p&gt;
&lt;p&gt;Don't get discouraged. It took me a few weeks to get fully comfortable using a
Vim plugin in other editors, and then another few weeks after I switched
full-time to Vim before I felt like I was productive again. It's like learning
any other big new thing (a language, framework, paradigm, whatever): it takes
time. For me (and for all Vim users, I assume), that time investment has
definitely been worth it.&lt;/p&gt;
&lt;h2 id="continuing-education"&gt;Continuing Education&lt;/h2&gt;
&lt;p&gt;I make an effort to learn and practice one new thing a day (not Vim-specific; a
piece of Clojure's stdlib, Bash trick, whatever). Once you're comfortable using
Vim, I recommend doing the same. For example, take a few minutes to check out
what you can do with &lt;code&gt;c&lt;/code&gt; and try to use &lt;code&gt;c&lt;/code&gt; more than usual for a few days,
until you reach for it naturally when it makes sense.&lt;/p&gt;
&lt;p&gt;There are Vim Golf sites (and a StackExchange thing, I think). These are fun
ways to learn more efficient ways to get stuff done in Vim.&lt;/p&gt;
&lt;p&gt;Don't feel pressured to use more advanced features right away. Neat things like
macros, advanced register usage, and fancy regex stuff are all very useful, but
you don't need to know and use everything all at once. When you find yourself
doing something repetitive or annoying, that's a good time to find a better way
to do it.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/so-you-want-to-learn-vim</guid><pubDate>Thu, 27 Jul 2017 00:00:00 -0700</pubDate></item><item><title>a short rant about languages and people</title><link>https://zacanger.com/blog/posts/short-rant-on-languages</link><description>&lt;p&gt;I wrote this on Mastodon but decided to cross-post for whatever reason.
One of my biggest pet peeves is when people talk about how great foo-lang is
as an alernative to bar-lang, &amp;amp; it turns out they're just shit at bar-lang, or
write deliberately bad bar-lang in examples to try to make foo-lang look
better. Don't do that. If you can't write decent, idiomatic bar-lang, you
don't get to hate it yet. If you &lt;em&gt;can&lt;/em&gt; and are writing it like someone who's
never read a tutorial on it intentionally, you're just making foo-lang's
community look like assholes.  Chances are foo-lang is pretty great, &amp;amp; can
stand up on its own merits. Talk about those, not how bad your half-assed
bar-lang is in comparison. I see this a lot with functional languages that
compile to JS, especially, &amp;amp; it's sad, because most of those languages are
actually really neat &amp;amp; there are a lot of good reasons to try them, but people
saying 'look how horrible this JS is compared to this other thing' when the JS
looks like it was written by someone who skimmed a jQuery tutorial once
&lt;em&gt;really&lt;/em&gt; doesn't present the community very well. So don't do that.&lt;/p&gt;
&lt;p&gt;Also: a fun vim/Twitter trick (I also cross-posted this to Twitter): &lt;code&gt;:set
textwidth=140&lt;/code&gt;, then &lt;code&gt;gq&lt;/code&gt;. You're welcome.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/short-rant-on-languages</guid><pubDate>Fri, 19 May 2017 00:00:00 -0700</pubDate></item><item><title>WTF is Set?</title><link>https://zacanger.com/blog/posts/wtf-is-set</link><description>&lt;p&gt;So, someone asked in a Slack channel how they might clean up the following
code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-JavaScript"&gt;getNames (contacts) {
  let contacts_set = []

  contacts.forEach((contact) =&amp;gt; {
    let firstName = get(contact, 'contactInfo.firstName')
    let lastName  = get(contact, 'contactInfo.lastName')
    let fullName = `${firstName} ${lastName}`

    if (contacts_set.includes(fullName)) {
      return
    } else {
      contacts_set.push(fullName)
    }

    set(this, 'contactsSet', contactsSet)
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; going on here seemed to be Ember-specific. I
don't know Ember so don't ask me.&lt;/p&gt;
&lt;p&gt;And I said, how about this?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-JavaScript"&gt;getNames: (contacts) =&amp;gt;
  [...new Set(
    contacts.map(({ contactInfo: { firstName, lastName }}) =&amp;gt;
      `${firstName} ${lastName}`))]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like this version because it's very concise and still readable (to me).
It also doesn't do mutation-y stuff, which is a good thing.&lt;/p&gt;
&lt;p&gt;And then someone else asked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can some one eli5 what &lt;code&gt;Set&lt;/code&gt; is that's referenced above?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which made me realise that a lot of folks still aren't using a lot of the nice
new things from ES2015, so I explained a bit. Here's how I understand it.&lt;/p&gt;
&lt;p&gt;Set is a new (in ES2015) iterable builtin (like Array, String, TypedArray).
Map is also new in 2015. Set is to Array as Map is to Object, kinda.&lt;/p&gt;
&lt;p&gt;For practical usage Set is basically Array but unique, and with different
methods. &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;has&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, and some others. There's a lot more
info &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;on
MDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can pass &lt;code&gt;Set&lt;/code&gt; an iterable, which is why the thing I have above works
(because thing inside &lt;code&gt;new Set()&lt;/code&gt; results in an array).&lt;/p&gt;
&lt;p&gt;In that case &lt;code&gt;Set&lt;/code&gt; isn't being used for too much besides just the fact that
it's &lt;code&gt;Set&lt;/code&gt; (so it only holds unique values). Someone else pointed out in the
same channel that maybe it's not the best idea if you have a lot of values,
because then you're creating another thing, which is totally true.&lt;/p&gt;
&lt;p&gt;There's a bit more background
&lt;a href="https://en.wikipedia.org/wiki/Set_(mathematics)"&gt;here&lt;/a&gt; on what JS's &lt;code&gt;Set&lt;/code&gt; is
suppose to be kind of like.&lt;/p&gt;
&lt;p&gt;And underneath it sorta looks vaguely like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-JavaScript"&gt;class Set {
  constructor () {
    this.storage = []
  }
  add (a) {
    if (!this.storage.includes(a)) {
      this.storage.push(a)
    }
  }
  has (a) {
    return this.storage.includes(a)
  }
  remove (a) {
    this.storage.splice(this.storage.indexOf(a), 1)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's a lot of stuff, but mostly you can think of &lt;code&gt;Set&lt;/code&gt; as a thing that's
like &lt;code&gt;Array&lt;/code&gt; but it only holds unique things.&lt;/p&gt;
&lt;p&gt;There's also a &lt;code&gt;WeakSet&lt;/code&gt; which can only hold objects. I haven't really found a
valid use case for &lt;code&gt;WeakSet&lt;/code&gt; and &lt;code&gt;WeakMap&lt;/code&gt; yet, personally.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Set&lt;/code&gt; turns out to be pretty useful. I've used it a few times at work (with
appropriate polyfills) without any problems, and I use it in a few places in
&lt;a href="https://github.com/zacanger/zeelib"&gt;zeelib&lt;/a&gt;, my sort-of-sometimes-popular
utility library. Definitely play around with it!&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/wtf-is-set</guid><pubDate>Tue, 25 Apr 2017 00:00:00 -0700</pubDate></item><item><title>Recommendations For New Web Devs</title><link>https://zacanger.com/blog/posts/recommendations-for-new-web-devs</link><description>&lt;p&gt;Some of these thoughts probably apply to all developers. Some don't.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learn an editor. It doesn't matter which editor. Just learn one. Be good at
   it. I don't care if you use Visual Studio or Emacs or whatever. Be really
   good at the thing you pick, though.&lt;/li&gt;
&lt;li&gt;Learn enough &lt;code&gt;vi&lt;/code&gt; to get by. You &lt;em&gt;will&lt;/em&gt; need to know it, at some point. At
   the very least, learn how to enter text, move around, save, quit, and quit
   without saving.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;jq&lt;/code&gt; (build it from source if you want the newest hotness; otherwise
   install it with your package manager). Don't install the &lt;code&gt;jq&lt;/code&gt; clones written
   in other languages (not C) &amp;mdash; most of them are slow and/or only
   half-finished.&lt;/li&gt;
&lt;li&gt;Get comfortable with Bash. You don't have to be great with it, just know
   enough to get by. It doesn't matter what shell you actually use (Zsh, Ksh,
   Bash, Sh, Dash, Ash, PowerShell &amp;mdash; I don't care, whatever). If you're
   writing stuff that's going to be run by other people, ever, write it in Bash.
   If you're writing stuff that may or may not be run on a server, write it in
   POSIX-compliant &lt;code&gt;sh&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Spend some time on Twitter. Facebook is for finding out how your
   middle-school best friend's back surgery went. LinkedIn is for collecting
   recruiter spam just in case. Twitter is for following people who say things
   that matter, so get on Twitter.&lt;/li&gt;
&lt;li&gt;No one cares if you can't afford a Mac. Macs aren't great computers, they're
   okay computers that are very expensive. If you can't afford a Mac, try Linux
   (I recommend Debian with the XFCE desktop environment, but try other things
   too if you want!). If you don't have time for that, Windows is also okay
   (just remember to tell your editor and Git to use UNIX-style line-endings).&lt;/li&gt;
&lt;li&gt;Don't work (for your employer) on the weekends. Work on side projects, if you
   want. Or do other things. Go out to brunch. Climb a mountain. Learn a Primus
   song on bass. Get drunk. Just don't work for the person who pays you to work
   during the week. If they seem to expect you to be working when you're not at
   work, start looking for another job.&lt;/li&gt;
&lt;li&gt;Learn other languages. HTML and CSS are not programming languages, so they
   don't count. JS is actually a really great language (so don't take shit from
   Java or C# developers who bitch about it!), but it's only one language. Learn
   another language that helps you think about what you do in a different way.
   Scheme (specifically, Racket) is a really nice one to start with. Haskell is
   interesting (or some other ML-type language, like OCaml or Purescript). C is
   also really useful to know, even if you only ever learn enough to write a
   basic shell or something.&lt;/li&gt;
&lt;li&gt;Figure out your own method for managing tasks. Chances are, you'll work for
   more than one company over the next few years. Your employer might be really
   into Jira, or Trello, or whatever, or they might change their mind four times
   a year, but either way, getting heavily invested in one tool is not a great
   idea. Use their thing, but also figure out what works for you. I keep track
   of tasks for work in plain Markdown files, and I use
   &lt;a href="http://npm.im/lilnote"&gt;lilnote&lt;/a&gt; for personal tasks. Just find a thing you
   like and stick with it.&lt;/li&gt;
&lt;li&gt;Make time for personal development. Including on the clock. If your employer
   doesn't like that you spend a half hour every morning catching up on what new
   flags Chromium shipped, or competing on Codewars, or whatever other technical
   thing happens to really interest you but might also benefit your company,
   start looking for another job.&lt;/li&gt;
&lt;/ol&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/recommendations-for-new-web-devs</guid><pubDate>Sun, 26 Mar 2017 00:00:00 -0700</pubDate></item><item><title>PropTypes for Classnames</title><link>https://zacanger.com/blog/posts/proptypes-for-classnames</link><description>&lt;p&gt;The &lt;a href="https://npmjs.com/package/classnames"&gt;classnames&lt;/a&gt; library is nice.
It lets you do stuff like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;import cn from 'classnames'
import styles from './styles.css'

const Thing = ({ foo }) =&amp;gt;
  &amp;lt;Stuff className={cn(styles.thing, { [styles.foo]: foo !== 2 })} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And a whole bunch of other stuff, and it just works. If you write your CSS
in CSS, you should check it out.&lt;/p&gt;
&lt;p&gt;There is one sort of pain point with it, though. If you have components that
can take anything that's &lt;code&gt;classnames&lt;/code&gt;-compatible, PropTypes get a little annoying.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;Stuff.propTypes = { className: string.isRequired }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This doesn't work, because you're passing all sorts of stuff in, possibly.&lt;/p&gt;
&lt;p&gt;A solution is to make your own custom PropTypes. You don't even need to
get into fancy stuff involving validation, just combine a bunch of other
PropTypes into your own.&lt;/p&gt;
&lt;p&gt;Let's say you have a &lt;code&gt;propTypes.js&lt;/code&gt; file somewhere where you define custom
PropTypes.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;import { PropTypes } from 'react'

export const classname = PropTypes.oneOfType([
  PropTypes.object,
  PropTypes.string,
  PropTypes.arrayOf(
    PropTypes.oneOfType([
      PropTypes.array,
      PropTypes.bool,
      PropTypes.object,
      PropTypes.string
    ])
  )
])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's all you need! Then you can do:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;import { classname } from './propTypes'
import cn from 'classnames'

const Stuff = ({ className }) =&amp;gt;
  &amp;lt;span className={cn(className)}&amp;gt;

Stuff.propTypes = {
  className: classname // this is your custom thing
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should solve all PropTypes warnings and let you throw anything the
&lt;code&gt;classnames&lt;/code&gt; library can handle at your components.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Edit 10th January, 2018:&lt;/p&gt;
&lt;p&gt;Bonus: a Flow type for this library (TypeScript should be similar):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;// @flow

type classes =
  | { [className: string]: * }
  | string
  | false
  | void
  | null

type classnames = (...args: Array&amp;lt;classes | classes[]&amp;gt;) =&amp;gt; string
&lt;/code&gt;&lt;/pre&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/proptypes-for-classnames</guid><pubDate>Sat, 11 Feb 2017 00:00:00 -0700</pubDate></item><item><title>Category Theory Notes</title><link>https://zacanger.com/blog/posts/category-theory-for-js-devs</link><description>&lt;h1 id="category-theory-for-js-devs"&gt;Category Theory for JS Devs&lt;/h1&gt;
&lt;p&gt;Notes taken while watching &lt;a href="https://www.youtube.com/playlist?list=PLwuUlC2HlHGe7vmItFmrdBLn6p0AS8ALX"&gt;this
series&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="contracts"&gt;Contracts&lt;/h2&gt;
&lt;p&gt;Basics of type checking.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const str = a =&amp;gt; {
  if (typeof a !== 'string') throw new TypeError('Expected a string')
  else return a
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="guarded-functions-and-categories"&gt;Guarded Functions and Categories&lt;/h2&gt;
&lt;p&gt;Functions that have contracts on input or output are called &lt;em&gt;guarded&lt;/em&gt;
functions.&lt;/p&gt;
&lt;p&gt;An &lt;em&gt;any&lt;/em&gt; function might just look like an identity function (&lt;code&gt;const any = a =&amp;gt;
a&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Maps between categories are functors.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;objects&lt;/em&gt; of categories are the &lt;em&gt;contracts&lt;/em&gt;. &lt;em&gt;Morphisms&lt;/em&gt; are the (guarded)
functions.&lt;/p&gt;
&lt;p&gt;Function that returns a contract:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const typeOf = type =&amp;gt; a =&amp;gt; {
  if (typeof a !== `${type}`) throw new TypeError(`Expected ${type}!`)
  else return a
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And basic usage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const bool = typeOf('boolean')
const num  = typeOf('number')
// etc.
// Obviously, for arrays you'd need to use Array.isArray()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we could do something like&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const increment = a =&amp;gt; {
  a = num(a)
  return a + 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before I go further I should mention that yes, I have heard of Flow and
TypeScript.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const increment = (a: number) =&amp;gt; a + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I assume this video series will get to actual type systems at some point,
though it was made before TypeScript and Flow were written, so it won't be
mentioning those.&lt;/p&gt;
&lt;h2 id="array-contracts"&gt;Array Contracts&lt;/h2&gt;
&lt;p&gt;Not using &lt;code&gt;isArray&lt;/code&gt; or &lt;code&gt;instance of&lt;/code&gt;. Using &lt;code&gt;toString&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const arr = a =&amp;gt; {
  if ({}.toString.call(a) !== '[object Array]') throw TypeError('Expected array!')
  else return a
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same thing could be done for &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;RegExp&lt;/code&gt;, etc.&lt;/p&gt;
&lt;h2 id="functors"&gt;Functors&lt;/h2&gt;
&lt;p&gt;Takes a maps the contract over the things array. Will throw if they're not all
correct. Ensure that your array is, for example, all Strings, or whatever.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const arrayOf = contract =&amp;gt; things =&amp;gt; arr(things).map(c)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This acts on the category's &lt;em&gt;objects&lt;/em&gt; and &lt;em&gt;morphisms&lt;/em&gt; both, and produces new
objects and new morphisms.&lt;/p&gt;
&lt;h2 id="maybe"&gt;Maybe&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;Maybe&lt;/em&gt; functor.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Maybe&lt;/code&gt; is a Monad, but I guess we're only thinking of its Functor-ness for
this video?&lt;/p&gt;
&lt;p&gt;Anyway here's some code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const Maybe = () =&amp;gt; {}
Maybe.prototype.getOrElse = function (a) {
  if (this instanceof Some) return this.a
  else return a
}
// the above: maybe something getOrElse what to do if none

const None = () =&amp;gt; {}
None.prototype = Object.create(Maybe.prototype) // all instances of None are an instance of Maybe
None.prototype.toString = () =&amp;gt; 'None'
const none = new None()

const Some = function (a) { this.a = a }
Some.prototype = Object.create(Maybe.prototype)
Some.prototype.toString = function () { return `Some(thisa)` }
const some = a =&amp;gt; new Some(a)

const maybe = c =&amp;gt; m =&amp;gt; {
  if (m instanceof None) return m
  else if (m instance of Some) return some((m.a))
  else throw new TypeError('Expected None or Some a!')
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="unit-and-flatten"&gt;Unit and Flatten&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const arrayOfUnit = contract =&amp;gt; (
  a =&amp;gt; {
    a = contract(a)
    return arrayOf(contract)([a])
  }
)

const maybeUnit = contract =&amp;gt; (
  a =&amp;gt; {
    a = contract(a)
    return maybe(contract)(some(a))
  }
)

const arrayOfFlatten = c =&amp;gt; (
  a =&amp;gt; {
    a = arrayOf(arrayOf(c))(a)
    const r = []
    const l = a.length
    for (let i = 0; i &amp;lt; l; ++i) {
      r = r.concat(a[i]) // ew wtf is this guy doing?
    }
  }
)

const maybeFlatten = c =&amp;gt; (
  a =&amp;gt; {
    a = maybe(maybe(c))(a)
    if (a instanceof Some) {
      a = a.x
    } else if (a instanceof None) {
      a = a // why? if it's not Some, it _must_ be None.
    }
    return maybe(c)(a)
  }
)

// oh god what is even happening right now
Array.unit = a =&amp;gt; [a]
Maybe.unit = some
Array.prototype.flatten = function (c = any) { return arrayOfFlatten(c)(this) }
// he literally has if (c === void 0) c = any
// but this isn't the 90s so

// apply given functor twice to a contract
const twice = f =&amp;gt; c =&amp;gt; f(f(c)
const once = f =&amp;gt; f // what the actual fuck, this is id..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Okay, I'm done, I tried. there are like 20 more videos in this series but it's
so badly done and there are so many mistakes and the guy talks so slowly that
I just can't do this anymore.&lt;/p&gt;
&lt;p&gt;If anyone knows of a decent intro to category theory for JS devs, please let
me know.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/category-theory-for-js-devs</guid><pubDate>Sat, 26 Nov 2016 00:00:00 -0700</pubDate></item><item><title>Advice For New Devs</title><link>https://zacanger.com/blog/posts/advice-for-new-devs</link><description>&lt;p&gt;So, I went to one of those code bootcamps. I started there just over a year ago,
and when I finished the course I worked there as a mentor for a cohort (three
months). Immediately after that, I got what I think is a pretty swell job doing
development full time, working mostly in technologies that I really like.&lt;/p&gt;
&lt;p&gt;It's hard to find non-success stories from bootcamps, since generally the people
who go to these things are people who are really determined to do very well. You
don't go and pay $10k-$20k to lock yourself up in a building with a bunch of
other nerds for twelve or moure hours every day for three months straight unless
you really want to get something out of it. I think I'm a good example of
someone who did really well through a bootcamp, though, and the reason I did so
well comes down to really just one thing, which I think everyone going into
computing (whether it's web development, databases, hardware, whatever) really
should be aware of.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;KNOW COMPUTERS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That seems really obvious, right? But as a mentor it was amazing to me how many
people would come into a course that's just about making things happen with
computers, not knowing a lot of the basics of how to &lt;em&gt;use&lt;/em&gt; a computer, and
knowing virtually nothing about how computers actually &lt;em&gt;work&lt;/em&gt;. They're not just
a thing with a keyboard and a screen and a logo on the back. They're not just a
status symbol, though Mac users would like you to think they are. They're not
magical, and it's important to know what they do and how they do it, at least in
vague terms.&lt;/p&gt;
&lt;p&gt;No junior web dev should really be expected to be familiar with what a page
cache is, or maybe even how domain names are resolved, but you should at least
know what a kernel is, what userland actually means, what the implications of
using your particular filesystem are, what the internet infrastructure kind of
looks like (at least in vague terms), and how to do some basic things that will
save you a lot of time later on (general terminal usage is a good place to
start).&lt;/p&gt;
&lt;p&gt;This is the number one thing that can help you get, and stay, ahead as a student
and junior dev, in my opinion. And it's stuff you'll absolutely &lt;em&gt;have&lt;/em&gt; to know
at some point, and probably mostly won't be taught, so it's a good idea to just
pick up this stuff as early as possible.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/advice-for-new-devs</guid><pubDate>Sat, 12 Nov 2016 00:00:00 -0700</pubDate></item><item><title>shitshow</title><link>https://zacanger.com/blog/posts/shitshow</link><description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: my politics have evolved over the last four years, and I wrote this
while very scared and angry. I'm leaving it here anyway.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This is an elaboration on a tweet from last night.&lt;/p&gt;
&lt;p&gt;I was born male, and I identify as male. That's pretty convenient for me.
I'm white, which is probably very convenient for me.
I make a conscious effort to be aware of my privilege, but I probably fuck up
sometimes. I hope that whenever that happens, someone will call me out on it.&lt;/p&gt;
&lt;p&gt;I was born in Baltimore, and went to a public school that I think was less than
half white. That turned out to be a nice thing, because I never really
understood what the big deal was about skin colour. My parents tell me I
literally didn't understand that some people might think there was a difference
between people with different coloured skin. And why would I? I was a kid,
that's not a thing I should have to know.&lt;/p&gt;
&lt;p&gt;My family moved to southern Pennsylvania when I was 11. South-Central PA is
overwhemingly white, and has a large boomer population. One could easily go
months at a time without seeing a black person, especially if one was
homeschooled (which I was, because the local schools were some of the worst in
the state).&lt;/p&gt;
&lt;p&gt;When I was 19, I was working in the coffee shop in a local grocery store. I had
just voted for the first time. Obama became President. The next morning, I went
to work around 6:30, sold a newspaper to an older guy around 7. He sat down on a
nearby bench and said to me "Can you believe they put a n----- in the White
House?" This wasn't my first time encountering racism, but it was the first time
I realised just how open people in that area were about it.&lt;/p&gt;
&lt;p&gt;I worked at a guitar shop for a while. The guy who owned it was a stereotypical
redneck, something straight out of a Far Side comic. To him, anyone non-white
was nothing but an epithet, women existed to be objectified, and if he got a
hint that someone wasn't straight, they wouldn't be allowed in his shop. Most of
his days were spent smoking pot and looking at pictures of girls on the computer
in his office.&lt;/p&gt;
&lt;p&gt;I moved to Utah about a year ago. I didn't intend to stay here, because Utah is
all of the bad things people say about it. It's also all of the good things
people say about it&amp;mdash;there are mountains and things, and if you're into
that that's pretty nice&amp;mdash;but it's extremely white, extremely Mormon,
extremely dry, and extremely boring. It's a lot of the things I hated about
Pennsylvania, except drier and with Mormons instead of Evangelicals.&lt;/p&gt;
&lt;p&gt;I kind of thought, though, that being out here would be a bit of an escape from
the 'culture' in Pennsylvania. James Carville
&lt;a href="https://en.wikipedia.org/wiki/Pennsyltucky"&gt;described PA&lt;/a&gt; as being Philadelphia
and Pittsburgh with Alabama in between, and that's pretty accurate. Utah's more
like Salt Lake City and then a bunch of nothing mixed with Mormons, which isn't
actually any better. Mormons are a little more laid-back about their racism and
mysogyny, but it's still there. They're just encouraged not to show it off,
because the LDS church doesn't want that public image. It's pretty clear based
on their politics, though.&lt;/p&gt;
&lt;p&gt;This election was not about anything except for hatred. A common statement is
that Trump just 'tells it like it is,' but that's known to be bullshit. He's
been the most dishonest Presidential candidate in the history of fact-checking,
and Clinton has been one of the most factually accurate, ever, period. Straight
talk has nothing to do with anything. There have also been numbers that say that
Trump supports think the economy will do better under Trump, but generally folks
actually worried about the economy will vote Democrat, probably because the
economy tends to do better under Democrats.&lt;/p&gt;
&lt;p&gt;Trump winning the electoral vote last night has nothing to do with policy. It
was a message from the worst kind of people in this country that they want to be
heard and want to be taken seriously. That they're afraid of people who don't
look like them or have the same beliefs as them. People like that old man at the
coffee shop, or various bosses I had in Pennsylvania. People who think they
should have the right to openly discriminate against other people, people who
are so unconcerned with facts that they sound exactly like characters in
Idiocracy (link), calling people 'faggot' for being educated on a topic.&lt;/p&gt;
&lt;p&gt;I'm a cis white male, and I'm sorry that a bunch of cis white males did this to
this country. It's going to be really rough, especially at first when we have a
red house and senate. We, collectively, all the people that have fought for
LGBTQA rights and less discrimination and tried to defend against ignorance and
won Clinton the popular vote, we need to hold on and survive this and support
each other. We need to call each other out on our biases and abuse of
privilege We need to not give up. We need to show each other, the country, and
the world that America is not a country of hate.&lt;/p&gt;
&lt;p&gt;There are folks on Twitter saying that this will be easy, that love and
happiness and just get through it, and that's bullshit. This won't be easy. This
is serious and dangerous and terrifying. This is bad news all around. But let's
try, because we can't all just leave.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/shitshow</guid><pubDate>Wed, 09 Nov 2016 00:00:00 -0700</pubDate></item><item><title>Two Things That Might Be Fun</title><link>https://zacanger.com/blog/posts/two-things-that-might-be-fun</link><description>&lt;p&gt;Two things that I think might be fun to play around with, at some point.&lt;/p&gt;
&lt;p&gt;First: a less intrusive type annotation thing for JS. It'd be similar to ML or
Haskell style annotations, but maybe use Flow as a sort of backend to actually
do the type checking? It could look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;//:: Int -&amp;gt; Int -&amp;gt; [Int]
const putIntsInList = (a, b) =&amp;gt; [ a,  b ]

//::Str -&amp;gt; Str -&amp;gt; Str // or
//::[Char] -&amp;gt; [Char] -&amp;gt; [Char]
const doThingsWithStrings = (a, b) =&amp;gt; `${a} ${b}`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It could use some sort of regexy thing to basically just detect anywhere there's
&lt;code&gt;//::&lt;/code&gt;, see what the next thing is, and see if they go together. I don't know
much about ASTs or type systems, though. I just think that'd be a lot less
in-the-way than how TypeScript and Flow currently work. Also, my syntax
highlighting doesn't know what template strings are, so. That's gross.&lt;/p&gt;
&lt;p&gt;Another thing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;import React, { PropTypes } from 'react'
import AnotherComponent from './AnotherComponent'

const Something = ({ a, b, c }) =&amp;gt; {
  if (!a) return null

  return (
    (div
      (another-component (whatever 'a))
        (not (null? b)
          (span (b))
        (not (null? c)
          (map (p (c)))))))
  // which would be like
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;AnotherComponent whatever={a} /&amp;gt;
      {b &amp;amp;&amp;amp; &amp;lt;span&amp;gt;{b}&amp;lt;/span&amp;gt;}
      {c &amp;amp;&amp;amp; c.length &amp;amp;&amp;amp;
        c.map((a, i) =&amp;gt; &amp;lt;p key={i}&amp;gt;{a}&amp;lt;/p&amp;gt;)
      }
    &amp;lt;/div&amp;gt;
  )
}

export default Something
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This a totally made-up syntax for a thing that doesn't exactly exist, and I
don't know how useful this would actually be, since there are already great
React libraries for ClojureScript out there. Just think it'd be neat to be able
to to JSX in Scheme.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/two-things-that-might-be-fun</guid><pubDate>Thu, 03 Nov 2016 00:00:00 -0700</pubDate></item><item><title>pm tools kill productivity</title><link>https://zacanger.com/blog/posts/pm-tools-kill-productivity</link><description>&lt;p&gt;Project management tools kill productivity. This isn't news. They &lt;em&gt;can&lt;/em&gt; help
other people be more aware of what you're doing, which is generally a good thing
(collaborating on projects, managers keeping track of progress, whatever), but
overdoing it with the tools can be seriously detrimental to actually getting
anything done.&lt;/p&gt;
&lt;p&gt;I was going to write a much longer post about this, but let me just give you a
list of all things I check several times a day (in the case of Slack, several
times an hour), instead.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wrike (a task/project management thing with the worst UI of any like tool on
  the market)&lt;/li&gt;
&lt;li&gt;Trello (not so much anymore, but some people still use it at work, apparently)&lt;/li&gt;
&lt;li&gt;Quip (a weird combination of Trello and Excel)&lt;/li&gt;
&lt;li&gt;Github Issues/PRs (Issues not so much anymore, though that would be the most
  sensible place to keep track of repo-specific todos)&lt;/li&gt;
&lt;li&gt;And of course, Slack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personally I keep track of what I need to do in two places: for personal items,
a JSON file (yes, a JSON file). This means I can use it with my little
&lt;a href="http://npmjs.com/package/lilnote"&gt;command-line note-taking app&lt;/a&gt;, easily work
with it in any language, whatever. For work tasks, I just keep a giant Markdown
file, using GFM-style task lists. I end up copying things over from one or more
of the above tools into Markdown, where I keep track of them for hours or days
or weeks, then as things are fleshed out, completed, nixed, or whatever, going
back to those tools (usually more than one) to update them.&lt;/p&gt;
&lt;p&gt;This is not an efficient workflow. Some of these tools (Quip and Wrike
especially) are so lacking in all the things that make a good project management
app (mainly, simplicity and ease of use) that using them ends up taking more
than half as much time as many of the small tasks.&lt;/p&gt;
&lt;p&gt;The last place I worked, we switched to this thing called Droptask. It was so
bad, such a ridiculously complicated UI mess, that myself and some co-workers
just ended up not using it at all, and relied solely on Slack. Picking a (one,
singular) decent tool really makes a difference. Trello's popular because it's
simple and easy. For devs, same goes for Issues.&lt;/p&gt;
&lt;p&gt;I meant to write a good bit more about this but I probably don't need to.
Everyone complains about using too many tools all the time, especially devs
using businessy tools. And it's late. So.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/pm-tools-kill-productivity</guid><pubDate>Tue, 18 Oct 2016 00:00:00 -0700</pubDate></item><item><title>Thoughts On Learning Functional Programming</title><link>https://zacanger.com/blog/posts/on-learning-fp</link><description>&lt;p&gt;Functional programming is the new hotness these days. It's also the old hotness.
It's just pretty hot, really. Everyone wants to have a more functional codebase,
and that's a good thing. Less side-effecty, easier to hold in your head, etc.;
the benefits of FP have been thoroughly espoused elsewhere. I just have a couple
of things to add about learning functional programming, especially if you're
coming from another paradigm or a mixed-paradigm language (like JS).&lt;/p&gt;
&lt;h2 id="you-probably-dont-need-to-learn-another-language"&gt;You (Probably) Don't Need To Learn Another Language&lt;/h2&gt;
&lt;p&gt;Languages like Haskell are really neat. They'll change the way you think about
writing code. But you don't need to learn a classically functional language to
learn functional programming.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-haskell"&gt;module Main where
import System.Environment

main :: IO ()
main = do
  args &amp;lt;- getArgs
  putStrLn (&amp;quot;Hello &amp;quot; ++ args !! 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If a block of code like that looks pretty foreign, that's okay. &lt;em&gt;You can program
functionally in whatever language is most familiar to you&lt;/em&gt;. Probably. If you're
a C# dev or Rubyist or something, maybe you should look into something a little
less strictly OO, but if you already write JS (for example), you don't need to
go learn about abstract algebra and what stuff like &lt;code&gt;Foo :: [Bar] -&amp;gt; Baz Quux&lt;/code&gt;
means. Which leads into thought number two:&lt;/p&gt;
&lt;h2 id="a-better-type-system-doesnt-make-a-language-functional"&gt;A Better Type System Doesn't Make A Language Functional&lt;/h2&gt;
&lt;p&gt;Yeah, languages like Idris and Haskell and other super mathy things are great
for functional programming, but you don't &lt;em&gt;need&lt;/em&gt; super complex type systems to
program functionally. They're just, y'know, pretty nice. Look at
&lt;a href="https://racket-lang.org/"&gt;Racket&lt;/a&gt;, for example. You can have static typing
(with &lt;code&gt;#lang typed/racket&lt;/code&gt;) but you don't &lt;em&gt;have&lt;/em&gt; to. Similarly, you can program
functionally just fine in plain old JS, and you can write super imperative code
in TypeScript. My point is, type systems don't make a language more functional,
they make a language have a different type system.&lt;/p&gt;
&lt;h2 id="lots-of-languages-have-a-repl"&gt;Lots Of Languages Have A REPL&lt;/h2&gt;
&lt;p&gt;LISP people like to talk about their REPL a lot. Same with Haskell folks,
they'll tell you to go experient in GHCI. That's great, it really is. The REPL,
for any given language, should be one of the primary tools you use to figure
things out. But most languages have one. If you do Python, you're probably
familiar with it. Same with Ruby (irb or pry). Node's REPL, while a little
limited compared to GHCI, is still pretty fantastic. Racket's is very basic, but
if you &lt;code&gt;(require xrepl)&lt;/code&gt; it ends up being very pleasant. Having a decent REPL
isn't a functional language feature, it's just a language ecosystem feature.&lt;/p&gt;
&lt;h2 id="scheme-is-really-nice"&gt;Scheme Is Really Nice&lt;/h2&gt;
&lt;p&gt;I'm not a LISPer. I've just started learning Racket, which I chose because it's
very compact compared to, say, ClojureScript (which also looks fantastic, by the
way). But coming primarily from JavaScript, Scheme (Racket is a Scheme) is a
really good way to get into FP in another language. Haskell, ML, Idris, etc.,
are all awesome languages, but Scheme might be a better way to break into
functional languages for a lot of folks. Give it a shot sometime.&lt;/p&gt;
&lt;h2 id="if-youre-brand-new-to-fp"&gt;If You're Brand New To FP&lt;/h2&gt;
&lt;p&gt;Check out these links.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q"&gt;FunFunFunction&lt;/a&gt; is
  a great YouTube channel with videos that cover the basics of FP in JS.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@cscalfani"&gt;Charles Scalfani&lt;/a&gt; has a series of posts on
  Medium that talk about a lot of the same things.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCKjVLbSDoM-8-eEM7A30igA"&gt;Brian Lonsdorf&lt;/a&gt; has
  a bunch of videos and talks that will convince you that FP is the Right Way.&lt;/li&gt;
&lt;/ul&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/on-learning-fp</guid><pubDate>Sun, 16 Oct 2016 00:00:00 -0700</pubDate></item><item><title>Node CLI 3, Html2text</title><link>https://zacanger.com/blog/posts/cli-apps-part-three</link><description>&lt;p&gt;Okay, ready to build another command-line app in Node?&lt;/p&gt;
&lt;p&gt;If you haven't seen my last two posts, you should check them out, since I'm not
going to cover a lot of the basics again. They're both on writing small cli apps
in Node, with no dependencies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.zacanger.com/2016/a-basic-cli-app-in-node.html"&gt;React component generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.zacanger.com/2016/note-taking-app.html"&gt;JSON Note-taking app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here's the finished product from the latter:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;#!/usr/bin/env node

'use strict'

const { readFileSync , writeFile }  = require('fs')
const log = console.log
const arg = process.argv[2]
const n = './notes.json'
const file = readFileSync(n)
const notes = JSON.parse(file)

const writeTheFile = () =&amp;gt; {
  const taken = JSON.stringify(notes, null, 2)
  writeFile(n, taken, 'utf8', err =&amp;gt; {
    if (err) return log(err)
  })
}

const takeNote = (notes, note) =&amp;gt; {
  notes.push(note)
  writeTheFile()
}

const removeNote = (notes, noteIndex) =&amp;gt; {
  notes.splice(noteIndex -1, 1)
  writeTheFile()
}

const runApp = () =&amp;gt; {
  if (arg) {
    switch (arg) {
      case '-s':
        log(notes)
        break
      case '-r':
        const noteIndex = process.argv[3]
        removeNote(notes, noteIndex)
        break
      default:
        takeNote(notes, arg)
    }
  } else {
    return log('Please pass an argument')
  }
}

if (!module.parent) {
  runApp()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;What we're going to build this time is going to be a little more complex.
We're going to write a program that downloads a website and turns it into
Markdown for easy offline reading. This isn't a new concept, and I actually
use a Python script called &lt;a href="https://github.com/aaronsw/html2text"&gt;html2text&lt;/a&gt;
for this on an almost-daily basis, but just for fun, we'll do something
similar in Node.&lt;/p&gt;
&lt;p&gt;This will also be the first time we'll be working with external modules, which
is really the most exciting and awesome thing about Node.&lt;/p&gt;
&lt;p&gt;Our goal here is to have a small tool we can use like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;./index.js zacanger.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it'll give us back the contents of &lt;code&gt;zacanger.com&lt;/code&gt;, in Markdown, ready to
read in the terminal, pipe to an editor, or whatever.&lt;/p&gt;
&lt;p&gt;First things first: we'll need a project. Make a new directory and get into
it, and &lt;code&gt;npm init&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;mkdir html2txt
cd html2xt
npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;-y&lt;/code&gt; flag just means "don't ask me questions." You can skip that flag and
fill in the info for your &lt;code&gt;package.json&lt;/code&gt; if you'd like, or just go back and
edit it later.&lt;/p&gt;
&lt;p&gt;We're going to be using a couple of things built-in to Node, so we can go
ahead and require them now. We'll need &lt;code&gt;http&lt;/code&gt;'s &lt;code&gt;get&lt;/code&gt; method, and also a way
to work with an argument. If you've done either of my previous tutorials,
you'll already be familiar with Node's &lt;code&gt;process.argv&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const { get } = require('http')
const url = process.argv[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's see if we can't get some HTML, just as a starting point.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;get(url, res =&amp;gt; {
  res.on('data', d =&amp;gt; {
    console.log(d)
  })
  res.on('end', () =&amp;gt; {
    console.log('done')
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try that out with something like &lt;code&gt;node index.js http://google.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You should see something like &lt;code&gt;&amp;lt;Buffer 3c 21 64 6f 63 74 7&lt;/code&gt; (and so on).
&lt;a href="https://nodejs.org/api/buffer.html"&gt;Buffers&lt;/a&gt; are great and all, but that's
pretty useless for actual reading. Try calling &lt;code&gt;toString&lt;/code&gt; on that data and you
should see some actual HTML (&lt;code&gt;console.log(d.toString())&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;(Note: you may see a 301 page here.)&lt;/p&gt;
&lt;p&gt;Awesome! We now have all the functionality of prepending &lt;code&gt;view-source:&lt;/code&gt; to a
URL in the browser. Let's do something with that HTML, since it's probably not
how you prefer to read stuff.&lt;/p&gt;
&lt;p&gt;There are a lot of great modules out there for working with Markdown. For this
post, I've decided to go with a super simple one without a whole lot of
options, &lt;a href="https://www.npmjs.com/package/to-markdown"&gt;to-markdown&lt;/a&gt;. If you're
not super familiar with npm, you're about to learn just about all you need to
know to get started.&lt;/p&gt;
&lt;p&gt;In your terminal, &lt;code&gt;npm i -S to-markdown&lt;/code&gt;. This is a shorthand for the command
&lt;code&gt;npm install --save to-markdown&lt;/code&gt;; most npm commands have shorter versions, and
it can really save you a lot of time if you get used to using them.&lt;/p&gt;
&lt;p&gt;You should see a bunch of stuff happen in the terminal. If you check your
&lt;code&gt;package.json&lt;/code&gt;, you'll now see &lt;code&gt;to-markdown&lt;/code&gt; in there. It should like
something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;something&amp;quot;,
  // probably some other stuff
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;to-markdown&amp;quot;: &amp;quot;^3.0.1&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we'll need to get that into the program. If you're using Babel, you can
use &lt;code&gt;import&lt;/code&gt;, but to keep things simple we'll stick with &lt;code&gt;require&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const toMarkdown = require('to-markdown')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now try running the HTML through this before logging it out.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;// ...
const toMarkdown = require('to-markdown')
// ...
  res.on('data', d =&amp;gt; {
    console.log(toMarkdown(d.toString()))
  })
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run the script again, you should see beautiful, super-readable
Markdown! All done!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Well, mostly. This is nice and all, but there are definitely some things we
can do to make this script a bit better. Firstly, it's annoying to have to
always type &lt;code&gt;http://&lt;/code&gt; before a URL, so maybe we should automatically add that
on.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const url = process.argv[2]
const src = (url.includes('http://') url.includes('https://')) ? url : `http://${url}`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All this extra bit is doing is checking if the passed in argument aleady has a
scheme, and if it doesn't, just sticking on on the beginning. If you're not
familiar with template literals, check out the previous tutorials and the
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;docs on
MDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're not familiar with &lt;code&gt;Array.prototype.includes()&lt;/code&gt;, it's basically a
shorthand for &lt;code&gt;.indexOf(foo !== -1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you change the &lt;code&gt;get&lt;/code&gt; call to use &lt;code&gt;src&lt;/code&gt; instead of &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And, as in the previous tutorials, we'll want to just be able to execute this
script, without needing to type in &lt;code&gt;node&lt;/code&gt; each time, so add a shebang and make
it exectuable.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;chmod +x index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;#!/usr/bin/env node

const { get } = require('http')
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should be able to just do something like &lt;code&gt;./index.js zacanger.com&lt;/code&gt; and
see some results.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;to-markdown&lt;/code&gt; can handle take some options. One of them is to use
&lt;a href="https://help.github.com/categories/writing-on-github"&gt;GitHub-Flavored
Markdown&lt;/a&gt;, which is
pretty nice since that's probably what most of us are used to using. To enable
this, just pass &lt;code&gt;{ gfm: true }&lt;/code&gt; in the call to &lt;code&gt;toMarkdown&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;// ...
console.log(toMarkdown(d.toString(), { gfm: true }))
// ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may notice some tags are making it through the conversion (&lt;code&gt;script&lt;/code&gt;,
&lt;code&gt;span&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, and probably a few others); I'm not going to go over all of the
options that &lt;code&gt;to-markdown&lt;/code&gt; can take, but you should check out the docs and
learn how to write filters, if you're interested. You could also write your
own function to strip out unwanted elements, and run the Markdown through
this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const cleanOutStuff = string =&amp;gt;
  string.replace(/(div|script|span)/g, '')

console.log(cleanOutStuff(toMarkdown(d.toString(), { gfm: true })))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But it'd probably be easier to just learn the options rather that spinning
something custom like this.&lt;/p&gt;
&lt;p&gt;One thing that really irks me when I'm reading in the terminal is text that
doesn't wrap. Sometimes I'm on a very large screen, and it can get difficult
to keep track of where I am when the text is too wide. 80 characters is a
pretty reasonable limit, so why don't we get this text to wrap there? We're
going to use another module for this:
&lt;a href="https://github.com/substack/node-wordwrap"&gt;wordwrap&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;npm i -S wordwrap
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const wordwrap = require('wordwrap')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This module needs to know how many characters it can put in a line. We could
just pass it &lt;code&gt;80&lt;/code&gt;, but I think maybe we should handle cases where the terminal
is resized very small but maybe won't stay that way, so we're going to find
out how big the terminal currently is and base our decision on that.
&lt;code&gt;process.stdout&lt;/code&gt; has a way for us to find this out.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const wordwrap = require('wordwrap')
const { rows } = process.stdout
const wraplength = (rows &amp;lt; 80 ? 80 : rows)
const wrapper = wordwrap(wraplength)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All we're doing here is wrapping to either the width of the terminal or 80
characters, whichever happens to be greater.&lt;/p&gt;
&lt;p&gt;Now we can use that &lt;code&gt;wrapper&lt;/code&gt; when we log out the results.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;console.log(wrapper(toMarkdown(d.toString(), { gfm: true })))
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;So, awesome! Your script should now do just about everything you want it to
do. There's really only one big thing left to do: make it less ugly. That
&lt;code&gt;console.log&lt;/code&gt; is really getting gross, don't you think? I like to handle this
by just defining a bunch of functions I can throw together, so I don't have to
have all this junk cluttering up my space.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const opts = { gfm: true }
const convert = a =&amp;gt; toMarkdown(a, opts)
const wrap = a =&amp;gt; wrapper(a)
const log = a =&amp;gt; console.log(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I'm using &lt;code&gt;a&lt;/code&gt; as a parameter here. You can use something more descriptive if
you'd like, it really doesn't matter.&lt;/p&gt;
&lt;p&gt;And I think we should also just wait until we have all the data before logging
anything, so let's adjust our HTTP call (and stick it in a function):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const main = arg =&amp;gt; get(arg, res =&amp;gt; {
  let b = '' // `b` for `body`
  res.on('data', d =&amp;gt; b += d.toString)
  res.on('end', () =&amp;gt; log(wrap(convert(b))))
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your linter might yell at you saying you can't return assignment. It's
probably right, but nothing's going to break. If you're concerned about it,
just wrap that &lt;code&gt;b += d.toString()&lt;/code&gt; in some braces.&lt;/p&gt;
&lt;p&gt;Obviously, this is a function, so we need to call it somewhere.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;main(src)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We're just passing it our URL that may or may not have &lt;code&gt;http://&lt;/code&gt; stuck on to
it.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Now you're really done! I suggest you go check out &lt;code&gt;to-markdown&lt;/code&gt;, play around
with &lt;code&gt;process&lt;/code&gt;, and see what else you can do with this thing. If you make
something pretty neat, you should consider releasing it! Check out &lt;code&gt;npm help
adduser&lt;/code&gt; and &lt;code&gt;npm help publish&lt;/code&gt; to see how you could go about this. (There are
probably similar modules out there, though, so make sure you're not stepping
on anyone's toes first!)&lt;/p&gt;
&lt;p&gt;I'd also suggest you do some basic error handling, but that's totally up to
you.&lt;/p&gt;
&lt;p&gt;For the previous two tutorials I waited until the following post to show a
finished version of the script; since this is the last tutorial on writing CLI
apps in Node that I intend to write, the full script is below, as well as my
manifest file (&lt;code&gt;package.json&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Note: I tend to prefer shorter (but hopefully still readable) names for
things, and a somewhat opinionated code style, so the full script below may
differ a bit from your results, and that's totally fine.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;html2txt&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;html2text sorta thing for blog post&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;0.0.1&amp;quot;,
  &amp;quot;author&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;Zac Anger&amp;quot;,
    &amp;quot;email&amp;quot;: &amp;quot;zac@zacanger.com&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;http://zacanger.com&amp;quot;
  },
  &amp;quot;license&amp;quot;: &amp;quot;WTFPL&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;node index&amp;quot;
  },
  &amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/zacanger/blog#readme&amp;quot;,
  &amp;quot;repository&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;https://github.com/zacanger/blog.git&amp;quot;
  },
  &amp;quot;bugs&amp;quot;: &amp;quot;https://github.com/zacanger/blog/issues&amp;quot;,
  &amp;quot;keywords&amp;quot;: [
    &amp;quot;html&amp;quot;,
    &amp;quot;markdown&amp;quot;
  ],
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;to-markdown&amp;quot;: &amp;quot;^3.0.1&amp;quot;,
    &amp;quot;wordwrap&amp;quot;: &amp;quot;^1.0.0&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;#!/usr/bin/env node

const url = process.argv[2] || 'zacanger.com'
const { get } = require('http')
const { rows } = process.stdout
const len = (rows &amp;lt; 80 ? 80 : rows)
const toMd = require('to-markdown')
const ww = require('wordwrap')
const wrapper = ww(len)
const opts = { gfm: true }
const conv = a =&amp;gt; toMd(a, opts)
const wrap = a =&amp;gt; wrapper(a)
const log = a =&amp;gt; console.log(a)
const src = url.includes(('http://') || url.includes('https://')) ? url : `http://${url}`

const main = a =&amp;gt; get(a, res =&amp;gt; {
  let b = ''
  res.on('data', d =&amp;gt; {b += d.toString()})
  res.on('end', () =&amp;gt; log(wrap(conv(b))))
})

if (!module.parent) main(src)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks for reading! If you note any problems, please put in an issue &lt;a href="https://github.com/zacanger/blog/issues"&gt;on
Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The full version of this module has been published at
&lt;a href="http://npm.im/html2txt"&gt;html2txt&lt;/a&gt;.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/cli-apps-part-three</guid><pubDate>Tue, 27 Sep 2016 00:00:00 -0700</pubDate></item><item><title>haskell meetup, 1 sept 2016</title><link>https://zacanger.com/blog/posts/hs-meetup-9-1</link><description>&lt;p&gt;just a few random notes. most of this was way over my head.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pinealservo/mamedb"&gt;https://github.com/pinealservo/mamedb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;xml-conduit -- xml parsing&lt;/p&gt;
&lt;p&gt;hasql - postgres lib&lt;/p&gt;
&lt;p&gt;maybe keep all types etc in own file&lt;/p&gt;
&lt;p&gt;cabal files: main-is Main.hs, list other of &lt;em&gt;our&lt;/em&gt; modules.&lt;/p&gt;
&lt;p&gt;build-depends are dependencies. install with stack.&lt;/p&gt;
&lt;p&gt;stack build is like npm i&lt;/p&gt;
&lt;p&gt;$$ -- ?
$= -- ?&lt;/p&gt;
&lt;p&gt;combinators from conduit&lt;/p&gt;
&lt;p&gt;conduit is a streaming library thing&lt;/p&gt;
&lt;p&gt;better than lazy io&lt;/p&gt;
&lt;p&gt;there's also pipes, another group of streaming abstractions&lt;/p&gt;
&lt;p&gt;also iostreams -- uses io&lt;/p&gt;
&lt;p&gt;in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parseMame :: MonadThrow m =&amp;gt; ConduitM Event Machine m ()
parseMame = void $ tagIgnoreAttrs &amp;quot;mame&amp;quot; $ manyYield parseMachine
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;void is explicitly discarding the value&lt;/p&gt;
&lt;p&gt;you can use the -&amp;gt; typeclass to build things, and use them as arrows,
including in type signatures.&lt;/p&gt;
&lt;p&gt;in &lt;code&gt;rId &amp;lt;- insertRom -&amp;lt; rom&lt;/code&gt;,
rom is input to insertrom ; insertrom's output is romid&lt;/p&gt;
&lt;p&gt;stack ghci: ghci but for project&lt;/p&gt;
&lt;p&gt;:r -- reload loaded module&lt;/p&gt;
&lt;p&gt;11 -- oom&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/hs-meetup-9-1</guid><pubDate>Thu, 01 Sep 2016 00:00:00 -0700</pubDate></item><item><title>Node CLI 2, Note Taking App</title><link>https://zacanger.com/blog/posts/note-taking-app</link><description>&lt;h2 id="build-a-note-taking-app-for-the-terminal-in-node"&gt;Build a Note-Taking App for the Terminal, in Node&lt;/h2&gt;
&lt;p&gt;This is a follow-up to my &lt;a href="blog.zacanger.com/2016/a-basic-cli-app-in-node.html"&gt;first
post&lt;/a&gt; on writing
command-line apps in Node. I suggest you read that first, but this post
should stand on its own if you don't want to. Below is the little React
component generator that you'd get if you follow that tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;#!/usr/bin/env node

const type = process.argv[2]
const component = process.argv[3]
const { writeFile } = require('fs')

const help = () =&amp;gt;
  console.log(`
  please pass component type and component name
  example: ./rcg.js function Foo
`)

if (!component || !type) {
  return help()
}

const pureComponent = `
import React from 'react'

const ${component} = () =&amp;gt; &amp;lt;div&amp;gt;${component}&amp;lt;/div&amp;gt;

export default ${component}
`.trim()

const classComponent = `
import React, { Component } from 'react'

export default class ${component} extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;${component}&amp;lt;/div&amp;gt;
    )
  }
}
`.trim()

const doTheThing = kind =&amp;gt; (
  writeFile(`${component}.js`, kind, 'utf8', err =&amp;gt; {
    if (err) console.log(err)
  })
)

switch (type) {
  case 'function':
    doTheThing(pureComponent)
    break
  case 'class':
    doTheThing(classComponent)
    break
  default:
    return help()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I really love writing little command-line utilities in Node. There are other
languages that may be better for this (Bash, Ruby, Perl), but Node is just
more &lt;em&gt;fun&lt;/em&gt; than those (at least to me). I especially love trying to do simple
little tools with no dependencies, or wrapping up awesome modules to be used
in your terminal. The majority of &lt;a href="https://www.npmjs.com/~zacanger"&gt;my published
modules&lt;/a&gt; are little tools like this. A lot
of folks only think of Node as the thing that runs Express, or the thing that
lets them test their code without a browser, or whatever, though. So, this
will be a short tutorial on writing a command-line app in Node. At the end of
it, you'll have a totally awesome little app for taking notes in JSON. The
full version of this app (with a few adjustments and additions) is
&lt;a href="https://www.npmjs.com/package/lilnote"&gt;here&lt;/a&gt;, and you can install it to use
in your terminal with &lt;code&gt;npm i -g lilnote&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Okay, so, let's do stuff!&lt;/p&gt;
&lt;h2 id="update-node"&gt;Update Node&lt;/h2&gt;
&lt;p&gt;First things first&amp;mdash;make sure Node and npm are up to date. If you're
already using at least versions 6 of node and 3 of npm (&lt;code&gt;node -v&lt;/code&gt; and &lt;code&gt;npm
-v&lt;/code&gt; to find out), you're fine. Otherwise, you really should update.&lt;/p&gt;
&lt;p&gt;I recommend using &lt;a href="https://www.npmjs.com/package/n"&gt;n&lt;/a&gt; for this. If you
already use NVM, go with that; if you're on Windows, you'll likely have to go
download the new version and manually install it. Otherwise, just &lt;code&gt;npm i -g n
&amp;amp;&amp;amp; n latest &amp;amp;&amp;amp; npm i -g npm@next&lt;/code&gt; (you can leave out the last bit, but it's
nice to have the newest version of the coolest tools).&lt;/p&gt;
&lt;h2 id="start-a-project"&gt;Start a Project&lt;/h2&gt;
&lt;p&gt;Make a new directory and start a project (&lt;code&gt;mkdir note-taking-app&lt;/code&gt;, &lt;code&gt;cd
note-taking-app&lt;/code&gt;, &lt;code&gt;npm init&lt;/code&gt;, &lt;code&gt;touch index.js&lt;/code&gt;, and &lt;code&gt;chmod +x index.js&lt;/code&gt; to
make it executable).&lt;/p&gt;
&lt;p&gt;You won't need any dependencies here; the &lt;code&gt;npm init&lt;/code&gt; isn't vital, but if you
later wanted to add dependencies, publish this (please don't unless it's
significantly different from &lt;a href="https://npmjs.com/package/lilnote"&gt;lilnote&lt;/a&gt;!),
or something, it'd be nice to just have this already set up.&lt;/p&gt;
&lt;p&gt;If you want, you can add some fields to your &lt;code&gt;package.json&lt;/code&gt; to specifiy that
it's a global, command-line sort of app. Add &lt;code&gt;"preferGlobal": true&lt;/code&gt; and
&lt;code&gt;"bin": "./index.js"&lt;/code&gt; for this.&lt;/p&gt;
&lt;h2 id="write-some-code"&gt;Write Some Code&lt;/h2&gt;
&lt;p&gt;Open the &lt;code&gt;index.js&lt;/code&gt; in your editor.&lt;/p&gt;
&lt;p&gt;The first thing you'll need to write is the shebang. This is to let your
shell know how to execute this file. For a Node script, it should read
&lt;code&gt;#!/usr/bin/env node&lt;/code&gt;. Any time you're writing an executable script, this
goes on the first line. You'll use a similar thing for any language you'd use
(for example, &lt;code&gt;#!/bin/bash&lt;/code&gt; for a Bash script, or &lt;code&gt;#!/usr/bin/ruby&lt;/code&gt; for a
Ruby script&amp;mdash; the &lt;code&gt;env&lt;/code&gt; bit says 'find out what my computer thinks Node
is, and execute that script with that thing'&amp;mdash;it's the same idea as
doing &lt;code&gt;which node index.js&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We're going to require some stuff. If you happen to be using &lt;code&gt;babel-node&lt;/code&gt; or
using &lt;code&gt;babel-register&lt;/code&gt; you could use &lt;code&gt;import&lt;/code&gt;s here, but we'll go with
&lt;code&gt;require&lt;/code&gt;s because this means we can keep our app dependency-free.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;'use strict'&lt;/code&gt; to the next line. You don't &lt;em&gt;have&lt;/em&gt; to do this, &lt;a href="https://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode"&gt;but you
should&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'll require just one thing to start with: &lt;code&gt;fs&lt;/code&gt;, which is built in to Node.&lt;/p&gt;
&lt;p&gt;Our file should currently look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;#!/usr/bin/env node

'use strict'

const fs = require('fs')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our app is going to read input from the terminal, so we'll need to use the
built-in &lt;code&gt;process&lt;/code&gt;. This provides an &lt;code&gt;argv&lt;/code&gt;, which is an 'argument
vector'&amp;mdash;an array of all things entered on the command-line, which will
always start with &lt;code&gt;node&lt;/code&gt; and the file that's being run. So, we'll use
&lt;code&gt;process.argv[2]&lt;/code&gt;, which will be the first manually entered argument.
Sidenote: &lt;code&gt;process&lt;/code&gt; is an awesome piece of Node, and if you're not familiar
with it, open a REPL (just enter &lt;code&gt;node&lt;/code&gt; in the terminal) and type in
&lt;code&gt;process&lt;/code&gt;, and skim through that gigantic object.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const arg = process.argv[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Parsing arguments is tedious and sometimes difficult. There are a
&lt;a href="https://github.com/tj/commander.js"&gt;lot&lt;/a&gt; of
&lt;a href="https://github.com/substack/minimist"&gt;awesome&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/yargs"&gt;modules&lt;/a&gt; that exist for this, and if
you keep building cli apps in Node you should definitely investigate these,
but for this tutorial we'll parse options manually. In the same way that you
should know how HTTP works and then maybe use &lt;a href="http://koajs.com"&gt;Koa&lt;/a&gt; or
&lt;a href="http://hapijs.com"&gt;hapi&lt;/a&gt;, you should know how arguments work before deciding
on a library to handle them.&lt;/p&gt;
&lt;p&gt;We'll need a couple of other things before we can really get going. We should
probably do something with that &lt;code&gt;fs&lt;/code&gt; module&amp;mdash;let's use it to specify a
piece of JSON we'll work against. I won't get into how to handle what happens
if that file doesn't already exist here, but you can check out &lt;a href="https://github.com/zacanger/lilnote/blob/master/check-file.js#L10"&gt;lilnote's
source
code&lt;/a&gt; if
you're curious. For our purposes, you should &lt;code&gt;touch notes.json&lt;/code&gt; in the same
directory as your app, and put an empty array (&lt;code&gt;[]&lt;/code&gt;) in there. (Note:
&lt;code&gt;lilnote&lt;/code&gt; uses a file under the user's home directory; that's another thing
we won't worry about right now, but it's &lt;a href="https://github.com/zacanger/lilnote/blob/master/check-file.js#L10"&gt;pretty
easy&lt;/a&gt; to
do.)&lt;/p&gt;
&lt;p&gt;Let's add another couple of declarations:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const n = './notes.json'
const file = fs.readFileSync(n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We'll also have a variable here for our read-in notes.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const notes = JSON.parse(file)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And since we'll be using &lt;code&gt;console.log&lt;/code&gt; in a few places, let's just make that
a little shorter:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const log = console.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your file should now look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;#!/usr/bin/env node

'use strict'

const fs = require('fs')
const log = console.log
const arg = process.argv[2]
const n = './notes.json'
const file = fs.readFileSync(n)
const notes = JSON.parse(file)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And your file structure should look something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;project-root
  package.json
  index.js
  notes.json
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="make-it-do-things"&gt;Make It Do Things&lt;/h2&gt;
&lt;p&gt;So let's do stuff! First let's make a way to record notes taken. This will
work by just calling your script and treating the first argument as a note.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;./index.js &amp;quot;go to the grocery store&amp;quot;
./index.js cook
./index.js eat
./index.js &amp;quot;wash dishes&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let's write a function for this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const takeNote = (notes, note) =&amp;gt; {
  notes.push(note)
  const taken = JSON.stringify(notes, null, 2)
  fs.writeFile(n, taken, 'utf8', err =&amp;gt; {
    if (err) return log(err)
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we're using function expressions, not function declarations. This
could also be written as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;function takeNote (notes, note) {
  notes.push(note)
  var taken = JSON.stringify(notes, null, 2)
  fs.writeFile(file, taken, 'utf8', function(err) {
    if (err) {
      return log(err)
    }
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These extra parameters to &lt;code&gt;JSON.stringify()&lt;/code&gt; make our JSON look decent. Check
out the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"&gt;docs on
MDN&lt;/a&gt;
if you're not familiar with them.&lt;/p&gt;
&lt;p&gt;We're taking in the array of notes and a note, and pushing that note to the
array of notes. Then we're using &lt;code&gt;writeFile()&lt;/code&gt; from &lt;code&gt;fs&lt;/code&gt; to write to the
&lt;code&gt;file&lt;/code&gt; we declared earlier, using the &lt;code&gt;taken&lt;/code&gt; we declared earlier, with the
encoding &lt;code&gt;UTF-8&lt;/code&gt;. The callback here is in case there's an error&amp;mdash;if the
file doesn't already exist, for example.&lt;/p&gt;
&lt;p&gt;We should handle this function where we process our command-line arguments,
which we'll get to in a little bit.&lt;/p&gt;
&lt;p&gt;Let's also write a function for removing a note by its index in the array.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const removeNote = (notes, noteIndex) =&amp;gt; {
  notes.splice(noteIndex -1, 1)
  const taken = JSON.stringify(notes, null, 2)
  fs.writeFile(n, taken, 'utf8', err =&amp;gt; {
    if (err) return log(err)
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Awesome! That's like 90% of our app right there.&lt;/p&gt;
&lt;p&gt;We should probably handle some arguments so we can actually use this thing.&lt;/p&gt;
&lt;h2 id="make-it-all-work"&gt;Make It All Work&lt;/h2&gt;
&lt;p&gt;We're going to do this with a series of &lt;code&gt;if&lt;/code&gt; statements. We could also use a
&lt;code&gt;switch&lt;/code&gt; here, but for a lot of people that'll seem a little unfamiliar.
Let's assume that you'll use &lt;code&gt;-s&lt;/code&gt; to show all notes, and &lt;code&gt;-r&lt;/code&gt; to remove a
note. We should also handle a case where there are no arguments passed.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;if (!arg) {
  return log('Please pass an argument')
}
if (arg &amp;amp;&amp;amp; arg === '-r') {
  const noteIndex = process.argv[3]
  return removeNote(notes, noteIndex)
}
if (arg &amp;amp;&amp;amp; arg === '-s') {
  return log(notes)
}
else {
  return takeNote(notes, arg)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, that's a basic way to handle command-line options. Let's just wrap that
last bit in a function and call it at the end. It's not beautiful, but if you
put a little bit of work into this, you could have a decent app! Here's how
your whole file should look, now:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;#!/usr/bin/env node

'use strict'

const fs = require('fs')
const log = console.log
const arg = process.argv[2]
const n = './notes.json'
const file = fs.readFileSync(n)
const notes = JSON.parse(file)

const takeNote = (notes, note) =&amp;gt; {
  notes.push(note)
  const taken = JSON.stringify(notes, null, 2)
  fs.writeFile(n, taken, 'utf8', err =&amp;gt; {
    if (err) return log(err)
  })
}

const removeNote = (notes, noteIndex) =&amp;gt; {
  notes.splice(noteIndex -1, 1)
  const taken = JSON.stringify(notes, null, 2)
  fs.writeFile(n, taken, 'utf8', err =&amp;gt; {
    if (err) return log(err)
  })
}

const runTheApp = () =&amp;gt; {
  if (!arg) {
    return log('Please pass an argument')
  }
  if (arg &amp;amp;&amp;amp; arg === '-r') {
    const noteIndex = process.argv[3]
    return removeNote(notes, noteIndex)
  }
  if (arg &amp;amp;&amp;amp; arg === '-s') {
    return log(notes)
  }
  else {
    return takeNote(notes, arg)
  }
}

runTheApp()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This isn't beautiful, but as with the last post, I'll leave it to you to
clean it up, handle funky cases, and whatnot. If you're having fun with this,
check back for my next post! Also, if you have any thoughts on fun
command-line projects in Node but aren't sure how to get started, hit me up
and I'll see about writing something up!&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/note-taking-app</guid><pubDate>Fri, 26 Aug 2016 00:00:00 -0700</pubDate></item><item><title>Node CLI 1, React Component Generator</title><link>https://zacanger.com/blog/posts/a-basic-cli-app-in-node</link><description>&lt;p&gt;I'm going to walk through a super basic app in Node that you can
run in your terminal. I've got a more in-depth tutorial coming up soon,
but wanted to get this idea out there tonight.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ryanwalsh.io"&gt;Someone&lt;/a&gt; brought up the idea of a React component
generator the other day, and I immediately thought &lt;em&gt;Bash script&lt;/em&gt;. Well, that's
pretty easy.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;#!/bin/bash

echo &amp;quot;
import React from 'react'

const $1 = () =&amp;gt; (
  &amp;lt;div&amp;gt;$1&amp;lt;/div&amp;gt;
)

export default $1
&amp;quot; &amp;gt; $1.js
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There you go, a basic pure component generator script. This could be a little
more complex, handle some content, handle generating a class instead of a
function, and whatever, but that's the basic idea, in Bash.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keep in mind, none of this is React-specific. All we're doing is handling
arguments and spitting out a file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The idea here is that you just call this script from somewhere and it gives
you a component already laid out for you. It's not too fancy, but it's useful.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;$ ./my-script.sh Foo

$ cat Foo.js

import React from 'react'

const Foo = () =&amp;gt; (
  &amp;lt;div&amp;gt;Foo&amp;lt;/div&amp;gt;
)

export default Foo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That could save a little bit of time. I use something similar for generating
an &lt;code&gt;index.html&lt;/code&gt; for React apps.&lt;/p&gt;
&lt;p&gt;This is a lot like using snippets in your editor, except it doesn't rely on
you having that editor and those snippets handy. You could pass this around to
anyone who uses any editor, on any computer, and get the same result. You
could upload it to somewhere and just &lt;code&gt;curl my-script.sh | bash&lt;/code&gt; and not even
need to have the file around. Pretty handy, I think.&lt;/p&gt;
&lt;p&gt;But... what about in JS? I mean, we're JavaScript devs, right?&lt;/p&gt;
&lt;p&gt;It's still pretty straightforward in Node, as it happens.&lt;/p&gt;
&lt;p&gt;We only need one file to get going. I'll call mine &lt;del&gt;compgen&lt;/del&gt; rcg.js, for React
Component Generator.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;touch rcg.js     # create a new file
chmod +x rcg.js  # set an executable bit on the file
vi rcg.js        # open it for editing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Obviously substitute your editor for &lt;code&gt;vi&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;What's the first thing any executable script needs? A shebang! We'll also go
ahead and use &lt;code&gt;process&lt;/code&gt;. If you don't know &lt;code&gt;process&lt;/code&gt;, open Node in a terminal
(&lt;code&gt;node&lt;/code&gt;) and just type in &lt;code&gt;process&lt;/code&gt;. It's pretty cool. The bit we want is
&lt;code&gt;.argv&lt;/code&gt;, which is an array of all arguments passed. It always has &lt;code&gt;node&lt;/code&gt; and the
file that's calling it as the first two elements, so we don't need those.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;#!/usr/bin/env node

const args = process.argv.slice(2)
const type = args[0]
const component = args[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we're going for here is a script we can call like &lt;code&gt;./rcg.js function Foo&lt;/code&gt;,
or with a &lt;code&gt;class&lt;/code&gt; parameter instead.&lt;/p&gt;
&lt;p&gt;The next thing we'll need to do is actually sketch out these components. I'll be
using template literals. If you don't have a recent version of Node, you should
update. If you can't update, you'll have to use string concatenation instead (so
really, you should just update). To update (on Mac or Linux; on Windows you
should just go to &lt;a href="http://nodejs.org"&gt;the website&lt;/a&gt; and download a new version),
just &lt;code&gt;npm i -g n &amp;amp;&amp;amp; n latest&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's write out what a pure (function) component looks like, first.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const pureComponent = `
import React from 'react'

const ${component} = () =&amp;gt; &amp;lt;div&amp;gt;${component}&amp;lt;/div&amp;gt;

export default ${component}
`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It doesn't have a whole lot going on, I know. This is just a quick file
generator, it can't write your code for you. :P&lt;/p&gt;
&lt;p&gt;If you can't update node, that'd look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;var pureComponent = 'import React from \'react\'' +
'function ' + component + '(){' +
  'return &amp;lt;div&amp;gt;' + component + '&amp;lt;/div&amp;gt;' +
'}' +
'module.exports = ' + component
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Kind of annoying, right?)&lt;/p&gt;
&lt;p&gt;So now, let's get one for a class (I won't go through doing this one with an old
version of Node, nor with &lt;code&gt;React.createClass&lt;/code&gt;&amp;mdash;just with ES2015 classes).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const classComponent = `
import React, { Component } from 'react'

export default class ${component} extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;${component}&amp;lt;/div&amp;gt;
    )
  }
}
`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lovely! Obviously this should be more complex; if your class only has a render
function that returns JSX, just use a function instead.&lt;/p&gt;
&lt;p&gt;Great, now you have a bunch of stuff in a file that doesn't do anything! Let's
handle arguments and make it actually do things.&lt;/p&gt;
&lt;p&gt;There are a lot of great libraries for parsing options, and I'll list a few of
them in the next blog post. For now, we'll just use &lt;code&gt;if&lt;/code&gt; statements.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;let toWrite // this is what we'll end up writing to a file
if (type === 'function') {
  toWrite = pureComponent
}
if (type === 'class') {
  toWrite = classComponent
}
if (type !== 'function' &amp;amp;&amp;amp; type !== 'class') {
  console.log('please pass type of component as first argument')
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That's a little sloppy&amp;mdash;intentionally! I'm hoping you take some time to
write this out a little better than just copying and pasting from this blog
post.&lt;/p&gt;
&lt;p&gt;There's one major bit left: actually writing a file. We'll need Node's &lt;code&gt;fs&lt;/code&gt; for
this.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const { writeFile } = require('fs')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, at the bottom of our file, let's actually do the fun bit.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;writeFile(`${component}.js`, toWrite, 'utf8', err =&amp;gt; {
  if (err) console.log(err)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now your whole file should look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;#!/usr/bin/env node

const args = process.argv.slice(2)
const type = args[0]
const component = args[1]
const { writeFile } = require('fs')

const pureComponent = `
import React from 'react'

const ${component} = () =&amp;gt; &amp;lt;div&amp;gt;${component}&amp;lt;/div&amp;gt;

export default ${component}
`

const classComponent = `
import React, { Component } from 'react'

export default class ${component} extends Component {
  render() {
    return (
      &amp;lt;div&amp;gt;${component}&amp;lt;/div&amp;gt;
    )
  }
}
`

let toWrite
if (type === 'function') {
  toWrite = pureComponent
}
if (type === 'class') {
  toWrite = classComponent
}
if (type !== 'function' &amp;amp;&amp;amp; type !== 'class') {
  console.log('please pass type of component as first argument')
}

writeFile(`${component}.js`, toWrite, 'utf8', err =&amp;gt; {
  if (err) console.log(err)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Boom! You've made a command-line app! You can drop this anywhere in your
&lt;code&gt;$PATH&lt;/code&gt; and call it from anywhere to generate a component for you! (&lt;code&gt;$PATH&lt;/code&gt; is
where your system looks for files to execute. If you don't have something like
a &lt;code&gt;~/bin&lt;/code&gt; directory, maybe &lt;code&gt;mv rcg.js /usr/local/bin&lt;/code&gt;. If you don't want to
move it somewhere like that, you can always either do &lt;code&gt;./rcg.js&lt;/code&gt; or &lt;code&gt;node
rcg&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;That's it! This script is not super clean. There are a few little things that
can be done to make it a lot better, like using a &lt;code&gt;switch&lt;/code&gt; statement to handle
arguments, handling unexpected arguments, not overwritting an existing file,
passing more options, and trimming extra lines from the generated files, and
not keeping your templates in the same file as all the rest of the things. I'm
going to leave that up to you. Have fun with it!&lt;/p&gt;
&lt;p&gt;If you're interested in doing this kind of stuff in Node, be sure to check
back! I've got two more tutorials on writing command-line apps in Node, which
will go progressively more in depth, on the way&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/a-basic-cli-app-in-node</guid><pubDate>Wed, 24 Aug 2016 00:00:00 -0700</pubDate></item><item><title>things that suck about js</title><link>https://zacanger.com/blog/posts/things-that-suck-about-js</link><description>&lt;p&gt;asked some people what they dislike about js, just out of curiosity.
results are predictable.&lt;/p&gt;
&lt;p&gt;in no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;events (dom events, event cycle, event loop)&lt;/li&gt;
&lt;li&gt;js fatigue&lt;/li&gt;
&lt;li&gt;this (context)&lt;/li&gt;
&lt;li&gt;es6 classes/oo idea prevalence&lt;/li&gt;
&lt;li&gt;mobile safari even existing&lt;/li&gt;
&lt;li&gt;internet explorer/edge&lt;/li&gt;
&lt;li&gt;no type system&lt;/li&gt;
&lt;li&gt;everything DOM related&lt;/li&gt;
&lt;li&gt;no real immutable data structures&lt;/li&gt;
&lt;li&gt;lack of neat syntax tools found in new languages (simple shit like range operators)&lt;/li&gt;
&lt;li&gt;the way everyone else writes it&lt;/li&gt;
&lt;/ul&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/things-that-suck-about-js</guid><pubDate>Mon, 22 Aug 2016 00:00:00 -0700</pubDate></item><item><title>purescript things</title><link>https://zacanger.com/blog/posts/purescript-things</link><description>&lt;p&gt;What are &lt;code&gt;@&lt;/code&gt; and &lt;code&gt;=&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;What is fixity? Is this the same as precedence?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-haskell"&gt;foo :: [a] -- in haskell would be
foo :: forall a. Array a -- in purescript, i think?
-- there's no [] in annotations, it's always Array a
-- but there is List, but you have to use Data.List instead of just []

Number -- is js number
Int -- is 32 bit -- and it's basically n | 0 (?)

Unit -- ()

main :: IO () -- would be
main :: Eff -- basically, but really more something like
main :: Eff (process :: PROCESS, fs :: FS) Unit -- or something

a &amp;lt;&amp;gt; b -- a ++ b -- concat a b

A &amp;lt;= B -- B implies instance of A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;something like this is kind of right i think (what builds on what):
i&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-text"&gt;      monad
  applicative   ??
    apply  bind
      functor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No tuples, just records. But there's a lib for tuples.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;  is &lt;code&gt;.&lt;/code&gt; for rtl composition, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; for ltr&lt;/p&gt;
&lt;p&gt;Lots of &lt;code&gt;Data.List&lt;/code&gt; stuff is in &lt;code&gt;Data.Foldable&lt;/code&gt; and &lt;code&gt;Data.Traversable&lt;/code&gt; instead.&lt;/p&gt;
&lt;p&gt;To export stuff: &lt;code&gt;module Foo (a, b, c) where&lt;/code&gt;.
That's like &lt;code&gt;export { a, b, c }&lt;/code&gt; in JS, I think.
&lt;code&gt;module Foo (..)&lt;/code&gt; exports everything, I think.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/purescript-things</guid><pubDate>Fri, 19 Aug 2016 00:00:00 -0700</pubDate></item><item><title>Principles and Tips</title><link>https://zacanger.com/blog/posts/principles-and-tips</link><description>&lt;p&gt;I'm not very experienced, and sometimes I'm pretty sure I'm not very good at
programming, but I have some principles I try to stick to that help, I think.
They're not complicated. Also some tips. These are all in no particular order.
And kind of stream-of-consciousness.&lt;/p&gt;
&lt;p&gt;Have a changelog. This doesn't have to be something complicated. It can actually
be &lt;em&gt;really&lt;/em&gt; simple. Here's a script that'll do this for you.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-shell"&gt;#!/usr/bin/env bash
range=&amp;quot;${1:-origin..}&amp;quot;
shift 1
git log \
  --no-merges \
   --format='%C(auto,green)* %s%C(auto,reset)%n%w(0,2,2)%+b' \
   --reverse &amp;quot;$range&amp;quot; &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Write tests. Even if they're not complex, thorough tests, write them. It's a
start.&lt;/p&gt;
&lt;p&gt;If you change things and tests break, fix the tests. Try not to break the tests.
But if you do, and it's a necessary change, fix the tests to line up with how
things work now.&lt;/p&gt;
&lt;p&gt;Don't decrease code coverage. This goes back to 'if you write a thing, write a
test for it.'&lt;/p&gt;
&lt;p&gt;Don't bring in new libraries/frameworks/whatever unless without good reason.&lt;/p&gt;
&lt;p&gt;Keep all dependencies up to date. If there's a breaking change, take a day to
update your code. If there are breaking changes all the time and no easy way to
update (like codemods), get rid of that dependency.&lt;/p&gt;
&lt;p&gt;Delete code. As much as possible. Don't keep it around 'just in case' or
something. Get rid of it.&lt;/p&gt;
&lt;p&gt;Don't write very specific functions. And name your functions appropriately.  No
&lt;code&gt;getThisSpecificPieceOfData()&lt;/code&gt;; instead, &lt;code&gt;getData(specificPiece)&lt;/code&gt;. And then, if
you're going to be calling it with that specific piece of data, maybe write a
second function. But have that first one, first. &lt;code&gt;const getThisThing =
getThings(thisThing)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Don't stress about not knowing something. Either someone else knows it, or
literally no one around you knows it so you can be the first to figure it out,
which is cool. (I suck at this not-stressing bit, but I'm trying.)&lt;/p&gt;
&lt;p&gt;No language or framework or library sucks. I mean, okay, some do, but most
really don't, they're just probably not what you're looking for. Even Angular
doesn't &lt;em&gt;suck&lt;/em&gt;, it's just not a good fit for many many webapps. And by the same
token, not all good things are always good. React is great, but if you're doing
a little static site, screw it, just use jQuery. It's okay. No one will judge
you too harshly. And if they do, screw them, too.&lt;/p&gt;
&lt;p&gt;Some paradigms are better than others, but no one will ever agree on which ones
are better, so it's best to just pretend that OO is great when talking to C#
people, and that FP is great when talking to Haskell people, or whatever.
Believe whatever you want to believe, and if you do decide to stick hardcore to
one way of writing code, make sure you know it &lt;em&gt;really&lt;/em&gt; well.&lt;/p&gt;
&lt;p&gt;Use the simplest tool possible. This isn't my principle, this is a law. But
people break it all the time, &lt;strong&gt;especially&lt;/strong&gt; in the front-end world. If you can
do it with ten lines of Bash, do it with ten lines of Bash, don't install five
dependencies to be able to do it in 40 lines of JS. (If you're on a computer
that doesn't have Bash, change or update your OS. Even Windows has Bash, now.)&lt;/p&gt;
&lt;p&gt;Premature abstractions are just as bad as premature optimizations. Avoid, avoid,
avoid.&lt;/p&gt;
&lt;p&gt;Being good at using a computer comes first. If you can't use the basic tools you
need to do your job, you need to learn that first. That means your hardware,
your OS, your terminal, your shell, your editor, your browser, whatever. You
don't need to go read the source and learn every hotkey and all that, but being
good with your tools means being faster and more productive, which gives you a
lot more time for thinking, reading docs, and all the other things that you
actually do most of the time when writing code.&lt;/p&gt;
&lt;p&gt;Also, type. If you can't type well, practice. I'm a fast typist&amp;mdash;114 wpm,
which is pretty fast&amp;mdash;and while it hasn't made me a &lt;em&gt;better&lt;/em&gt; developer,
being able to type things quickly means I have more time to do all the things
that aren't just typing. Like thinking and reading docs.&lt;/p&gt;
&lt;p&gt;Figure out what doesn't work, and what you don't like. That's actually pretty
easy to do. Just play with a lot of things and learn what sucks, to you.&lt;/p&gt;
&lt;p&gt;No job is worth screwing up your personal life over. If you can't take a few
days off for important events without much warning, find a different job. You're
a developer. You're in control, in the current job market.&lt;/p&gt;
&lt;p&gt;Don't just code. It's bad for you. Have something else. Music, woodworking,
fancy-wine-drinking, whatever. You need to get your eyes away from the screen
for a while, and get your wrists out of that position. You'll end up blind with
carpal tunnel if all you do is code all day long.&lt;/p&gt;
&lt;p&gt;If a tool you're using isn't working out (that could be a language, framework,
package manager, OS, cloud provider, whatever), find a way to get rid of it.
That might take a while (ages, maybe), but it'll be worth it. Good tools are
worth using. Don't get yourself stuck with shitty ones. You can almost always
find a way to gradually switch over, so it's not a big immediate change for your
team or your project or whatever. If you use an editor you don't like, but
you're not sure you'd like anything else better, just try a different editor.
Maybe try a different one every two weeks, 'til you've picked one.&lt;/p&gt;
&lt;p&gt;Laptop screens aren't great. Get a decent monitor for at home. Just do it. It's
worth it. Also a decent mouse, if you use a mouse. If you have a laptop with a
crappy keyboard, treat yourself to a nice keyboard. All these things make a
difference.&lt;/p&gt;
&lt;p&gt;No language is great.  No one has ever written a language that's just perfect.
Anyone who claims their language is provably superior in all ways to your language
is either an idiot or trying to sell you something. No one will ever write a
language that's great for everything in all ways, either. So just find one that
works kind of okay in a way you feel like you can live with, and go with that.
Doesn't matter if that's Smalltalk, ML, Jelly, or Brainfuck. If you can be
productive in it and it works for the thing you're making (and for your team),
do that, and screw the haters.&lt;/p&gt;
&lt;p&gt;Don't live on energy drinks, pizza, and IPAs on Friday nights.&lt;/p&gt;
&lt;p&gt;I'm a little off-topic now I guess, so, that's all.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/principles-and-tips</guid><pubDate>Fri, 19 Aug 2016 00:00:00 -0700</pubDate></item><item><title>Void Elements</title><link>https://zacanger.com/blog/posts/void-elements</link><description>&lt;p&gt;Obviously this doesn't apply when using jsx, because everything needs to be
closed. But, in jsx, if it &lt;em&gt;can&lt;/em&gt; be a self-closed tag (meaning literally any of
these but also anything else that doesn't have children), please self-close it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;area&lt;/li&gt;
&lt;li&gt;base&lt;/li&gt;
&lt;li&gt;br&lt;/li&gt;
&lt;li&gt;col&lt;/li&gt;
&lt;li&gt;embed&lt;/li&gt;
&lt;li&gt;hr&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;input&lt;/li&gt;
&lt;li&gt;keygen&lt;/li&gt;
&lt;li&gt;link&lt;/li&gt;
&lt;li&gt;menuitem&lt;/li&gt;
&lt;li&gt;meta&lt;/li&gt;
&lt;li&gt;param&lt;/li&gt;
&lt;li&gt;source&lt;/li&gt;
&lt;li&gt;track&lt;/li&gt;
&lt;li&gt;wbr&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See what they all have in common?&lt;/p&gt;
&lt;p&gt;You can't possibly have anything in any of them, like, between tags. What can
you put between an opening and closing line break tag? &lt;strong&gt;Nothing&lt;/strong&gt;. So why
would you need a closing tag? &lt;strong&gt;You wouldn't&lt;/strong&gt;. So don't close it.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/void-elements</guid><pubDate>Tue, 09 Aug 2016 00:00:00 -0700</pubDate></item><item><title>idea: series on design for devs</title><link>https://zacanger.com/blog/posts/design-for-devs</link><description>&lt;p&gt;I've wanted to do something like this for a while (since December-ish), but
haven't had the time. I have some minor design experience (not a lot), and
tend to read more about interaction design, HCI, and other random
non-programming-but-still-computer-and-person-working-together-related topics
than I do about programming.&lt;/p&gt;
&lt;p&gt;Would anyone be interested in seeing something like that? This is a short list
of things I might cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A11Y&lt;/li&gt;
&lt;li&gt;Typography&lt;/li&gt;
&lt;li&gt;Colour theory&lt;/li&gt;
&lt;li&gt;Whitespace&lt;/li&gt;
&lt;li&gt;Scalable design (math; see Basscss)&lt;/li&gt;
&lt;li&gt;Styleguides (writing, maintaining, conforming)&lt;/li&gt;
&lt;li&gt;Image manipulation (mostly what &lt;em&gt;not&lt;/em&gt; to do)&lt;/li&gt;
&lt;li&gt;Importance and longevity of simplicity&lt;/li&gt;
&lt;li&gt;KISS&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jxnblk.com/principles/"&gt;Principles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/design-for-devs</guid><pubDate>Tue, 02 Aug 2016 00:00:00 -0700</pubDate></item><item><title>Three Quick Tips for Fresh Bootcamp Grads</title><link>https://zacanger.com/blog/posts/three-quick-tips</link><description>&lt;p&gt;This was originally posted
&lt;a href="https://github.com/lukeschunk/Notebook/blob/master/DailyNotes/Three_Quick_Tips.md"&gt;here&lt;/a&gt;
by &lt;a href="https://twitter.com/LukeSchunk"&gt;Luke Schunk&lt;/a&gt;, but I wanted to repost
because there's some good stuff in here, and because he doesn't actually,
like, share links to his notes.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id="three-quick-tips-for-succeeding-at-a-bootcamp"&gt;Three Quick Tips for Succeeding at A Bootcamp&lt;/h2&gt;
&lt;p&gt;I recently graduated from DevMountain, a 12-week immersive web development
bootcamp with campuses in Provo, Salt Lake, and Dallas. I had an
overwhelmingly positive experience, and I landed a great job soon after
graduation. So for me, the bootcamp was a good choice. I've noticed this
disparity, though, between people who attend bootcamps and have a positive
experience, and people who have a negative one. Oftentimes this negativity is
caused by inability to find a job after finishing up a bootcamp.&lt;/p&gt;
&lt;p&gt;Here are three tips to help you end up in the column of success stories.&lt;/p&gt;
&lt;h3 id="enjoy-what-you-do"&gt;Enjoy What You Do&lt;/h3&gt;
&lt;p&gt;Perhaps this sounds obvious, but I was surprised about how many people signed
up to go to a bootcamp without having any idea of whether or not they liked
programming. Some people are lured in by the prospects of landing a shiny new
job, and I get that. It's a tempting idea. But, if you don't enjoy what you're
doing, it's going to be very hard to succeed. Even if you can get through the
bootcamp and land a job, why would you want to start a career doing something
you don't enjoy? I spent several months teaching myself to code before going
to the bootcamp, so by the time the first day of class came around, I already
had a healthy enjoyment for programming.&lt;/p&gt;
&lt;h3 id="set-yourself-apart"&gt;Set Yourself Apart&lt;/h3&gt;
&lt;p&gt;In a nutshell, the way I landed my job was by learning and doing something
that almost nobody in my cohort did. I learned ReactJS, which was not taught
heavily as curriculum at the time I attended DevMountain. Really diving into
React on my own enabled me to contribute to some open source components at MX
(a startup in Utah). When I applied for the apprenticeship at MX, they
received a slew of other talented applicants, but I was able to land the job.
This was largely due to the fact that they had a rapport with me via
back-and-forth communication in pull requests, and my open source
contributions gave them confidence I could contribute to their codebase. There
are a lot of ways to set yourself apart - learn something different, build
something different, contribute to open source, etc. Find something that
interests you and dive in.&lt;/p&gt;
&lt;h3 id="make-connections"&gt;Make Connections&lt;/h3&gt;
&lt;p&gt;I prefer the phrase make-connections over 'network'. I hate the idea of
business-type-people mingling over cocktails and that's what I used to think
of when I heard the word network. What I've found though, is making
connections doesn't have to be uncomfortable. Twitter can be an extremely
useful tool for chatting with prominent developers in your area, and you can
also ask them an occasional question. So not only can you make connections and
form relationships, but also you can get some help from experts in the field.
Forming relationships on twitter enabled me to speak at my first meetup.&lt;/p&gt;
&lt;p&gt;Twitter isn't the only way to have success with this. I've connected with
people over linkedin and in person as well. Find what works for you. One last
tip on this - it's a lot easier to network when you &lt;em&gt;aren't&lt;/em&gt; desperate for a
job. When you reach out to someone while you're looking for a job, no matter
how well your intentions are, it might come across like you're looking for a
handout. I addressed this by networking very early in the bootcamp, so the
pressure of finding a job was lifted.&lt;/p&gt;
&lt;p&gt;This isn't a ground breaking list of tips, but I was surprised to see people
who failed to do one or multiple of these things. Give it a go, and I wish you
the best of luck in your new journey as a developer!&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/three-quick-tips</guid><pubDate>Fri, 24 Jun 2016 00:00:00 -0700</pubDate></item><item><title>A Tip</title><link>https://zacanger.com/blog/posts/a-tip</link><description>&lt;p&gt;I have, like, an actual kind of tip, for new-ish developers.&lt;/p&gt;
&lt;p&gt;It's pretty simple. Shouldn't be too hard to grasp, maybe a little harder to
implement.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Have confidence in your code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you don't have confidence in your code, then try this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write code in which you have confience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It really sucks to have to walk someone through your code when you're not
sure it's even doing the things it's supposed to do, or when you &lt;em&gt;are&lt;/em&gt; sure
it's doing the right things but doing them in a really gross kind of way.&lt;/p&gt;
&lt;p&gt;I think this is something everyone struggles with. It's really easy to copy
and paste stuff from StackOverflow, and everyone does it for a while. I still
do it sometimes, though usually with a lot of testing and reading before
actually running that code.&lt;/p&gt;
&lt;p&gt;It's really easy, as a new dev, to say "Well, I don't know how to do that thing,
can you just show me?" And that's okay, but it's a lot more okay to say "Hey,
I spent an hour with the docs, here's my implementation, here's the stack trace
and I couldn't find anything helpful on the source's issues or SO, do you have
any ideas?"&lt;/p&gt;
&lt;p&gt;It takes a while to write code that you don't hate, but usually even someone
who's been programming for a few months knows what good code looks like. It's
concise, readable, logical, and consistent. It doesn't make you cringe.&lt;/p&gt;
&lt;p&gt;I'm not really very good at writing code and feeling great about it. When it
comes to, say, raw Node or a Bash script, I'm usually better with these things
than anyone I know on a personal level, and have no problem taking charge and
just doing things. But when it comes to the things I actually do every day
(which right now means React, Koa, AWS stuff, Docker, trying to read C#, and
Sass, mostly) I know I'm not that great. Knowing that I'm not that great means
I take probably twice as long as I would to get anything done as I would if I
was the best at that thing in the room, because I know people who know more
than I do will be looking at my code and will need to fix it.&lt;/p&gt;
&lt;p&gt;That's not a &lt;strong&gt;bad&lt;/strong&gt; thing, but it's not a good thing either. It means I'm
programming without confidence, when I'm writing React or Sass. And I'm not
even &lt;em&gt;bad&lt;/em&gt; at either, I just have no confidence when writing these things
on a project with people who are better at them than I am. That's something
that I should get over.&lt;/p&gt;
&lt;p&gt;Anyway, I meant to write this post on the train and post it when I got home,
but I ended up standing on the train so it's split, from while waiting for the
train 'til 10:30 PM while sitting at DevMountain, so it's probably a little
disjointed.&lt;/p&gt;
&lt;p&gt;The point here is, if you have confidence in what you're doing, you'll get
stuff done quicker and better, and if you don't have confidence in what you're
doing, make it so that you can.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/a-tip</guid><pubDate>Fri, 10 Jun 2016 00:00:00 -0700</pubDate></item><item><title>How To Be Slightly More Productive</title><link>https://zacanger.com/blog/posts/how-to-be-slightly-more-productive</link><description>&lt;p&gt;One of my pet peeves is seeing people who make software for a living doing
things in incredibly slow/unproductive ways. I know everyone has their own
ways of being awesome, and most of those ways are much more awesome ways than
the ways in which I am okay at things, but still, there are better ways, and
most developers I've seen just have &lt;em&gt;no&lt;/em&gt; idea how much time they waste.&lt;/p&gt;
&lt;p&gt;So here are just some tiny little tips. None of these are big news, none
are esoteric, none are risky, all require a little bit of work but make things
a lot faster in a very short period of time.&lt;/p&gt;
&lt;h2 id="bash-things"&gt;Bash things&lt;/h2&gt;
&lt;p&gt;you can use zsh, and that's a thing, and it doesn't suck, okay, but it pays
to be good at Bash. Bash is everywhere. It's the default shell on just about
every system. Zsh gives you nice things, but you can get all the same nice
things in Bash with just a tiny bit of work.&lt;/p&gt;
&lt;p&gt;The number one most useful thing to do with Bash is aliases, I think.
It's generally recommended that you use functions if you can, but there's
really no harm in using aliases. Try these out, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alias ns='npm start'
alias nt='npm test'
alias nis='npm i -S'
alias nid='npm i -D'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Throw these at the bottom of your &lt;code&gt;~/.bashrc&lt;/code&gt; (or &lt;code&gt;~/.bash_profile&lt;/code&gt; on a Mac).&lt;/p&gt;
&lt;h2 id="npm"&gt;npm&lt;/h2&gt;
&lt;p&gt;For that matter, there's the aliases up there... npm has a bunch built-in.
For example, you never need to type out &lt;code&gt;npm install --save-dev&lt;/code&gt;
-- just do &lt;code&gt;npm i -S&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;npm gives you a million things. Just read the docs sometime. or the help screens.&lt;/p&gt;
&lt;h2 id="the-terminal"&gt;The Terminal&lt;/h2&gt;
&lt;p&gt;Use readline stuff. ctrl-w, ctrl-a, ctrl-e, even just those, just use them. ctrl-arrow
(or option-arrow on Mac) to get around between words. Use these things. Or check
out vi-mode.&lt;/p&gt;
&lt;p&gt;Set your prompt up to tell you nice stuff. I recommend using liquidprompt
(&lt;code&gt;apt-get install -y liquidprompt&lt;/code&gt; or &lt;code&gt;brew install liquidprompt&lt;/code&gt;), but you can
also do all these things manually (check
&lt;a href="https://github.com/zacanger/z/blob/master/.bash/prompt.sh"&gt;my dotfiles&lt;/a&gt; for
examples).&lt;/p&gt;
&lt;p&gt;Pick a bookmarking system and stick with it. &lt;a href="https://github.com/wting/autojump"&gt;There&lt;/a&gt;
&lt;a href="https://github.com/rupa/z"&gt;are&lt;/a&gt; a &lt;a href="https://github.com/shyiko/commacd"&gt;bunch&lt;/a&gt; of them
out there (many many more, just search). or export aliases to move to places. Or you
can use &lt;a href="https://github.com/zacanger/z/blob/master/.bash/functions/g.sh"&gt;mine&lt;/a&gt;
if you'd like.&lt;/p&gt;
&lt;h2 id="markdown"&gt;Markdown&lt;/h2&gt;
&lt;p&gt;If you don't use it, use it. If you still click around in Microsoft Word or Google Docs,
goddamn, take two minutes to learn the easiest and most popular plain-to-rich-text
lightweight-markup authoring format out there.&lt;/p&gt;
&lt;h2 id="your-editor"&gt;Your Editor&lt;/h2&gt;
&lt;p&gt;I don't care what your editor is. I really don't. I know just enough about lisp
to not even hate Emacs users. I do dislike VS Code, but mostly because of the
idiotic and transparent licensing scheme. But the built-in debugger isn't bad
(you can get all the same things from other tools, but it is better than the
ones that you can get for most other editors for Node).&lt;/p&gt;
&lt;p&gt;Whatever your editor is, take a week to learn it really well. In my case, finally
just spending some time getting &lt;em&gt;fluid&lt;/em&gt; with Vim has made a huge difference.
I no longer have any other editors installed (and I tried a lot of them! I loved
&lt;a href="http://lighttable.com/"&gt;LightTable&lt;/a&gt; and &lt;a href="http://foicica.com/textadept/"&gt;Textadept&lt;/a&gt;
especially, and also really liked Atom (but it's &lt;em&gt;slow&lt;/em&gt;); Brackets was a waste of
my time, Sublime was okay but nonfree and there's Textadept so whatever, see above
for notes on VS code; actual IDEs I tend to avoid because they're just overwhelmingly
large and in the way all the time, to me). That doesn't mean vim's the &lt;em&gt;best&lt;/em&gt; editor
(though it totally is), it just means it's the one I decided I wanted use, and it's
the absolute best tool that I have now because I'm pretty quick with it.&lt;/p&gt;
&lt;p&gt;Even if you use VS code or Brackets, just take the time to learn your editor
well. learn its plugin/extension/ whatever system, find or write a theme that
makes things really easy on you, check out &lt;a href="https://medium.com/@evnbr/coding-in-color-3a6db2743a1e#.5rffb0gto"&gt;semantic
highlighting&lt;/a&gt;
and give that a shot for a week, find a way to open a terminal in your editor
(because you DO need that) if it's a graphical editor, learn keybinds, learn
configs, and make it work for you. That sounds like a lot of work put into
something that's not directly &lt;strong&gt;work&lt;/strong&gt;, but it's work invested in yourself being
better at using your tools.&lt;/p&gt;
&lt;p&gt;Laurie Voss, the COO of npm, said in a &lt;a href="https://www.youtube.com/watch?v=NWo-RIHiEJ4"&gt;talk&lt;/a&gt;
that one of the most important things you can do is be good at your editor. He's
right.&lt;/p&gt;
&lt;h2 id="use-git"&gt;Use Git&lt;/h2&gt;
&lt;p&gt;This should be obvious. but, I mean, really use it. Use it enough that you
learn how to use a gitconfig, templates, etc., and try out lots of different
extensions and wrappers for git (like hub, legit, ghcli, etc.). Do stuff with
Git. Get really comfortable with Git. It's important. Other version control also
matters sometimes in some businesses but really really really spend some time
learning Git.&lt;/p&gt;
&lt;h2 id="configs"&gt;Configs&lt;/h2&gt;
&lt;p&gt;(&lt;a href="https://github.com/zacanger/z"&gt;like these&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Organize yours. Store them somewhere, like in a repo. Because when your current
computer dies (and it will), it'll take you weeks to get things feeling decent
if you have to recreate everything manually.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/how-to-be-slightly-more-productive</guid><pubDate>Tue, 31 May 2016 00:00:00 -0700</pubDate></item><item><title>React Performance</title><link>https://zacanger.com/blog/posts/react-performance</link><description>&lt;ul&gt;
&lt;li&gt;Take a baseline measurement.&lt;ul&gt;
&lt;li&gt;There's no way to measure improvements without something to measure against.&lt;/li&gt;
&lt;li&gt;Chrome's Timeline thing works well for this.&lt;/li&gt;
&lt;li&gt;Try measuring total elapsed time between the initial paint and the final rendering.&lt;/li&gt;
&lt;li&gt;Make sure the 'Paint' and 'Screenshot' options are checked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Obviously the first big one is to just make your production code production code.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NODE_ENV=production&lt;/code&gt;, &lt;code&gt;webpack -p&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;You can do something like this in your Webpack config:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;// stuff
plugins : [
  new webpack.DefinePlugin({
    'process.env.NODE_ENV' : JSON.stringify('production')
  })
, new webpack.optimize.UglifyJsPlugin({
    compress : {
      warnings : false
    }
  })
]
// stuff
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Reduce calls to &lt;code&gt;React.createClass&lt;/code&gt; (if we're still doing that).&lt;ul&gt;
&lt;li&gt;Try using React Inline Elements for this.&lt;/li&gt;
&lt;li&gt;We could configure Babel for this like so (this example would go directly in your package.json):&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;babel&amp;quot;: { &amp;quot;env&amp;quot;: { &amp;quot;production&amp;quot;: { &amp;quot;plugins&amp;quot;: [
  &amp;quot;transform-react-constant-elements&amp;quot;,
  &amp;quot;transform-react-inline-elements&amp;quot;
] } } }
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Keep checking against the initial benchmark.&lt;/li&gt;
&lt;li&gt;'babel-plugin-transform-react-remove-prop-types' might also be useful. It removes unwanted/unused React.PropTypes.&lt;/li&gt;
&lt;li&gt;There's also 'babel-preset-react-optimize'&lt;/li&gt;
&lt;/ul&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/react-performance</guid><pubDate>Sat, 14 May 2016 00:00:00 -0700</pubDate></item><item><title>Solving programming problems</title><link>https://zacanger.com/blog/posts/solving-programming-problems</link><description>&lt;p&gt;Basic steps of solving programming problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the input.&lt;/li&gt;
&lt;li&gt;Find the output.&lt;/li&gt;
&lt;li&gt;Figure out how you need to transform the input to the output &lt;em&gt;in plain English&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Translate this into your chosen programming language.&lt;/li&gt;
&lt;li&gt;Run the code (in your head, or on a machine).&lt;/li&gt;
&lt;li&gt;If the output isn't what you expected, start over with step three.&lt;/li&gt;
&lt;/ol&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/solving-programming-problems</guid><pubDate>Wed, 10 Feb 2016 00:00:00 -0700</pubDate></item><item><title>about pages</title><link>https://zacanger.com/blog/posts/about-pages</link><description>&lt;p&gt;about pages&lt;/p&gt;
&lt;p&gt;Why do these pages even exist?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They provide visitors with the essential facts needed to interact with
  you/the company&lt;/li&gt;
&lt;li&gt;Give them the context for the information they'll find on the rest of the
  site&lt;/li&gt;
&lt;li&gt;Set yourself/the company apart from others like you/it&lt;/li&gt;
&lt;li&gt;Give visitors a reason (or as many reasons as possible) to do whatever we're
  trying to do (call a number, sign up for something, buy something, whatever)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don't be super generic, bland, grey, and corporate-speaky. People want real,
meaningful information, not company statistics.&lt;/p&gt;
&lt;p&gt;Don't have a sales-y about page. No one wants to hear that you're a
'world-class' whatever, or that you're committed to such and such a thing
where you provide so and so such a best whatever. Just get to the point.&lt;/p&gt;
&lt;p&gt;Skip the legal. That's for a 'legal' page.&lt;/p&gt;
&lt;p&gt;Design the content of this part of your website the same way you should be
designging &lt;em&gt;every&lt;/em&gt; part of your site: figure out what your users need, and
provide it. Use quotes. Use good photos. Use a 'natural, friendly, confident
writing voice' (Erin Kissane, alistapart.com, 2006). Have a personality. But
don't make it overwhelming.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/about-pages</guid><pubDate>Thu, 28 Jan 2016 00:00:00 -0700</pubDate></item><item><title>Effective Websites</title><link>https://zacanger.com/blog/posts/effective-websites</link><description>&lt;p&gt;Some traits of effective websites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Designed around the objectives of the &lt;em&gt;users&lt;/em&gt;, not the designers or developers&lt;ul&gt;
&lt;li&gt;(Also not necessarily the person/company the website represents!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Refined&lt;/em&gt; feel&lt;ul&gt;
&lt;li&gt;This is really vague, but the site should &lt;em&gt;feel&lt;/em&gt; clean and elegant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;USER FRIENDLINESS ABOVE ALL ELSE.&lt;ul&gt;
&lt;li&gt;Easy to navigate&lt;/li&gt;
&lt;li&gt;Stress-free&lt;/li&gt;
&lt;li&gt;Understandable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Easy to keep current&lt;ul&gt;
&lt;li&gt;This means making it extraordinarily simple for clients to add/change content&lt;/li&gt;
&lt;li&gt;This also means keeping everything both &lt;em&gt;modular&lt;/em&gt; and &lt;em&gt;separated&lt;/em&gt;, so things like assets, styles, or entire sections can be swapped out easily.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A11Y. Just do it.&lt;/li&gt;
&lt;li&gt;i18n, and (if needed) i10n.&lt;/li&gt;
&lt;/ul&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/effective-websites</guid><pubDate>Sun, 24 Jan 2016 00:00:00 -0700</pubDate></item><item><title>on blogging</title><link>https://zacanger.com/blog/posts/on-blogging</link><description>&lt;p&gt;this is, i think, the first post of this year. happy 2016! i'm not blogging a
whole lot, but really just trying to kill a few minute while my brain rests.
lately i'm working a lot in new technologies that i've never touched
before--react, which i still find irksome (though as before, i do &lt;em&gt;get&lt;/em&gt; it),
coffeescript (to play with the atom editor), firebase (still more magicc than
really cool, but it does what it does, and we need what it does, so i'm using
it), and some other new things.  but i wanted to take a minute off to talk about
writing.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;i'm not a writer. i'm okay with words, and i know a lot of them, and i use them,
frequently. usually pretty well, i think. i don't usually know what i'm going to
be saying before i start writing, though. half the time i'm taking notes on
something, and realise later on that my notes might be useful to someone, at
some point, maybe a little bit. you don't need to know what you're trying to
achieve when you start writing, &lt;em&gt;especially&lt;/em&gt; if we're talking about a blog post.
you don't need an outline, a muse, a spark of inpsiration, an addiction, a
message, a mission, or even an attention span. it's okay to ramble. it's okay to
not know what you're doing. a lot of the time, writing things down is a really
good way to figure that bit out. i had no idea how i felt about certain
technologies until i started trying to explain, in words understandable to other
people, how i felt about them, and why. things make a lot more sense when you
can read your own thoughts, see them in front of you, and see which ones make
zero sense.&lt;/p&gt;
&lt;p&gt;blogs are a really great way to learn things. they don't necessarily have to
take the form of tutorials for that. think about the last time you took notes
on something while trying to learn it. could those notes be helpful to someone
else? why? is it because you're an expert on the subject? probably not. it's
probably because someone could have a chance to see &lt;em&gt;how&lt;/em&gt; you learned
something, how you came to understand it. that's pretty cool. words are all
about describing things. kind of why the exist, and stuff. finding the right
words to accurately, thoroughly, and &lt;em&gt;concisely&lt;/em&gt; describe something is a
powerful skill. if you can do that, you should, even if you don't think you
have anything worth talking about. let people learn from your notes.&lt;/p&gt;
&lt;p&gt;i'm gonna go ahead and just put a nice quote in, here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;language accelerates learning and creation by permitting communcation and
coordination. a new idea can be spread quickly if someone can explain it and
communicate it to others before they have to discover it themselves. but the
chief advantage of language is not communication but autogeneration.
language is a trick that allows the mind to question itself; a magic mirror
that reveals to the mind what the mind thinks; a handle that turns a mind
into a tool. with a grip on the slippery, aimless activity of self-awareness
and self-referene, language can harness a mind into a fountain of new ideas.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;well, that's pretty cool.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/on-blogging</guid><pubDate>Fri, 08 Jan 2016 00:00:00 -0700</pubDate></item><item><title>Express vs Koa vs Hapi</title><link>https://zacanger.com/blog/posts/express-vs-koa-vs-hapi</link><description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this post is outdated. Koa 2 saw a nearly complete API change, and
Express and Hapi may have also changed, since I wrote this. I'm leaving it up
anyway, as is, because it's seen a lot of traffic over the years. I haven't
checked in on Express or Hapi in a long while, but here's an updated version of
the Koa example from the original post:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;import Koa from 'koa'
import Router from '@koa/router'

const app = new Koa()
const router = new Router()
const port = 3000

router.get('/api/items', (ctx) =&amp;gt; { ctx.body = 'Get' })
router.get('/api/items/:id', (ctx) =&amp;gt; { ctx.body = `Get id ${ctx.params.id}` })
router.put('/api/items/:id', (ctx) =&amp;gt; { ctx.body = `Put ${id}` })
router.delete('/api/items/:id', (ctx) =&amp;gt; ctx.body = 'Deleted')
router.get('(.*)', (ctx) =&amp;gt; { ctx.status = 404; ctx.body = 'Are you lost?' })

app.use(router.routes())
app.listen(port, () =&amp;gt; { console.log(`Listening on ${port}`) })
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;Quick little comparison of the three. Express is clearly the most commonly
used, but I'm inclined to jump to Koa whenever I can. The simple fact that the
guy who initially started Express passed that off to a company to maintain and
instead works on Koa, now (which he also started), says to me that maybe Koa's
the right way to go.&lt;/p&gt;
&lt;p&gt;Okay, so all three are Sinatra-alikes for Node.&lt;/p&gt;
&lt;p&gt;Express was started in 2009, and is now maintained by StrongLoop, the Node API
company.&lt;/p&gt;
&lt;p&gt;Koa was started in 2013, and rather than a 'server-side web development
framework build on node.js' (that's Express), Koa is 'expressive middleware
for node.js using generators ... to make writing web applications and REST
APIs more enjoyable.' It's super small, too--around 400 SLOC.&lt;/p&gt;
&lt;p&gt;Hapi was started in 2011, and was originally built on Express. The original
author still maintains it, backed by the original company (...Wal...Mart...).
It's no longer Express-based, because 'configuration is better than code ...
business logic must be isolated from the transport layer...', so, there's
that.&lt;/p&gt;
&lt;p&gt;Making things happen:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;// express
const express = require('express')
const app = express()
const port = 3000
// etc, we already know all this
app.listen(port) // http.createServer() basically

// koa
const koa = require('koa')
const app = koa()
const port = 3000
const server = app.listen(port, () =&amp;gt; {
  console.log('listening on ' + port)
}) // well, THAT looks super familiar, huh?

//hapi
const Hapi = require('hapi')
const server = new Hapi.Server()
server.connection({ port: 3000 })
server.start(() =&amp;gt; {
  console.log('server over yonder on ', server.info.uri)
}) // that takes a weee bit more work, there.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;routing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;app.get('/', function(req, res){res.send('hi')})

app.use(function *() {this.body = 'hi'}) // so, koa uses es6 generators.
// the context (this) is node's `request` and `response`, wrapped up
// `this.body` can be string, buffer, stream, object, or null

server.route({
  method : 'GET',
  path: '/',
  handler: (request, reply) =&amp;gt; {
    reply('hi') // holy boilerplate, batman
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;How about a little API practice?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const express = require('express')
const app = express()
const router = express.Router()

router.route('/items')
  .get((req, res, next) =&amp;gt; {res.send('get')})
  .post((req, res, next) =&amp;gt; {res.send('post')})

router.route('/items/:id')
  .get((req, res, next) =&amp;gt; {res.send('get ' + req.params.id)})
  .put((req, res, next) =&amp;gt; {res.send('put ' + req.params.id)})
  .delete((req, res, next) =&amp;gt; {res.send('delete ' + req.params.id)})

app.use('/api', router)
app.get('/', (req, res) =&amp;gt; {res.send('hi')})

const server = app.listen(3000, () =&amp;gt; {console.log('listening')})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing new there.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const koa = require('koa')
const route = require('koa-route')
const app = koa()

app.use(route.get('/api/items', function*(){this.body = 'Get'}))
app.use(route.get('/api/items/:id', function*(id){this.body = 'Get id: ' + id}
app.use(route.put('/api/items/:id', function*(id){this.body = 'put ' + id}))
app.use(route.delete('/api/items/:id', function*(id){this.body = 'Delete Id '}))
app.use(function*(){this.body = 'are you lost?'})

const server = app.listen(3000, () =&amp;gt; {console.log 'listening on 3000'})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, that's pretty nice. Can you see why I like Koa?&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const Hapi = require('hapi')
const server = new Hapi.Server(3000)

server.route([
  {
    method: 'GET',
    path: 'api/items',
    handlder: (request, reply) =&amp;gt; {
      reply('get item id ')
    }
  },
  {
    method: 'GET',
    path   : '/api/items/{id},'
    handler: (request, reply) =&amp;gt; {
      reply('get item id ' + request.params.id)
    } // same thing here for all the other methods
  }
])

server.start(() =&amp;gt; {console.log 'listening on 3000'})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the Hapi version of things definitely takes a lot more code, but
that's also intentional. (Remember, Hapi's meant to be easily changed for any
team and/or project, so a lot of things are very manual; you also wouldn't
usually use Hapi for small projects like in the examples.) Errors in Hapi are
also a little more helpful, since it goes ahead and automatically provides
HTTP error codes for you... in JSON, no less.&lt;/p&gt;
&lt;p&gt;So, thoughts:&lt;/p&gt;
&lt;p&gt;Express is the standard. Everyone knows it, because it's been around forever.
It's very mature, stable, got a lot of users and a lot of backers and
contributors. It's got a nice little built-in router. It does &lt;em&gt;not&lt;/em&gt; have error
handling, it's pretty damn opinionated, it's rather big these days, and
there's so much out there &lt;em&gt;for&lt;/em&gt; it that it's easy to get lost in all the
middleware and options and whatnot.&lt;/p&gt;
&lt;p&gt;Koa's very small, and so, it's very flexible. It uses ES6 (Hapi does, too,
&lt;em&gt;now&lt;/em&gt;, but that was a recent switch for them, I think), which is really nice.
Because it's so small, it's a lot easier to just go ahead and write your own
middleware. Like Express, though, that can lead to a decision problem.&lt;/p&gt;
&lt;p&gt;Hapi definitely has their corporate backing game on point. That's great for
them, because that means it &lt;em&gt;has&lt;/em&gt; to be stable. It's very consistent and
reusable. It's also a whole goddamn lot of code to write, compared to the
other two. If we're working on a large, complex app, maybe that'd be worth it,
but for smaller apps (like, probably, most of the ones any of us will ever
write on our own or in small teams), it's just too much. If you're doing
something really big, something like... oh, I dunno, some giant retailer,
let's call them 'Mal Wart,' if you've got to run this huge multinational
enterprise system, then maybe Hapi actually would be really great for you.&lt;/p&gt;
&lt;p&gt;I think it's probably pretty easy to see why I favour Koa. For what it's
worth, just as an example, here's what it takes to get a server running in raw
Node:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const http = require('http')
const url = require('url')
const path = require('path')
const fs = require('fs')
const port = process.argv[2] || 4444

http.createServer((request, response) =&amp;gt; {
  const uri = url.parse(request.url).pathname
  const filename = path.join(process.cwd(), uri)
  fs.exists(filename, (exists) =&amp;gt; {
    if (!exists) {
      response.writeHead(404, {'Content-Type': 'text/plain'})
      response.write('404 Not Found\n')
      response.end()
      return
    }
    if (fs.statSync(filename).isDirectory()) filename += 'index.html'
    fs.readFile(filename, 'binary', (err, file) =&amp;gt; {
      if (err) {
        response.writeHead(500, {'Content-Type': 'text/plain'})
        response.write(err + '\n')
        response.end()
        return
      }
      response.writeHead(200)
      response.write(file, 'binary')
      response.end()
    })
  })
}).listen(parseInt(port, 10), () =&amp;gt; {
  console.log('server up on ' + port)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No options. No nothing. If your file you want to serve isn't called
'index.html,' that kinda sucks for you. I keep this around in my &lt;code&gt;~/bin&lt;/code&gt; (with
&lt;code&gt;#! /usr/bin/env node&lt;/code&gt; at the top, executable) for running super quick servers
when I'm just playing with things. The point of showing that bit, though, was
to emphasise just how fantastic it is to even have things like Express. And
keep in mind, there are more than just these three options. You've got
Restify, LoopBack, Meteor, a lot of things built on Express (like Sails), and
a load of things built on some combination of Socket.io and one middleware
framework or another. Go play with options, they're all fun.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/express-vs-koa-vs-hapi</guid><pubDate>Wed, 30 Dec 2015 00:00:00 -0700</pubDate></item><item><title>Switch To Linux! (Part Two)</title><link>https://zacanger.com/blog/posts/switch-to-linux-part-two</link><description>&lt;p&gt;So, Mac friends, what's up? How's it going? All good with you? Good, good I'm
glad. Look. Maybe we should talk.&lt;/p&gt;
&lt;p&gt;I know you like your iPro Airpod. And it's very nice, it is. It's shiny and
fast and does things, which are really the top requirements for any computing
device, I think. But is it really what you want to be using? Look, if it is,
that's cool. But have you considered some other options? There's a world
outside of Cupertino. A whole, wide, incredible world of technology that
presents broadly varied experiences that don't all follow Apple's guidelines
on everything.&lt;/p&gt;
&lt;p&gt;For example, your computer, your OS, what it's based on... that's Unix,
actually. BSD-derived--and POSIX/Single Unix Specification certified. &lt;a href="https://opensource.apple.com/source/xnu/"&gt;Your
kernel&lt;/a&gt; is XNU, which stands for 'X
is Not Unix.' But it totally is, actually. You're closer than you know to
having an open system, but right now you're limited by the Appley-ness of your
Apple. If the idea of installing software that doesn't come from the App Store
or some other official source is alien to you, that's okay. I'm here to tell
you, it's an option. And you don't even need to make a switch all at once.
Since OS X has been POSIX-compliant since Leopard, you can actually get a lot
of sofware that's made for other *nix systems running just fine on your
Macbook. There are some third-party package mangers out there that come highly
recommended (I haven't tried them myself; I haven't owned a Mac since around
OS 8). Among them are &lt;a href="http://www.pkgsrc.org/"&gt;pkgsrc&lt;/a&gt;,
&lt;a href="http://www.macports.org/"&gt;MacPorts&lt;/a&gt;, &lt;a href="http://www.macports.org/"&gt;Homebrew&lt;/a&gt;,
and &lt;a href="http://www.finkproject.org/"&gt;Fink&lt;/a&gt; (which, as a
&lt;a href="http://debian.org"&gt;Debian&lt;/a&gt; user, I'd recommend--Fink uses our dpkg/APT
system!).&lt;/p&gt;
&lt;p&gt;These things are a start. If you're happy with everything about your system
and options now, there's really no need to change, and you could probably have
stopped reading this after the first sentence. But if you've ever been a
little irked at the limited selection of software available to you, or how
everything on every Mac looks exactly the same, or how little actual control
you have over your interface, Linux might be a good option for you. This goes
for developers as well. I know Macs are big in some development communities,
especially with web folks. From what I understand, Ruby conferences are
indistinguishable from Apple conventions. Javascript hackers are also
especially keen on Macs, though that can cause some issues with Apple Webkit
vs The Rest Of The World, etc. Linux might not have the brand power of Apple,
but we've got compatibility coming out our ears, and we're nearly swimming in
customization options. Instead of, say, &lt;a href="https://www.npmjs.com/package/linux"&gt;using Javascript to install Linux on
your Mac&lt;/a&gt;, why not give Linux a try...
for real? &lt;a href="http://ubuntu.org"&gt;Ubuntu&lt;/a&gt; might be a good starting point for
you--they're big on unified interfaces and styling, over there, and while it's
not Aqua, and they're not too keen on Helvetica (or San Francisco...), it's
just as uniform and integrated-feeling as OS X (and probably a bit more fun).&lt;/p&gt;
&lt;p&gt;I'm not going to go all out with this one; I could talk for months about the
reasons folks should consider Linux (or a BSD), and especially about the
reasons NOT to use Apple products, but that's not a topic for here and now.&lt;/p&gt;
&lt;p&gt;Thanks so much for reading! If you missed it, &lt;a href="https://notes.pinboard.in/u:zacanger/1519026e3458629771c8"&gt;here's the first part of this
note&lt;/a&gt;, where I talk
about Windows a bit. This was as an addition to &lt;a href="https://medium.com/@steven_ovadia/opening-linux-even-further-13d2d6289ae0"&gt;this
post&lt;/a&gt;
by &lt;a href="http://mylinuxrig.com"&gt;this guy&lt;/a&gt;, who is writing &lt;a href="https://manning.com/books/learn-linux/in-a-month-of-lunches"&gt;this
book&lt;/a&gt;; if you're
thinking about trying Linux, it's definitely worth checking that out.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/switch-to-linux-part-two</guid><pubDate>Sun, 27 Sep 2015 00:00:00 -0700</pubDate></item><item><title>Switch To Linux (Part One)</title><link>https://zacanger.com/blog/posts/switch-to-linux-part-one</link><description>&lt;p&gt;So, I enjoyed &lt;a href="https://medium.com/@steven_ovadia/opening-linux-even-further-13d2d6289ae0"&gt;this
post&lt;/a&gt;
from Steven Ovadia, the fellow who maintains &lt;a href="http://www.mylinuxrig.com/"&gt;My Linux
Rig&lt;/a&gt; (which, by the way, is a really great blog,
and you should definitely follow it--it's kind of like &lt;a href="https://usesthis.com/"&gt;The
Setup&lt;/a&gt;, but without all the... ah..
&lt;a href="https://upload.wikimedia.org/wikipedia/commons/f/fa/Apple_logo_black.svg"&gt;fruit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have a couple of things I'd like to add (Steven touched on these, but some
specifics here might help win you over, if you're currently a user of a
non-free OS).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You’re technically-inclined, but might not have a technical job. You like to
tweak your interfaces, though.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;THIS. Is this not a great way to sum up most Windows power users? The sort of
folk who maybe don't &lt;em&gt;hate&lt;/em&gt; Windows 8 (I know 10's the big thing these days,
but I haven't even looked at a screenshot yet...) but definitely preferred 7
and have fond memories of XP. People who have, at some point, thought about
using &lt;a href="http://www.litestep.net/"&gt;LiteStep&lt;/a&gt;, or monitored with
&lt;a href="http://www.samurize.com/modules/news/"&gt;Samurize&lt;/a&gt; or
&lt;a href="http://rainmeter.net/"&gt;Rainmeter&lt;/a&gt;, or ever spent some time on
Microsoft-related tags on &lt;a href="http://customize.org"&gt;Customize.org&lt;/a&gt;, or follow
&lt;a href="http://www.askvg.com/"&gt;blogs full of tech tips&lt;/a&gt; mostly related to your
operating system. This is about you, and Linux is where you belong. You know
how much trouble it was to get Visual Styles figured out when they changed
that, and then to disable some Aero bits but retain some theme options, and to
get a regular old start menu back in 8? Isn't it frustrating that you have to
actually &lt;a href="http://www.sevenforums.com/tutorials/1911-take-ownership-shortcut.html"&gt;install other
software&lt;/a&gt;
just to be able to delete, modify or even &lt;strong&gt;see&lt;/strong&gt; some files on your computer?
Chances are you've spent a good bit of time doing things to improve how
Windows works for you, and that's great. You're definitely not alone;
&lt;a href="http://www.deviantart.com/browse/all/?q=windows+7+themes"&gt;DeviantArt is FULL&lt;/a&gt;
of like-minded people who do some really fantastic stuff with Windows--and
that's just graphical stuff! Getting into heavy system modification is a
really scary thing for a lot of Windows users.&lt;/p&gt;
&lt;p&gt;The thing is, there's no 'I REALLY shouldn't do this because Microsoft won't
like it' kind of feeling with Linux. No one's going to automatically install
broken hotfixes if you don't want them. No one's going snooping through your
computer to see if the most basic level of software came with a license
code--and no one's going to lock it down or power it off from a remote
location if you didn't pay them $40 for the OS (note: last time I bought
Windows, it was $40 for Windows 8 64-bit Pro; I have no idea what they charge
these days). If you want to change how things look, it's not just okay, it's
&lt;em&gt;easy&lt;/em&gt;. I mean, seriously. &lt;code&gt;sudo su&lt;/code&gt; and browse to &lt;code&gt;/usr/share/icons&lt;/code&gt;; put
some icons in. Boom. Icons. If you're using a DE (desktop environment), it's
picked them up and you'll see it in your settings. If you're using a WM
(window manager), it may depend on your WM or file browser (but this is
getting a bit complicated--we'll assume you're using a DE for the moment). But
either way, once icons are there, you don't have to manually select them per
item every time you want to change something--or every time you make a visual
change to something &lt;strong&gt;else&lt;/strong&gt;. That sounds like an absurdly simplified example,
but it serves as a good illustration of just how difficult basic things can be
on some systems.&lt;/p&gt;
&lt;p&gt;One other quick thing, which Windows users may find a bit shocking: we
configure things with plain text. Yeah. &lt;strong&gt;Plain. Text.&lt;/strong&gt; No funky weird files
you can't open in any editor known to man and have to install software from
shady people you met in an alley somewhere (shady internet people in a shady
internet alley, anyway) just to be able to read. What's even better is that
plain text can be simpler, faster, and better than Notepad. If you're a
&lt;a href="https://notepad-plus-plus.org/"&gt;Notepad++&lt;/a&gt; user, props. That's just about the
most useful bit of software I ever installed on Windows 8 (or 7). Take a
gander at all the &lt;a href="https://github.com/amix/vimrc"&gt;crazy stuff you can do&lt;/a&gt; with
arguably the most popular editor for Linux, &lt;a href="http://github.com/vim/vim"&gt;Vim&lt;/a&gt;.
Heck, you could just &lt;a href="http://cream.sourceforge.net/download.html"&gt;install Vim&lt;/a&gt;
right now. We won't even get into
&lt;a href="http://www.emacswiki.org/emacs/SiteMap"&gt;Emacs&lt;/a&gt;... that's like having an
entire extra operating system in your text editor. But back to configuration:
text files. I have, for example, some &lt;a href="https://github.com/zacanger/z"&gt;nifty configs of my
own&lt;/a&gt; that I keep synced between all my
devices--nothing too fancy, not nearly on the level of &lt;a href="https://github.com/paulirish/dotfiles"&gt;some very impressive
collections&lt;/a&gt;. Our text files can be
edited with just about anything, including fancy IDEs with plugins and
databases and such, and also including simple commands issued in a terminal
(or console); we store them in uniform, sane places like
&lt;code&gt;/home/yourUserName/.configurationFileForProgram&lt;/code&gt; and, for system files (all
users) &lt;code&gt;/etc/program.conf&lt;/code&gt; (sometimes that'll be split into multiple files per
program--we just put all those inside a folder and tack a '.d' onto the end of
the name, like &lt;code&gt;/etc/apt/sources.list.d/&lt;/code&gt;). There's no rule saying you &lt;em&gt;must&lt;/em&gt;
configure things with text, and &lt;a href="http://www.xfce.org/"&gt;my preferred DE&lt;/a&gt; has
&lt;a href="http://docs.xfce.org/xfce/xfce4-settings/start"&gt;quite a snazzy tool&lt;/a&gt; to make
things more user-friendly. If you give the plain-text option a try, though,
you may find yourself loving it!&lt;/p&gt;
&lt;p&gt;Okay, Mac friends. Don't think I've forgotten you. We'll call this post part
one of two; I've been wanting to get myself set up with a decent (and
self-hosted) static site/blog tool, and I think maybe writing actual
decent-length posts is a good enough reason to just sit down and find one I
like. To be continued.&lt;/p&gt;
&lt;p&gt;OH, before I forget, you should maybe &lt;a href="https://manning.com/books/learn-linux/in-a-month-of-lunches"&gt;check out the book that Steve's
writing&lt;/a&gt;; it's
also linked in &lt;a href="https://medium.com/@steven_ovadia/opening-linux-even-further-13d2d6289ae0"&gt;the original
post&lt;/a&gt;
that sparked this bit of blogging.&lt;/p&gt;</description><guid isPermaLink="false">https://zacanger.com/blog/posts/switch-to-linux-part-one</guid><pubDate>Sun, 27 Sep 2015 00:00:00 -0700</pubDate></item></channel></rss>