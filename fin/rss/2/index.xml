<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[angr]]></title><description><![CDATA[writings from zac anger]]></description><link>http://blog.zacanger.com/</link><generator>Ghost</generator><lastBuildDate>Tue, 14 Feb 2017 04:36:28 GMT</lastBuildDate><atom:link href="http://blog.zacanger.com/rss/index.xml" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[principles and tips]]></title><description><![CDATA[<p>I&#39;m not very experienced, and sometimes I&#39;m pretty sure I&#39;m not very good at
programming, but I have some principles I try to stick to that help, I think.
They&#39;re not complicated. Also some tips. These are all in no particular order.
And kind of stream-of-consciousness.</p>
<p>Have a changelog. This doesn&#39;t have to be something complicated. It can actually
be <em>really</em> simple. Here&#39;s a script that&#39;ll do this for you.</p>
<pre class="hljs"><code><span class="hljs-shebang">#!/usr/bin/env bash</span>
range=<span class="hljs-string">&quot;<span class="hljs-variable">${1:-origin..}</span>&quot;</span>
<span class="hljs-built_in">shift</span> <span class="hljs-number">1</span>
git <span class="hljs-built_in">log</span> \
  --no-merges \
   --format=<span class="hljs-string">&#39;%C(auto,green)* %s%C(auto,reset)%n%w(0,2,2)%+b&#39;</span> \
   --reverse <span class="hljs-string">&quot;<span class="hljs-variable">$range</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span></code></pre><p>Write tests. Even if they&#39;re not complex, thorough tests, write them. It&#39;s a
start.</p>
<p>If you change things and tests break, fix the tests. Try not to break the tests.
But if you do, and it&#39;s a necessary change, fix the tests to line up with how
things work now.</p>
<p>Don&#39;t decrease code coverage. This goes back to &#39;if you write a thing, write a
test for it.&#39;</p>
<p>Don&#39;t bring in new libraries/frameworks/whatever unless without good reason.</p>
<p>Keep all dependencies up to date. If there&#39;s a breaking change, take a day to
update your code. If there are breaking changes all the time and no easy way to
update (like codemods), get rid of that dependency.</p>
<p>Delete code. As much as possible. Don&#39;t keep it around &#39;just in case&#39; or
something. Get rid of it.</p>
<p>Don&#39;t write very specific functions. And name your functions appropriately.  No
<code>getThisSpecificPieceOfData()</code>; instead, <code>getData(specificPiece)</code>. And then, if
you&#39;re going to be calling it with that specific piece of data, maybe write a
second function. But have that first one, first. <code>const getThisThing =
getThings(thisThing)</code>.</p>
<p>Don&#39;t stress about not knowing something. Either someone else knows it, or
literally no one around you knows it so you can be the first to figure it out,
which is cool. (I suck at this not-stressing bit, but I&#39;m trying.)</p>
<p>No language or framework or library sucks. I mean, okay, some do, but most
really don&#39;t, they&#39;re just probably not what you&#39;re looking for. Even Angular
doesn&#39;t <em>suck</em>, it&#39;s just not a good fit for many many webapps. And by the same
token, not all good things are always good. React is great, but if you&#39;re doing
a little static site, screw it, just use jQuery. It&#39;s okay. No one will judge
you too harshly. And if they do, screw them, too.</p>
<p>Some paradigms are better than others, but no one will ever agree on which ones
are better, so it&#39;s best to just pretend that OO is great when talking to C#
people, and that FP is great when talking to Haskell people, or whatever.
Believe whatever you want to believe, and if you do decide to stick hardcore to
one way of writing code, make sure you know it <em>really</em> well.</p>
<p>Use the simplest tool possible. This isn&#39;t my principle, this is a law. But
people break it all the time, <strong>especially</strong> in the front-end world. If you can
do it with ten lines of Bash, do it with ten lines of Bash, don&#39;t install five
dependencies to be able to do it in 40 lines of JS. (If you&#39;re on a computer
that doesn&#39;t have Bash, change or update your OS. Even Windows has Bash, now.)</p>
<p>Premature abstractions are just as bad as premature optimizations. Avoid, avoid,
avoid.</p>
<p>Being good at using a computer comes first. If you can&#39;t use the basic tools you
need to do your job, you need to learn that first. That means your hardware,
your OS, your terminal, your shell, your editor, your browser, whatever. You
don&#39;t need to go read the source and learn every hotkey and all that, but being
good with your tools means being faster and more productive, which gives you a
lot more time for thinking, reading docs, and all the other things that you
actually do most of the time when writing code.</p>
<p>Also, type. If you can&#39;t type well, practice. I&#39;m a fast typist&mdash;114 wpm,
which is pretty fast&mdash;and while it hasn&#39;t made me a <em>better</em> developer,
being able to type things quickly means I have more time to do all the things
that aren&#39;t just typing. Like thinking and reading docs.</p>
<p>Figure out what doesn&#39;t work, and what you don&#39;t like. That&#39;s actually pretty
easy to do. Just play with a lot of things and learn what sucks, to you.</p>
<p>No job is worth screwing up your personal life over. If you can&#39;t take a few
days off for important events without much warning, find a different job. You&#39;re
a developer. You&#39;re in control, in the current job market.</p>
<p>Don&#39;t just code. It&#39;s bad for you. Have something else. Music, woodworking,
fancy-wine-drinking, whatever. You need to get your eyes away from the screen
for a while, and get your wrists out of that position. You&#39;ll end up blind with
carpal tunnel if all you do is code all day long.</p>
<p>If a tool you&#39;re using isn&#39;t working out (that could be a language, framework,
package manager, OS, cloud provider, whatever), find a way to get rid of it.
That might take a while (ages, maybe), but it&#39;ll be worth it. Good tools are
worth using. Don&#39;t get yourself stuck with shitty ones. You can almost always
find a way to gradually switch over, so it&#39;s not a big immediate change for your
team or your project or whatever. If you use an editor you don&#39;t like, but
you&#39;re not sure you&#39;d like anything else better, just try a different editor.
Maybe try a different one every two weeks, &#39;til you&#39;ve picked one.</p>
<p>Laptop screens aren&#39;t great. Get a decent monitor for at home. Just do it. It&#39;s
worth it. Also a decent mouse, if you use a mouse. If you have a laptop with a
crappy keyboard, treat yourself to a nice keyboard. All these things make a
difference.</p>
<p>No language is great.  No one has ever written a language that&#39;s just perfect.
Anyone who claims their language is provably superior in all ways to your language
is either an idiot or trying to sell you something. No one will ever write a
language that&#39;s great for everything in all ways, either. So just find one that
works kind of okay in a way you feel like you can live with, and go with that.
Doesn&#39;t matter if that&#39;s Smalltalk, ML, Jelly, or Brainfuck. If you can be
productive in it and it works for the thing you&#39;re making (and for your team),
do that, and screw the haters.</p>
<p>Don&#39;t live on energy drinks, pizza, and IPAs on Friday nights.</p>
<p>I&#39;m a little off-topic now I guess, so, that&#39;s all.</p>
]]></description><link>/2016/principles-and-tips.html</link><guid isPermaLink="true">/2016/principles-and-tips.html</guid><category><![CDATA[process]]></category><category><![CDATA[development]]></category><category><![CDATA[principles]]></category><category><![CDATA[tips]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sat, 20 Aug 2016 03:57:00 GMT</pubDate></item><item><title><![CDATA[purescript things]]></title><description><![CDATA[<p>What are <code>@</code> and <code>=&gt;</code>?</p>
<p>What is fixity? Is this the same as precedence?</p>
<pre class="hljs"><code>foo :: [<span class="hljs-operator">a</span>] <span class="hljs-comment">-- in haskell would be</span>
foo :: forall <span class="hljs-operator">a</span>. Array <span class="hljs-operator">a</span> <span class="hljs-comment">-- in purescript, i think?</span>
<span class="hljs-comment">-- there&#39;s no [] in annotations, it&#39;s always Array a</span>
<span class="hljs-comment">-- but there is List, but you have to use Data.List instead of just []</span>

Number <span class="hljs-comment">-- is js number</span>
Int <span class="hljs-comment">-- is 32 bit -- and it&#39;s basically n | 0 (?)</span>

Unit <span class="hljs-comment">-- ()</span>

main :: IO () <span class="hljs-comment">-- would be</span>
main :: Eff <span class="hljs-comment">-- basically, but really more something like</span>
main :: Eff (<span class="hljs-built_in">process</span> :: PROCESS, fs :: FS) Unit <span class="hljs-comment">-- or something</span>

<span class="hljs-operator">a</span> &lt;&gt; b <span class="hljs-comment">-- a ++ b -- concat a b</span>

A &lt;= B <span class="hljs-comment">-- B implies instance of A</span></code></pre><p>something like this is kind of right i think (what builds on what):
i</p>
<pre class="hljs"><code>      monad
  applicative   ??
    apply  <span class="hljs-keyword">bind
</span>      functor</code></pre><p>No tuples, just records. But there&#39;s a lib for tuples.</p>
<p><code>&lt;&lt;&lt;</code>  is <code>.</code> for rtl composition, and <code>&gt;&gt;&gt;</code> for ltr</p>
<p>Lots of <code>Data.List</code> stuff is in <code>Data.Foldable</code> and <code>Data.Traversable</code> instead.</p>
<p>To export stuff: <code>module Foo (a, b, c) where</code>.
That&#39;s like <code>export { a, b, c }</code> in JS, I think.
<code>module Foo (..)</code> exports everything, I think.</p>
<h2 id="what">what</h2>
<pre class="hljs"><code>z ± psci
PSCi requires the purescript-psci-support package to be installed.
You can <span class="hljs-operator"><span class="hljs-keyword">install</span> it <span class="hljs-keyword">using</span> Bower <span class="hljs-keyword">as</span> <span class="hljs-keyword">follows</span>:

  bower <span class="hljs-keyword">i</span> purescript-psci-support <span class="hljs-comment">--save-dev</span>

<span class="hljs-keyword">For</span> <span class="hljs-keyword">help</span> getting started, visit <span class="hljs-keyword">http</span>://wiki.purescript.org/PSCi

z ± a bower_components/ | ag psci
purescript-psci-support/

z ± jq .devDependencies &lt; bower.<span class="hljs-keyword">json</span>
{
  <span class="hljs-string">&quot;purescript-spec&quot;</span>: <span class="hljs-string">&quot;^0.8.0&quot;</span>,
  <span class="hljs-string">&quot;purescript-psci-support&quot;</span>: <span class="hljs-string">&quot;^1.0.0&quot;</span>
}

z ±

z ± pulp psci
PSCi, <span class="hljs-keyword">version</span> <span class="hljs-number">0.9</span><span class="hljs-number">.3</span>
<span class="hljs-keyword">Type</span> :? <span class="hljs-keyword">for</span> <span class="hljs-keyword">help</span>

&gt; :<span class="hljs-keyword">l</span> <span class="hljs-keyword">Main</span>
Unrecognized directive. <span class="hljs-keyword">Type</span> :? <span class="hljs-keyword">for</span> <span class="hljs-keyword">help</span>.
&gt; <span class="hljs-keyword">import</span> <span class="hljs-keyword">Main</span>
&gt; :<span class="hljs-keyword">t</span> <span class="hljs-keyword">Main</span>
<span class="hljs-keyword">Error</span> <span class="hljs-keyword">found</span>:
<span class="hljs-keyword">in</span> <span class="hljs-keyword">module</span> $PSCI
<span class="hljs-keyword">at</span>  line <span class="hljs-number">1</span>, <span class="hljs-keyword">column</span> <span class="hljs-number">1</span> - line <span class="hljs-number">1</span>, <span class="hljs-keyword">column</span> <span class="hljs-number">2</span>

  <span class="hljs-keyword">Unknown</span> <span class="hljs-keyword">data</span> <span class="hljs-keyword">constructor</span> <span class="hljs-keyword">Main</span>


See <a href="https://github.com/purescript/purescript/wiki/">https://github.com/purescript/purescript/wiki/</a><span class="hljs-keyword">Error</span>-Code-UnknownName <span class="hljs-keyword">for</span> more information,
<span class="hljs-keyword">or</span> <span class="hljs-keyword">to</span> contribute <span class="hljs-keyword">content</span> related <span class="hljs-keyword">to</span> this <span class="hljs-keyword">error</span>.


&gt; :<span class="hljs-keyword">i</span> <span class="hljs-keyword">Main</span>
Unrecognized directive. <span class="hljs-keyword">Type</span> :? <span class="hljs-keyword">for</span> <span class="hljs-keyword">help</span>.
&gt; :<span class="hljs-keyword">t</span> <span class="hljs-keyword">Module</span>.Thing.functionThatIKnowIsThere
<span class="hljs-keyword">Error</span> <span class="hljs-keyword">found</span>:
<span class="hljs-keyword">in</span> <span class="hljs-keyword">module</span> $PSCI
<span class="hljs-keyword">at</span>  line <span class="hljs-number">1</span>, <span class="hljs-keyword">column</span> <span class="hljs-number">1</span> - line <span class="hljs-number">1</span>, <span class="hljs-keyword">column</span> <span class="hljs-number">15</span>

  <span class="hljs-keyword">Unknown</span> <span class="hljs-keyword">module</span> <span class="hljs-keyword">Module</span>.Thing


See <a href="https://github.com/purescript/purescript/wiki/">https://github.com/purescript/purescript/wiki/</a><span class="hljs-keyword">Error</span>-Code-UnknownName <span class="hljs-keyword">for</span> more information,
<span class="hljs-keyword">or</span> <span class="hljs-keyword">to</span> contribute <span class="hljs-keyword">content</span> related <span class="hljs-keyword">to</span> this <span class="hljs-keyword">error</span>.


&gt; :q
See ya!</span></code></pre><p>kbai</p>
]]></description><link>/2016/purescript-things.html</link><guid isPermaLink="true">/2016/purescript-things.html</guid><category><![CDATA[purescript]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sat, 20 Aug 2016 03:32:00 GMT</pubDate></item><item><title><![CDATA[angular in one line]]></title><description><![CDATA[<p>also angular in one line, just cuz.</p>
<pre class="hljs"><code><span class="hljs-label">WEIRD</span> MIX <span class="hljs-keyword">BETWEEN </span><span class="hljs-keyword">MARKUP </span><span class="hljs-keyword">AND </span>JAVA-LIKE JAVASCRIPT GOES HERE</code></pre>]]></description><link>/2016/angular-in-one-line.html</link><guid isPermaLink="true">/2016/angular-in-one-line.html</guid><category><![CDATA[angular]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sat, 13 Aug 2016 23:59:00 GMT</pubDate></item><item><title><![CDATA[react in one line]]></title><description><![CDATA[<p>like my redux-in-one-line post&mdash;no, not really. just the idea of it.
really the idea of stateless components, the pure-function kind that we got to
start using in 0.14 or whatever.</p>
<pre class="hljs"><code>v = <span class="hljs-function"><span class="hljs-title">f</span><span class="hljs-params">(d)</span></span></code></pre><p>tada.</p>
]]></description><link>/2016/react-in-one-line.html</link><guid isPermaLink="true">/2016/react-in-one-line.html</guid><category><![CDATA[react]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sat, 13 Aug 2016 23:58:00 GMT</pubDate></item><item><title><![CDATA[void elements]]></title><description><![CDATA[<p>i posted this a while back on <a href="http://zacanger.com/blog">my old blog</a> but it&#39;s worth posting again.</p>
<p>obviously this doesn&#39;t apply when using jsx, because everything needs to be closed. but, in jsx, if
it <em>can</em> be a self-closed tag (meaning literally any of these but also anything else that doesn&#39;t
have children), please self-close it.</p>
<ul>
<li>area</li>
<li>base</li>
<li>br</li>
<li>col</li>
<li>embed</li>
<li>hr</li>
<li>img</li>
<li>input</li>
<li>keygen</li>
<li>link</li>
<li>menuitem</li>
<li>meta</li>
<li>param</li>
<li>source</li>
<li>track</li>
<li>wbr</li>
</ul>
<p>see what they all have in common?</p>
<p>you can&#39;t possibly have anything in any of them, like, between tags. what can you put between
an opening and closing line break tag? <strong>nothing</strong>. so why would you need a closing tag?  <strong>you wouldn&#39;t</strong>.
so don&#39;t close it. none of that <code>&lt;img src=&quot;img.jpg&quot;&gt;&lt;/img&gt;</code> bs. No <code>&lt;br /&gt;</code>. and please, please,
never do something just weird like <code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot; /&gt;</code>.</p>
]]></description><link>/2016/void-elements.html</link><guid isPermaLink="true">/2016/void-elements.html</guid><category><![CDATA[html]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Tue, 09 Aug 2016 19:58:00 GMT</pubDate></item><item><title><![CDATA[redux notes, part three]]></title><description><![CDATA[<p>Because the Redux docs say &quot;Redux is actually really simple!&quot; when sometimes
it&#39;s not, and because those docs themselves are pretty overwhelming when
you&#39;re first trying out Redux, I&#39;m going to attempt to distill the docs and
bits of my own (admittedly limited) personal experience with Redux into a
couple of blog posts.</p>
<hr>
<p>Just want to take a second to go over some syntax before going on more about
Redux. A lot of folks who&#39;re new to React might also be new to new JavaScript,
so some things might be looking a little unusual.</p>
<pre class="hljs"><code><span class="hljs-keyword">const</span> foo = <span class="hljs-string">&#39;bar&#39;</span> <span class="hljs-comment">// is roughly the same as</span>
<span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#39;bar&#39;</span> <span class="hljs-comment">// EXCEPT that you could not then do</span>
foo = <span class="hljs-string">&#39;baz&#39;</span> <span class="hljs-comment">// because you&#39;d be reassigning a const which is not okay.</span>
<span class="hljs-keyword">let</span> asdf = <span class="hljs-string">&#39;ghjkl&#39;</span> <span class="hljs-comment">// is a lot more like var</span>
asdf = <span class="hljs-string">&#39;qwerty&#39;</span> <span class="hljs-comment">// no errors</span>

import React from <span class="hljs-string">&#39;react&#39;</span> <span class="hljs-comment">// is kinda like</span>
<span class="hljs-keyword">const</span> React = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#39;react&#39;</span>) <span class="hljs-comment">// except it&#39;s actually just a part of the language now</span>
import { resolve } from <span class="hljs-string">&#39;path&#39;</span> <span class="hljs-comment">// is like</span>
<span class="hljs-keyword">const</span> { resolve } = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#39;path&#39;</span>) <span class="hljs-comment">// which is like</span>
<span class="hljs-keyword">var</span> path = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#39;path&#39;</span>)
<span class="hljs-keyword">var</span> resolve = path.resolve

export <span class="hljs-keyword">const</span> whatever = () =&gt; {} <span class="hljs-comment">// is like</span>
module.exports.whatever = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{}

export <span class="hljs-keyword">default</span> MyThing <span class="hljs-comment">// is like</span>
module.exports = MyThing

<span class="hljs-keyword">const</span>
  a = <span class="hljs-string">&#39;a&#39;</span>
, b = <span class="hljs-string">&#39;b&#39;</span>
, c = <span class="hljs-string">&#39;c&#39;</span>
, o = { a, b, c } <span class="hljs-comment">// is the same as</span>

<span class="hljs-keyword">var</span> a = <span class="hljs-string">&#39;a&#39;</span>
<span class="hljs-keyword">var</span> b = <span class="hljs-string">&#39;b&#39;</span>
<span class="hljs-keyword">var</span> c = <span class="hljs-string">&#39;c&#39;</span>
<span class="hljs-keyword">var</span> o = {
  a : a
, b : b
, c : c
}

<span class="hljs-keyword">const</span> someFunc = param =&gt; param <span class="hljs-comment">// is roughly the same as</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">someFunc</span><span class="hljs-params">(param)</span> </span>{
  <span class="hljs-keyword">return</span> param
}
<span class="hljs-comment">// though there <em>are</em> important differences</span></code></pre><p>If you&#39;re not at all familiar with ES2015, you should really go get comfortable
with it. I put together a repo a while ago for that, full of examples and notes.
Check it out <a href="https://github.com/zacanger/es6-and-builds/tree/master">here</a>.
(Also if you want, check out my semi-maintained bunch of examples and resources
for learning React <a href="https://github.com/zacanger/react-bits">here</a>.)</p>
<hr>
<p><code>react-redux</code> (not a part of Redux itself, since it&#39;s supposed to be
framework/library agnostic... ish) is something you&#39;ll need for writing React
apps using Redux. It sort of enforces the presentational/container (or
dumb/smart) way of structuring your components.</p>
<p>Note&mdash;you don&#39;t <em>need</em> <code>react-redux</code> to be able to use Redux with React, it
just helps. A lot.</p>
<p>I won&#39;t go into the whole presentational/container component thing, there are a
lot of blogs posts and such out there on that topic, but it&#39;s basically what it
sounds like; you have components that handle how things look and components that
handle how things work.</p>
<p><code>react-redux</code> gives you this <code>connect()</code> function which is pretty handy. You can
do a lot of the stuff it does by hand using <code>store.subscribe()</code>, but then you
start needing to worry about <code>shouldComponentUpdate</code> and all this stuff, and
it&#39;s all kind of annoying.</p>
<p>When wrapping a &#39;dumb&#39; component up in a &#39;smart&#39; component, there are two
functions you usually throw in there. One is called <code>mapStateToProps</code>, and the
other is <code>mapDispatchToProps</code>. I&#39;d suggest you take a good look at the <a href="https://github.com/reactjs/react-redux">official
docs</a> on <code>react-redux</code> to get a good
feel for how it all works, but setting up a container component turns out to be
pretty straightforward.</p>
<pre class="hljs"><code><span class="hljs-keyword">import</span> { connect } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;react-redux&#39;</span>
<span class="hljs-keyword">import</span> { someReducer } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./wherever/your/reducers/are&#39;</span>
<span class="hljs-keyword">import</span> AComponent <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./AComponent&#39;</span>

<span class="hljs-keyword">const</span> mapStateToProps = (state, ownProps) =&gt; ({
  <span class="hljs-attribute">somethingInState</span>: someReducer(state, ownProps.maybeSomeProperty.Here)
})

<span class="hljs-keyword">const</span> mapDispatchToProps = (dispatch, ownProps) =&gt; ({
  <span class="hljs-attribute">something</span>: probablyAnActionOrOtherFunction
})

<span class="hljs-keyword">const</span> AComponentThatIsNowConnected = connect(
  mapStateToProps
, mapDispatchToProps
)(AComponent)

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AComponentThatIsNowConnected</code></pre><p><code>mapDispatchToProps</code> is a little tricky, so I&#39;d really suggest just checking out
<a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md">the docs</a>.</p>
<p>There&#39;s one other important bit, and that&#39;s this thing called <code>Provider</code>. It&#39;s a
component that makes the store available to all your container components
without you needing to actually pass it down everywhere. It uses this funky
<a href="https://facebook.github.io/react/docs/context.html">context</a> thing under the
hood. You don&#39;t need to put it everywhere, you just wrap a root component in it.</p>
<pre class="hljs"><code><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;react&#39;</span>
<span class="hljs-keyword">import</span> { render } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;react-dom&#39;</span>
<span class="hljs-keyword">import</span> { Provider } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;react-redux&#39;</span>
<span class="hljs-keyword">import</span> { createStore } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;redux&#39;</span>
<span class="hljs-keyword">import</span> reducers <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./reducers&#39;</span>
<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./App&#39;</span>

<span class="hljs-keyword">const</span> store = createStore(reducers)
<span class="hljs-keyword">const</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#39;root&#39;</span>)

render(
  &lt;Provider store={store}&gt;
    &lt;App /&gt;
  &lt;/Provider&gt;
, root
)</code></pre><p>This can trip you up when testing! You don&#39;t need to do much to work around it,
but it can be annoying the first time you see all these random errors. Try
something like:</p>
<pre class="hljs"><code><span class="hljs-literal">import</span> test from <span class="hljs-string">&#39;ava&#39;</span> <span class="hljs-comment">// seriously awesome test runner</span>
<span class="hljs-literal">import</span> React from <span class="hljs-string">&#39;react&#39;</span>
<span class="hljs-literal">import</span> { mount } from <span class="hljs-string">&#39;enzyme&#39;</span> <span class="hljs-comment">// seriously awesome testing thing for React</span>
<span class="hljs-literal">import</span> { createStore } from <span class="hljs-string">&#39;redux&#39;</span>
<span class="hljs-literal">import</span> { Provider } from <span class="hljs-string">&#39;react-redux&#39;</span>
<span class="hljs-literal">import</span> MyComponent from <span class="hljs-string">&#39;./MyComponent&#39;</span>

test.beforeEach(<span class="hljs-string">&#39;Set up &lt;MyComponent /&gt;&#39;</span>, t =&gt; {
  <span class="hljs-keyword">const</span> store = createStore(() =&gt; ({}))
  t.context = mount(
    &lt;Provider store={store}&gt;
      &lt;MyComponent
        some=<span class="hljs-string">&#39;props&#39;</span>
      /&gt;
    &lt;/Provider&gt;
  )
})

<span class="hljs-comment">// and then you can do</span>
test(<span class="hljs-string">&#39;&lt;MyComponent /&gt; isn\&#39;t broken!&#39;</span>, t =&gt; {
  t.<span class="hljs-keyword">is</span>(t.context.prop(<span class="hljs-string">&#39;some&#39;</span>), <span class="hljs-string">&#39;props&#39;</span>)
})
<span class="hljs-comment">// and it won&#39;t throw errors about not finding a store and stuff!</span></code></pre>]]></description><link>/2016/redux-three.html</link><guid isPermaLink="true">/2016/redux-three.html</guid><category><![CDATA[redux]]></category><category><![CDATA[react]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sun, 07 Aug 2016 03:29:00 GMT</pubDate></item><item><title><![CDATA[redux notes, part two]]></title><description><![CDATA[<p>Because the Redux docs say &quot;Redux is actually really simple!&quot; when sometimes
it&#39;s not, and because those docs themselves are pretty overwhelming when
you&#39;re first trying out Redux, I&#39;m going to attempt to distill the docs and
bits of my own (admittedly limited) personal experience with Redux into a
couple of blog posts.</p>
<hr>
<p>All your data moves in one direction. This is the same as in Flux. You will
always go through the same steps in redux:</p>
<ul>
<li>Action (call <code>store.dispatch()</code> with an object that describes something
happening)</li>
<li>Reducer (pure function called based on the action that was dispatched that
calculates next state)</li>
<li>Your root reducer combines a bunch of reducers&#39; outputs into one state tree
(assuming you have a root reducer, which you probably do)</li>
<li>The store saves the state tree as returned by the above&mdash;now that&#39;s your
state (and at this point anything you subscribed with will be invoked)</li>
</ul>
<p>All your state in redux is just an object&mdash;just one object. It&#39;s probably a
good idea to try to keep that as shallow as possible, and reference things by
keys (IDs), rather than deeply nesting stuff.</p>
<p>Reducers are just functions. They take your existing state (state previous to
acting on it) and an action and output state (new state).</p>
<pre class="hljs"><code>const someReducer = <span class="hljs-function"><span class="hljs-params">(oldState, action)</span> =&gt;</span> newState</code></pre><p>It&#39;s a reducing function just like you&#39;d pass to <code>Array.reduce()</code>, it it should
always be a pure function. Don&#39;t mutate arguments, call non-pure functions, make
API calls, or anything like that in a reducer. If you don&#39;t know what a pure
function is, it&#39;s actually super simple:</p>
<blockquote>
<p>Given the same arguments, a pure function will always have the same output.
This means it&#39;s a function who&#39;s result relies solely on its arguments.</p>
</blockquote>
<p>One thing you should get in the habit of doing is using &#39;default arguments.&#39;
This is new in ES2015, and saves you a bit of code. This means you could have
some initial state:</p>
<pre class="hljs"><code>const initState = {
  <span class="hljs-string">something     :</span> <span class="hljs-string">&#39;a&#39;</span>
, <span class="hljs-string">somethingElse :</span> <span class="hljs-string">&#39;b&#39;</span>
}</code></pre><p>And instead of needing to write</p>
<pre class="hljs"><code>const reducer = (<span class="hljs-keyword">state</span>, action) =&gt; {
  if (typeof <span class="hljs-keyword">state</span> === &#39;undefined&#39;) {
    return initState
  }
  // do stuff
}</code></pre><p>You can just do</p>
<pre class="hljs"><code>const reducer = (<span class="hljs-keyword">state</span> = initState, action) =&gt; // do stuff</code></pre><p>Reducers are frequently switch statements. This might seem a little weird at
first, since most JS folks avoid switch statements (I think some linters even
warn about them, saying they&#39;re &#39;confusing&#39;), but it makes sense in reducers
since you can handle various actions in one function. Remember, an action is
just an object: <code>{type: &#39;do_thing&#39;}</code> with possible other fields: <code>{type:
&#39;do_thing&#39;, to: &#39;stuff&#39;}</code>.</p>
<pre class="hljs"><code>const someReducer = (<span class="hljs-keyword">state</span> = initState, action) {
  switch (action.type) {
    case do_stuff:
      return Object.assign({}, <span class="hljs-keyword">state</span>, {something: action.<span class="hljs-keyword">to</span>})
    <span class="hljs-keyword">default</span>:
      return <span class="hljs-keyword">state</span>
  }
}</code></pre><p>Note the <code>Object.assign()</code>&mdash;we don&#39;t mutate state, we return a new state
based on the old state and the action. You&#39;ll probably want to use a polyfill
for <code>.assign()</code>, but chances are you&#39;re already using Babel anyway. You could
also use something from Lodash, Underscore, or some other library.</p>
<p>It&#39;s always a good idea to return <code>state</code> (which is our old state) as a default,
in case we get sent some unexpected action.</p>
<p>It&#39;s also a good idea to split your reducers and compose them:</p>
<pre class="hljs"><code>const firstReducer = (<span class="hljs-keyword">state</span> = {}, action) =&gt; {
  switch (action.type) {
    case something:
      return stuff
    <span class="hljs-keyword">default</span>:
      return <span class="hljs-keyword">state</span>
  }
}

const secondReducer = (<span class="hljs-keyword">state</span> = initState, action) =&gt; {
  switch (action.type) {
    case whatever:
      return firstReducer(<span class="hljs-keyword">state</span>.field, action)
    <span class="hljs-keyword">default</span>
      return <span class="hljs-keyword">state</span>
  }
}</code></pre><p>This means that <code>firstReducer</code> only needs to get the state that it actually
cares about, when it needs to do something. Also note that defaut state is an
empty object there. It could be anything you want it to be, just make sure it&#39;s
the shape your reducer expects to act on.</p>
<p>When you have a lot of reducers, you can use <code>combineReducers</code>:</p>
<pre class="hljs"><code><span class="hljs-literal">import</span> { combineReducers } from <span class="hljs-string">&#39;redux&#39;</span>

<span class="hljs-keyword">const</span> lotsOfReducers = combineReducers({
  firstReducer
, secondReducer
<span class="hljs-comment">// , etc.</span>
})

<span class="hljs-literal">export</span> <span class="hljs-keyword">default</span> lotsOfReducers</code></pre><p>And you can do this as many times as you like, in as many files as you need.</p>
<p>All you&#39;re doing with reducers is taking in the state as it exists, taking in an
action, and outputing the new state. What you&#39;re operating against is the store.</p>
<p>The Store is a really important bit. It holds all the state of your app. This
is different from Flux, where you&#39;d have a lot of little stores. In Redux
there&#39;s only one. It&#39;s accessed similiarly&mdash;you have <code>getState()</code>, you
dispatch actions, and you can have listeners subscribe to changes. To create a
store in Redux, you just use <code>createStore</code>.</p>
<pre class="hljs"><code><span class="hljs-literal">import</span> { createStore } from <span class="hljs-string">&#39;redux&#39;</span>
<span class="hljs-literal">import</span> someReducer from <span class="hljs-string">&#39;./someFile&#39;</span>
<span class="hljs-keyword">const</span> store = createStore(someReducer)
<span class="hljs-comment">// createStore can take your initial state, too</span>
<span class="hljs-keyword">const</span> store = createStore(someReducer, initialState)
<span class="hljs-comment">// and for creating a store as simply as possible (mocking in testing, etc.):</span>
<span class="hljs-keyword">const</span> store = createStore(() =&gt; ({})) <span class="hljs-comment">// your store is just an empty object, now</span></code></pre><p><code>store.subscribe()</code> returns a function for _un_subscribing. So you can do
something like:</p>
<pre class="hljs"><code>const unsubscribe = store.<span class="hljs-function"><span class="hljs-title">subscribe</span><span class="hljs-params">(someListener)</span></span>
<span class="hljs-function"><span class="hljs-title">unsubscribe</span><span class="hljs-params">()</span></span></code></pre>]]></description><link>/2016/redux-two.html</link><guid isPermaLink="true">/2016/redux-two.html</guid><category><![CDATA[redux]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sat, 06 Aug 2016 14:37:00 GMT</pubDate></item><item><title><![CDATA[redux notes, part one]]></title><description><![CDATA[<p>Because the Redux docs say &quot;Redux is actually really simple!&quot; when sometimes
it&#39;s not, and because those docs themselves are pretty overwhelming when
you&#39;re first trying out Redux, I&#39;m going to attempt to distill the docs and
bits of my own (admittedly limited) personal experience with Redux into a
couple of blog posts.</p>
<hr>
<p>The store is an object that holds state. There&#39;s only ever one store in Redux,
with many reducers that act on it.</p>
<p><code>getState()</code> returns the state from the store.</p>
<p><code>subscribe(listener)</code> says &quot;Hey, call <code>listener</code> when the state changes.&quot;</p>
<p>There&#39;s also a <code>replaceReducer</code> but unless you&#39;re writing hot middlware or
something you probably won&#39;t touch this one.</p>
<p>State can by any type, though obviously it&#39;s probably best to just use an
object here.</p>
<p>Actions are always objects, and they always have a <code>type</code>.</p>
<pre class="hljs"><code>store.<span class="hljs-function"><span class="hljs-title">dispatch</span><span class="hljs-params">({type: <span class="hljs-string">&#39;do-stuff&#39;</span>})</span></span>
<span class="hljs-comment">// it&#39;s conventional to use all uppercase, but it&#39;s also hideous. so.</span>
store.<span class="hljs-function"><span class="hljs-title">dispatch</span><span class="hljs-params">({type: <span class="hljs-string">&#39;DO_OTHER_STUFF&#39;</span>, stuff: <span class="hljs-string">&#39;[things to do here, maybe]&#39;</span>})</span></span></code></pre><p>Action creators are functions that create actions based on any sorts of
arguments.</p>
<pre class="hljs"><code><span class="hljs-title">const</span> sendSomeData = &#39;send-some-<span class="hljs-typedef"><span class="hljs-keyword">data</span>&#39;</span>
<span class="hljs-title">const</span> sendSomeDataActionCreator = <span class="hljs-typedef"><span class="hljs-keyword">data</span> =&gt; <span class="hljs-container">({
  <span class="hljs-title">type</span> : <span class="hljs-title">sendSomeData</span>
, <span class="hljs-title">data</span>
})</span></span></code></pre><p>A &#39;bound&#39; action creator would be one that creates the action and immediately
dispatches it. This might be familiar to folks who&#39;ve worked with Flux before.</p>
<p>This is how you might have something like this in Flux:</p>
<pre class="hljs"><code><span class="hljs-keyword">const</span> sendMoreData = data =&gt; {
  <span class="hljs-keyword">const</span> doIt = {
    type : sendMoreData,
    data
  }
  dispatch(doIt)
}</code></pre><p>And this is how it&#39;d work in Redux:</p>
<pre class="hljs"><code><span class="hljs-comment">// assuming you already have the dispatch and action creator, you&#39;d just</span>
const boundSendMoreData = data =&gt;
  <span class="hljs-function"><span class="hljs-title">dispatch</span><span class="hljs-params">(sendMoreData(data)</span></span>)</code></pre><p>There&#39;s also a <code>bindActionCreators()</code> to just do this for you, and React-Redux
has <code>connect()</code>.</p>
<p>Async actions should go through middleware to be turned into regular actions
before being dispatched.</p>
<p>Reducers always take state and an action and return state.
<code>reducer (state, action) =&gt; state</code>
These are what they sound like&mdash;reducing functions.
The state a reducer takes is your existing (or previous, I guess) state.
Reducers are pure functions.</p>
<p>A dispatch is a function that takes an action (or an async action). It may then
dispatch an action (or actions) which will affect the store.
There&#39;s a base <code>dispatch</code> that always sends an action to the reducer.</p>
<p>Middleware are about what you&#39;d expect&mdash;functions (HOF) that take a
dispatch function and return a dispatch function.</p>
<p>There are &#39;store enhancers&#39; that are higher-order functions that take a store
creator and return a different store creator. They&#39;re basically kind of a
middleware for the store creator. You probably won&#39;t directly use one, ever.
Instead you&#39;ll just use the regular store creator (<code>createStore</code>).</p>
]]></description><link>/2016/redux-one.html</link><guid isPermaLink="true">/2016/redux-one.html</guid><category><![CDATA[redux]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Wed, 03 Aug 2016 01:10:00 GMT</pubDate></item><item><title><![CDATA[idea: series on design for devs]]></title><description><![CDATA[<p>I&#39;ve wanted to do something like this for a while (since December-ish), but
haven&#39;t had the time. I have some minor design experience (not a lot), and tend
to read more about interaction design, HCI, and other random
non-programming-but-still-computer-and-person-working-together-related topics
than I do about programming.</p>
<p>Would anyone be interested in seeing something like that? This is a short list
of things I might cover:</p>
<ul>
<li>A11Y</li>
<li>Typography</li>
<li>Colour theory</li>
<li>Whitespace</li>
<li>Scalable design (math; see Basscss)</li>
<li>Styleguides (writing, maintaining, conforming)</li>
<li>Image manipulation (mostly what <em>not</em> to do)</li>
<li>Importance and longevity of simplicity</li>
<li>KISS</li>
<li><a href="http://jxnblk.com/principles/">Principles</a></li>
</ul>
<p>Please <a href="https://twitter.com/@zacanger">tweet at me</a> if you think you&#39;d be into
it, or have any suggestions/additions/whatever.</p>
]]></description><link>/2016/design-for-devs.html</link><guid isPermaLink="true">/2016/design-for-devs.html</guid><category><![CDATA[design]]></category><category><![CDATA[idea]]></category><category><![CDATA[dev]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Wed, 03 Aug 2016 00:42:58 GMT</pubDate></item><item><title><![CDATA[redux in two lines]]></title><description><![CDATA[<p>Okay, not actually Redux in two lines, just the idea behind it
And really one of those is basically the idea of React, I guess.</p>
<pre class="hljs"><code>const render = <span class="hljs-keyword">state</span> =&gt; ui
const reducer = (oldState, action) =&gt; newState</code></pre>]]></description><link>/2016/redux-in-two-lines.html</link><guid isPermaLink="true">/2016/redux-in-two-lines.html</guid><category><![CDATA[react]]></category><category><![CDATA[redux]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Fri, 29 Jul 2016 07:09:37 GMT</pubDate></item><item><title><![CDATA[More More Notes Taken While Watching MPJ's Videos]]></title><description><![CDATA[<p>lol streams are like the weird lovechild of promises and arrays i love that
analogy</p>
<p>here&#39;s a stream-making thingy</p>
<pre class="hljs"><code>const foo = {
  each (cb) {
    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> cb(<span class="hljs-number">1</span>), <span class="hljs-number">100</span>)
    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> cb(<span class="hljs-number">2</span>), <span class="hljs-number">200</span>)
    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> cb(<span class="hljs-number">3</span>), <span class="hljs-number">300</span>)
    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> cb(<span class="hljs-number">4</span>), <span class="hljs-number">400</span>)
  }
}
foo.each(<span class="hljs-built_in">console</span>.log)</code></pre><p>prototypes are faster than factory functions but geez they&#39;re
kinda gross to think about you know so unless we&#39;re doing something
like making ten million objects just use a factory there i guess</p>
<p>streams are functors</p>
<p>functors are just a thing that implements map</p>
<p>monads are functors that also implement <em>flatMap</em></p>
<p>flatMap just flattens, i guess? that&#39;s what it sounds like.</p>
<p>so like with Promises for example, <code>.then</code> is like <code>.flatMap</code>.
same with stuff like bind and chain methods and stuff. it&#39;s basically
flattening into its <em>value</em> rather than having the actual (semi-expected)
value (function/promise/stream/whatever).</p>
<p>so if you have a flatMap that would return another monad, i guess,
it&#39;d actually return its value, not that other monad.</p>
<p>if you are a tooling addict, don&#39;t do tools. (this actually totally applies to
me, because i&#39;ve spent more time on <a href="https://github.com/zacanger/z.git">my dotfiles</a>
than on any other individual project... <em>but</em> i feel like it&#39;s worth it, mostly.
being able to just use vim and not go through the work of setting up any other
editor on any computer, being able to just clone that repo and symlink what i need,
that really does make me more productive. as long as i don&#39;t forget how to use
computers without my dotfiles, i don&#39;t think they&#39;re really a waste of time.)</p>
]]></description><link>/2016/fff2.html</link><guid isPermaLink="true">/2016/fff2.html</guid><category><![CDATA[js]]></category><category><![CDATA[fp]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sun, 24 Jul 2016 22:00:00 GMT</pubDate></item><item><title><![CDATA[meet notes i guess]]></title><description><![CDATA[<p>this is all i have</p>
<pre class="hljs"><code><span class="hljs-label">const</span>
  id    = a =&gt; a
, <span class="hljs-keyword">add </span>  = (a, <span class="hljs-keyword">b) </span>=&gt; a + <span class="hljs-keyword">b
</span>, <span class="hljs-keyword">sub </span>  = (a, <span class="hljs-keyword">b) </span>=&gt; a - <span class="hljs-keyword">b
</span>, <span class="hljs-keyword">mul </span>  = (a, <span class="hljs-keyword">b) </span>=&gt; a * <span class="hljs-keyword">b
</span>, div   = (a, <span class="hljs-keyword">b) </span>=&gt; a / <span class="hljs-keyword">b
</span>, mol   = (a, <span class="hljs-keyword">b) </span>=&gt; a % <span class="hljs-keyword">b
</span>, idF   = () =&gt; a =&gt; a
, <span class="hljs-keyword">addF </span> = a =&gt; a =&gt; <span class="hljs-keyword">b </span>=&gt; a + <span class="hljs-keyword">b
</span>, cur   = <span class="hljs-preprocessor">fn</span> =&gt; a =&gt; <span class="hljs-keyword">b </span>=&gt; <span class="hljs-preprocessor">fn</span>(a, <span class="hljs-keyword">b)
</span>, rCur  = <span class="hljs-preprocessor">fn</span> =&gt; <span class="hljs-keyword">b </span>=&gt; a =&gt; <span class="hljs-preprocessor">fn</span>(a, <span class="hljs-keyword">b)</span></code></pre>]]></description><link>/2016/july-12-meetup.html</link><guid isPermaLink="true">/2016/july-12-meetup.html</guid><category><![CDATA[fp]]></category><category><![CDATA[meetup]]></category><category><![CDATA[notes]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Wed, 13 Jul 2016 02:39:25 GMT</pubDate></item><item><title><![CDATA[script to set up ec2 build agent for tc]]></title><description><![CDATA[<p>This is a shell script to run on a new Ubuntu EC2 instance to get it
set up as a build agent for TeamCity, running stuff in Docker.</p>
<pre class="hljs"><code>#!/usr/bin/env bash

# start with a t2.large (or maybe medium) ec2 instance
# ubuntu, preferably 16.x
# needs to have semi-<span class="hljs-keyword">open</span> network access and public IP
# to be able to <span class="hljs-keyword">update</span> packages and talk to docker and your
# build server
# after running this and registering the agent <span class="hljs-keyword">on</span> the TC
# server, just <span class="hljs-keyword">use</span> the agent push
# or, download the <span class="hljs-keyword">zip</span> and scp it up

# new ubuntu instances won&#39;t have pw <span class="hljs-keyword">on</span> default user (ubuntu)
sudo <span class="hljs-keyword">su</span>

apt-get <span class="hljs-keyword">update</span>

apt-key adv --keyserver hkp:<span class="hljs-comment">//p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span>

<span class="hljs-keyword">mkdir</span> -p /etc/apt/sources.<span class="hljs-keyword">list</span>.<span class="hljs-keyword">d</span>/
touch /etc/apt/sources.<span class="hljs-keyword">list</span>.<span class="hljs-keyword">d</span>/docker.<span class="hljs-keyword">list</span>
echo &#39;deb https:<span class="hljs-comment">//apt.dockerproject.org/repo ubuntu-xenial main&#39; &gt;&gt; /etc/apt/sources.list.d/docker.list</span>
echo &#39;apt_preserve_sources_list: true&#39; &gt;&gt; /etc/cloud/cloud.cfg

<span class="hljs-keyword">if</span> [ command -v lxc-docker ] ; then
  apt-get purge lxc-docker -<span class="hljs-literal">y</span>
fi

echo &quot;
## <span class="hljs-keyword">Note</span>, this <span class="hljs-keyword">file</span> is written <span class="hljs-keyword">by</span> cloud-init <span class="hljs-keyword">on</span> first <span class="hljs-keyword">boot</span> of <span class="hljs-keyword">an</span> instance
## modifications made here will not survive a re-bundle.
## <span class="hljs-keyword">if</span> you wish to make changes you can:
## a.) add &#39;apt_preserve_sources_list: true&#39; to /etc/cloud/cloud.cfg
##     or <span class="hljs-keyword">do</span> the same <span class="hljs-keyword">in</span> user-data
## b.) add sources <span class="hljs-keyword">in</span> /etc/apt/sources.<span class="hljs-keyword">list</span>.<span class="hljs-literal">d</span>
## c.) make changes to template <span class="hljs-keyword">file</span> /etc/cloud/templates/sources.<span class="hljs-keyword">list</span>.tmpl
#

# See http:<span class="hljs-comment">//help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span>
# newer versions of the distribution.
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial main restricted</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial main restricted</span>

## Major bug fix updates produced after the final release of the
## distribution.
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span>

## <span class="hljs-keyword">N</span>.B. software from this repository is ENTIRELY UNSUPPORTED <span class="hljs-keyword">by</span> the Ubuntu
## team. Also, please <span class="hljs-keyword">note</span> that software <span class="hljs-keyword">in</span> universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial universe</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial universe</span>
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates universe</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates universe</span>

## <span class="hljs-keyword">N</span>.B. software from this repository is ENTIRELY UNSUPPORTED <span class="hljs-keyword">by</span> the Ubuntu
## team, and may not be under a free licence. Please satisfy yourself <span class="hljs-keyword">as</span> to
## your rights to <span class="hljs-keyword">use</span> the software. Also, please <span class="hljs-keyword">note</span> that software <span class="hljs-keyword">in</span>
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial multiverse</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial multiverse</span>
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span>

## Uncomment the following <span class="hljs-keyword">two</span> lines to add software from the &#39;backports&#39;
## repository.
## <span class="hljs-keyword">N</span>.B. software from this repository may not have been tested <span class="hljs-keyword">as</span>
## extensively <span class="hljs-keyword">as</span> that contained <span class="hljs-keyword">in</span> the main release, although it includes
## newer versions of some applications <span class="hljs-keyword">which</span> may provide useful features.
## Also, please <span class="hljs-keyword">note</span> that software <span class="hljs-keyword">in</span> backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span>

## Uncomment the following <span class="hljs-keyword">two</span> lines to add software from Canonical&#39;<span class="hljs-literal">s</span>
## &#39;partner&#39; repository.
## This software is not part of Ubuntu, but is offered <span class="hljs-keyword">by</span> Canonical and the
## respective vendors <span class="hljs-keyword">as</span> a service to Ubuntu users.
# deb http:<span class="hljs-comment">//archive.canonical.com/ubuntu xenial partner</span>
# deb-src http:<span class="hljs-comment">//archive.canonical.com/ubuntu xenial partner</span>

deb http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security main</span>
deb-src http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security main</span>
deb http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security universe</span>
deb-src http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security universe</span>
# deb http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security multiverse</span>
# deb-src http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security multiverse</span>
&quot; &gt; /etc/apt/sources.<span class="hljs-keyword">list</span>

apt-get install -y apt-transport-https <span class="hljs-keyword">ca</span>-certificates
apt-get install -y linux-image-extra-$(uname -r) --fix-missing --allow-unauthenticated
apt-get install -y default-jdk unzip docker-engine --fix-missing --allow-unauthenticated
apt-get dist-upgrade -y --allow-unauthenticated --fix-<span class="hljs-literal">missing</span>
apt-get autoremove
apt-get purge

systemctl daemon-reload
systemctl enable docker
systemctl start docker

echo &quot;
#!/usr/bin/env bash

<span class="hljs-keyword">while</span> true
<span class="hljs-keyword">do</span>
  <span class="hljs-keyword">sleep</span> 86400
  docker rmi <code>docker images -aq</code>
done
&quot; &gt; ~/docker-cleanup.<span class="hljs-keyword">sh</span>

chmod +x ~/docker-cleanup.<span class="hljs-keyword">sh</span>
nohup ~/docker-cleanup.<span class="hljs-keyword">sh</span> &amp;</code></pre>]]></description><link>/2016/teamcity-ubuntu-build-agent-setup.html</link><guid isPermaLink="true">/2016/teamcity-ubuntu-build-agent-setup.html</guid><category><![CDATA[ubuntu]]></category><category><![CDATA[docker]]></category><category><![CDATA[aws]]></category><category><![CDATA[teamcity]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Wed, 06 Jul 2016 15:59:29 GMT</pubDate></item><item><title><![CDATA[crappy error messages]]></title><description><![CDATA[<p>teamcity and aws have the worst error messages.</p>
<p>things that don&#39;t count as real error messages:</p>
<p><code>Environment health has transitioned from Degraded to Warning. Command failed on 1 out of 2 instances. Configuration update in progress on 1 instance. 0 out of 2 instances completed (running for 9 minutes).</code> WHAT COMMAND?</p>
<p><code>No agents connected after instance start. Please check the image has TeamCity agent configured and it can connect to the server using http://foo.bar address. Start the instance manually to check for agent again.</code> (What actually happened? Any errors? Network? Permissions? Anything? No?)</p>
<p><code>Incompatible Runner: Command Line</code> (on a Debian instance. Fuck you.)</p>
]]></description><link>/2016/teamcity-and-aws-fuck-you.html</link><guid isPermaLink="true">/2016/teamcity-and-aws-fuck-you.html</guid><category><![CDATA[aws]]></category><category><![CDATA[teamcity]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Thu, 30 Jun 2016 01:52:28 GMT</pubDate></item><item><title><![CDATA[just two gifs]]></title><description><![CDATA[<p><img src="assets/img/daniel-jump.gif" alt="jumping">
<img src="assets/img/daniel-jumpjump.gif" alt="jumpjumping"></p>
]]></description><link>/2016/daniel-jumping-gifs.html</link><guid isPermaLink="true">/2016/daniel-jumping-gifs.html</guid><category><![CDATA[gifs]]></category><category><![CDATA[work]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Wed, 29 Jun 2016 16:09:00 GMT</pubDate></item></channel></rss>