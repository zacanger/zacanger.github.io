<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - angr]]></title><description><![CDATA[writings from zac anger]]></description><link>http://blog.zacanger.com/</link><generator>Ghost</generator><lastBuildDate>Wed, 17 May 2017 04:12:38 GMT</lastBuildDate><atom:link href="http://blog.zacanger.com/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Recommendations For New Web Devs]]></title><description><![CDATA[<h1 id="some-recommendations-for-new-web-developers">Some Recommendations for New (Web) Developers</h1>
<p>Some of these thoughts probably apply to all developers. Some don&#39;t.</p>
<ol>
<li>Learn an editor. It doesn&#39;t matter which editor. Just learn one. Be good at
it. I don&#39;t care if you use Visual Studio or Emacs or whatever. Be really
good at the thing you pick, though.</li>
<li>Learn enough <code>vi</code> to get by. You <em>will</em> need to know it, at some point. At
the very least, learn how to enter text, move around, save, quit, and quit
without saving.</li>
<li>Install <code>jq</code> (build it from source if you want the newest hotness; otherwise
install it with your package manager). Don&#39;t install the <code>jq</code> clones written
in other languages (not C) &mdash; most of them are slow and/or only
half-finished.</li>
<li>Get comfortable with Bash. You don&#39;t have to be great with it, just know
enough to get by. It doesn&#39;t matter what shell you actually use (Zsh, Ksh,
Bash, Sh, Dash, Ash, PowerShell &mdash; I don&#39;t care, whatever). If you&#39;re
writing stuff that&#39;s going to be run by other people, ever, write it in Bash.
If you&#39;re writing stuff that may or may not be run on a server, write it in
POSIX-compliant <code>sh</code>.</li>
<li>Spend some time on Twitter. Facebook is for finding out how your
middle-school best friend&#39;s back surgery went. LinkedIn is for collecting
recruiter spam just in case. Twitter is for following people who say things
that matter, so get on Twitter.</li>
<li>No one cares if you can&#39;t afford a Mac. Macs aren&#39;t great computers, they&#39;re
okay computers that are very expensive. If you can&#39;t afford a Mac, try Linux
(I recommend Debian with the XFCE desktop environment, but try other things
too if you want!). If you don&#39;t have time for that, Windows is also okay
(just remember to tell your editor and Git to use UNIX-style line-endings).</li>
<li>Don&#39;t work (for your employer) on the weekends. Work on side projects, if you
want. Or do other things. Go out to brunch. Climb a mountain. Learn a Primus
song on bass. Get drunk. Just don&#39;t work for the person who pays you to work
during the week. If they seem to expect you to be working when you&#39;re not at
work, start looking for another job.</li>
<li>Learn other languages. HTML and CSS are not programming languages, so they
don&#39;t count. JS is actually a really great language (so don&#39;t take shit from
Java or C# developers who bitch about it!), but it&#39;s only one language. Learn
another language that helps you think about what you do in a different way.
Scheme (specifically, Racket) is a really nice one to start with. Haskell is
interesting (or some other ML-type language, like OCaml or Purescript). C is
also really useful to know, even if you only ever learn enough to write a
basic shell or something.</li>
<li>Figure out your own method for managing tasks. Chances are, you&#39;ll work for
more than one company over the next few years. Your employer might be really
into Jira, or Trello, or whatever, or they might change their mind four times
a year, but either way, getting heavily invested in one tool is not a great
idea. Use their thing, but also figure out what works for you. I keep track
of tasks for work in plain Markdown files, and I use
<a href="http://npm.im/lilnote">lilnote</a> for personal tasks. Just find a thing you
like and stick with it.</li>
<li>Make time for personal development. Including on the clock. If your employer
doesn&#39;t like that you spend a half hour every morning catching up on what new
flags Chromium shipped, or competing on Codewars, or whatever other technical
thing happens to really interest you but might also benefit your company,
start looking for another job.</li>
</ol>
]]></description><link>/2017/recommendations-for-new-web-devs.html</link><guid isPermaLink="true">/2017/recommendations-for-new-web-devs.html</guid><category><![CDATA[devmtn]]></category><category><![CDATA[thoughts]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sun, 26 Mar 2017 22:00:00 GMT</pubDate></item><item><title><![CDATA[advice for new devs]]></title><description><![CDATA[<p>So, I went to one of those code bootcamps. I started there just over a year ago,
and when I finished the course I worked there as a mentor for a cohort (three
months). Immediately after that, I got what I think is a pretty swell job doing
development full time, working mostly in technologies that I really like.</p>
<p>It&#39;s hard to find non-success stories from bootcamps, since generally the people
who go to these things are people who are really determined to do very well. You
don&#39;t go and pay $10k-$20k to lock yourself up in a building with a bunch of
other nerds for twelve or moure hours every day for three months straight unless
you really want to get something out of it. I think I&#39;m a good example of
someone who did really well through a bootcamp, though, and the reason I did so
well comes down to really just one thing, which I think everyone going into
computing (whether it&#39;s web development, databases, hardware, whatever) really
should be aware of.</p>
<blockquote>
<p>KNOW COMPUTERS</p>
</blockquote>
<p>That seems really obvious, right? But as a mentor it was amazing to me how many
people would come into a course that&#39;s just about making things happen with
computers, not knowing a lot of the basics of how to <em>use</em> a computer, and
knowing virtually nothing about how computers actually <em>work</em>. They&#39;re not just
a thing with a keyboard and a screen and a logo on the back. They&#39;re not just a
status symbol, though Mac users would like you to think they are. They&#39;re not
magical, and it&#39;s important to know what they do and how they do it, at least in
vague terms.</p>
<p>No junior web dev should really be expected to be familiar with what a page
cache is, or maybe even how domain names are resolved, but you should at least
know what a kernel is, what userland actually means, what the implications of
using your particular filesystem are, what the internet infrastructure kind of
looks like (at least in vague terms), and how to do some basic things that will
save you a lot of time later on (general terminal usage is a good place to
start).</p>
<p>This is the number one thing that can help you get, and stay, ahead as a student
and junior dev, in my opinion. And it&#39;s stuff you&#39;ll absolutely <em>have</em> to know
at some point, and probably mostly won&#39;t be taught, so it&#39;s a good idea to just
pick up this stuff as early as possible.</p>
]]></description><link>/2016/advice-for-new-devs.html</link><guid isPermaLink="true">/2016/advice-for-new-devs.html</guid><category><![CDATA[devmtn]]></category><category><![CDATA[tips]]></category><category><![CDATA[dev]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sat, 12 Nov 2016 18:26:00 GMT</pubDate></item><item><title><![CDATA[Three Quick Tips for Fresh Bootcamp Grads]]></title><description><![CDATA[<p>This was originally posted
<a href="https://github.com/lukeschunk/Notebook/blob/master/DailyNotes/Three_Quick_Tips.md">here</a>
by <a href="https://twitter.com/LukeSchunk">Luke Schunk</a>, but I wanted to repost because
there&#39;s some good stuff in here, and because he doesn&#39;t actually, like, share
links to his notes.</p>
<hr>
<h2 id="three-quick-tips-for-succeeding-at-a-bootcamp">Three Quick Tips for Succeeding at A Bootcamp</h2>
<p>I recently graduated from DevMountain, a 12-week immersive web development
bootcamp with campuses in Provo, Salt Lake, and Dallas. I had an overwhelmingly
positive experience, and I landed a great job soon after graduation. So for me,
the bootcamp was a good choice. I&#39;ve noticed this disparity, though, between
people who attend bootcamps and have a positive experience, and people who have
a negative one. Oftentimes this negativity is caused by inability to find a job
after finishing up a bootcamp.</p>
<p>Here are three tips to help you end up in the column of success stories.</p>
<h3 id="enjoy-what-you-do">Enjoy What You Do</h3>
<p>Perhaps this sounds obvious, but I was surprised about how many people signed up
to go to a bootcamp without having any idea of whether or not they liked
programming. Some people are lured in by the prospects of landing a shiny new
job, and I get that. It&#39;s a tempting idea. But, if you don&#39;t enjoy what you&#39;re
doing, it&#39;s going to be very hard to succeed. Even if you can get through the
bootcamp and land a job, why would you want to start a career doing something
you don&#39;t enjoy? I spent several months teaching myself to code before going to
the bootcamp, so by the time the first day of class came around, I already had a
healthy enjoyment for programming.</p>
<h3 id="set-yourself-apart">Set Yourself Apart</h3>
<p>In a nutshell, the way I landed my job was by learning and doing something that
almost nobody in my cohort did. I learned ReactJS, which was not taught heavily
as curriculum at the time I attended DevMountain. Really diving into React on my
own enabled me to contribute to some open source components at MX (a startup in
Utah). When I applied for the apprenticeship at MX, they received a slew of
other talented applicants, but I was able to land the job. This was largely due
to the fact that they had a rapport with me via back-and-forth communication in
pull requests, and my open source contributions gave them confidence I could
contribute to their codebase. There are a lot of ways to set yourself apart -
learn something different, build something different, contribute to open source,
etc. Find something that interests you and dive in.</p>
<h3 id="make-connections">Make Connections</h3>
<p>I prefer the phrase make-connections over &#39;network&#39;. I hate the idea of
business-type-people mingling over cocktails and that&#39;s what I used to think of
when I heard the word network. What I&#39;ve found though, is making connections
doesn&#39;t have to be uncomfortable. Twitter can be an extremely useful tool for
chatting with prominent developers in your area, and you can also ask them an
occasional question. So not only can you make connections and form
relationships, but also you can get some help from experts in the field. Forming
relationships on twitter enabled me to speak at my first meetup.</p>
<p>Twitter isn&#39;t the only way to have success with this. I&#39;ve connected with people
over linkedin and in person as well. Find what works for you. One last tip on
this - it&#39;s a lot easier to network when you <em>arent</em> desperate for a job. When
you reach out to someone while you&#39;re looking for a job, no matter how well your
intentions are, it might come across like you&#39;re looking for a handout. I
addressed this by networking very early in the bootcamp, so the pressure of
finding a job was lifted.</p>
<p>This isn&#39;t a ground breaking list of tips, but I was surprised to see people who
failed to do one or multiple of these things. Give it a go, and I wish you the
best of luck in your new journey as a developer!</p>
]]></description><link>/2016/three-quick-tips.html</link><guid isPermaLink="true">/2016/three-quick-tips.html</guid><category><![CDATA[devmtn]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Fri, 24 Jun 2016 08:29:00 GMT</pubDate></item><item><title><![CDATA[Actually The Last Of The Notes]]></title><description><![CDATA[<h2 id="wait-i-found-more-notes">WAIT I FOUND MORE NOTES</h2>
<p>These should be the very last of the notes taken while at DevMountain. I stuck
in like two comments somewhere just because there was something actually
incorrect, but as usual, please don&#39;t take anything in here seriously, there&#39;s a
pretty good chance I didn&#39;t know what I was talking about when I wrote a lot of
this.</p>
<hr>
<pre class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-keyword">var</span> args = [].slice.call(<span class="hljs-built_in">arguments</span>)
  <span class="hljs-keyword">var</span> initial = args.shift()
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replacer</span>(<span class="hljs-params">text, replacement</span>)</span>{
    <span class="hljs-keyword">return</span> text.replace(<span class="hljs-string">&#39;%s&#39;</span>, replacement)
  }
  <span class="hljs-keyword">return</span> args.reduce(replacer, initial)
}</code></pre><p>this is my implementation, called format.js, stolen mostly from bevacqua. it&#39;s
like util.format(), but for not-node.</p>
<p>so, you can pass arguments to console.log and console.error that will be passed
to util.format()</p>
<p>so %s for strings, %d for numbers, and %j for objects are valid</p>
<pre class="hljs"><code>console.<span class="hljs-function"><span class="hljs-title">trace</span><span class="hljs-params">(label)</span></span>
console.<span class="hljs-function"><span class="hljs-title">time</span><span class="hljs-params">(label)</span></span> and console.<span class="hljs-function"><span class="hljs-title">timeEnd</span><span class="hljs-params">(label)</span></span>
console.<span class="hljs-function"><span class="hljs-title">assert</span><span class="hljs-params">(expression, arguments)</span></span>
console.<span class="hljs-function"><span class="hljs-title">dir</span><span class="hljs-params">(object)</span></span></code></pre><hr>
<p>Don&#39;t use Mongoose. Mongoose actually does have all the problems I thought it
had. Try Mongolayer at least once. <a href="https://github.com/simpleviewinc/mongolayer">https://github.com/simpleviewinc/mongolayer</a>
<code>npm i --save mongolayer</code></p>
<p>Recursive populates, create vs insert fixed, find/create and save using
different syntax fixed, and each document only having the fields added to it,
rather than being a whole new instance of the schema fixed. Records getting
default values instead of not filling that field fixed. Plus other things.</p>
<hr>
<p>Generators DO look just like infinite loops. I&#39;m not wrong. Turns out that&#39;s
because they are infinite loops, but that&#39;s okay, because they&#39;re basically kind
of backgrounded until called. You hit it up with an iterator, get what you need,
and then it goes back to sleep. So, in a way, maybe that&#39;s kind of like a
builtin thing that you&#39;d imagine needs to be an infinite loop, but isn&#39;t in the
way because you only poke it when you need it. (Like Math.random(), kinda?)
That&#39;s my interpretation, anyway.</p>
<hr>
<h2 id="notes-on-mongo-schema-design">Notes on Mongo schema design</h2>
<h4 id="-in-a-one-to-n-sort-of-situation-">(in a one-to-n sort of situation...)</h4>
<ul>
<li>Embed N if low cardinality &amp; don&#39;t need to access embedded N standalone (outside parent object&#39;s context) (array of documents)<ul>
<li>Array of refs to N objects if cardinality is one-to-many, or if N objects should need to stand alone (array of refs)</li>
<li>Ref to One from the N objects if cardinality is very high (parent ref in the N-side document)</li>
</ul>
</li>
</ul>
<h4 id="the-six-rules-of-thumb-according-to-mongodb-">the six rules of thumb, according to mongodb:</h4>
<pre class="hljs"><code><span class="hljs-number">1</span>. favour embedding unless there <span class="hljs-keyword">is</span> a compelling reason <span class="hljs-keyword">not</span> <span class="hljs-keyword">to</span>
<span class="hljs-number">1</span>. needing <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> an object <span class="hljs-keyword">on</span> its own <span class="hljs-keyword">is</span> a compelling reason
<span class="hljs-number">1</span>. arrays should <span class="hljs-keyword">not</span> grow. more than a couple hundred <span class="hljs-keyword">on</span> the <span class="hljs-attribute">&#39;many</span>&#39; side, don<span class="hljs-attribute">&#39;t</span> embed. <span class="hljs-keyword">if</span> there are more than a couple thousand, don<span class="hljs-attribute">&#39;t</span> <span class="hljs-keyword">use</span> an <span class="hljs-keyword">array</span> <span class="hljs-keyword">of</span> objectid refs.
<span class="hljs-number">1</span>. don<span class="hljs-attribute">&#39;t</span> fear application-level joins.
<span class="hljs-number">1</span>. keep r/w ratio <span class="hljs-keyword">in</span> mind <span class="hljs-keyword">when</span> denormalizing. mostly read <span class="hljs-keyword">is</span> a good candidate. frequently updated means it<span class="hljs-attribute">&#39;s</span> <span class="hljs-keyword">not</span> worth it.
<span class="hljs-number">1</span>. structure your models around how you will <span class="hljs-keyword">access</span> data. how the app queries <span class="hljs-keyword">and</span> updates are very important here.</code></pre><hr>
<p>Type <em>introspection</em> is a feature of languages where, at runtime (which, for the
sake of keeping it in my head, we&#39;ll say is when said language goes from source
to not-source, whether that&#39;s a binary or a browser window, or whatever... (Java
bytecode doesn&#39;t count, I&#39;m not even sure where it falls on the range of
&#39;scripting&#39; to &#39;compiled&#39;)  a program can take a peek inside and see what the
<em>type</em> of an <em>object</em> is.</p>
<p>So:</p>
<pre class="hljs"><code><span class="hljs-literal">A</span>=Class.new
B=Class.new <span class="hljs-literal">A</span>
<span class="hljs-literal">a</span>=<span class="hljs-literal">A</span>.new
b=B.new
<span class="hljs-literal">a</span>.instance_of? <span class="hljs-literal">A</span>
=&gt; <span class="hljs-literal">true</span>
b.instance_of? <span class="hljs-literal">A</span>
=&gt; <span class="hljs-literal">false</span>
b.kind_of? <span class="hljs-literal">A</span>
=&gt; <span class="hljs-literal">true</span></code></pre><pre class="hljs"><code><span class="hljs-keyword">if</span> (<span class="hljs-variable">$obj</span> instanceof Cat) {
    // hey look, it<span class="hljs-string">&#39;s a cat!
}</span></code></pre><pre class="hljs"><code>thingy = <span class="hljs-function"><span class="hljs-title">whatever</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span></span>
blingy = <span class="hljs-function"><span class="hljs-title">blahhh</span><span class="hljs-params">(<span class="hljs-number">17</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">type</span><span class="hljs-params">(thingy)</span></span>
&lt;type <span class="hljs-string">&#39;whatever&#39;</span>&gt;
<span class="hljs-function"><span class="hljs-title">isinstance</span><span class="hljs-params">(thingy, type(whatever)</span></span>)
True
<span class="hljs-function"><span class="hljs-title">isinstance</span><span class="hljs-params">(thingy, type(blingy)</span></span>)
False</code></pre><p>Python also has <code>hasattr</code>, which is nifty.</p>
<hr>
<h2 id="cron-in-node">Cron in Node</h2>
<p><code>node-schedule</code> seems quite popular. It&#39;s a &#39;cron-like&#39; and &#39;not-cron-like&#39;
scheduler. I believe that means it&#39;s a scheduler, but it&#39;s time based instead of
interval based (because <code>setInterval</code> exists). Node-schedule is for in-process
scheduling, so once your script has executed, it&#39;s gone (and then cron makes a
lot more sense, because otherwise you&#39;d have to write a script just to start
node-schedule to do whatever it is that you need done at whatever time and/or
date).</p>
<hr>
<p>Gulp:</p>
<pre class="hljs"><code>gulp.task(<span class="hljs-string">&#39;nameOfTask&#39;</span>, [<span class="hljs-string">&#39;arraywithTasksToExecute&#39;</span>, <span class="hljs-string">&#39;beforeThisTaskHappens&#39;</span>, <span class="hljs-string">&#39;whichAreOptionalReally&#39;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{})</code></pre><hr>
<h2 id="electron-vs-node-webkit">Electron vs Node Webkit</h2>
<ul>
<li>Electron: <code>main</code> in <code>package.json</code> is the <code>app.js</code> or whatever to run.</li>
<li>nw.js: <code>main</code> is the <code>index.html</code> to display.</li>
<li>nw.js: can specify options about window, such as toolbar, width, and height.</li>
<li>electron: you do that in the app.js or whatever.</li>
<li>electron&#39;s menus are available on the main process. for dynamic updates to menus from within the app (rendering process), need to use ipc (built-in to electron).</li>
<li>nw: call set menu, and set stuff. it&#39;s all bundled anyway, so whatever.</li>
<li>nw: shell calls are totally fine.</li>
<li>electron: need to spawn child procs with the <code>pipe</code> stdio option.</li>
</ul>
<p>A package for nw.js is a zip archive wit hthe extension &#39;nw.&#39; There must be a
package.json, which includes the &#39;main&#39; key (html to open on load), and name of
package (similar to node modules).</p>
<p>&#39;nodejs&#39; field on package.json is boolean; set false to disable node running
there (purely client-side). node-main is the path to the script for node to run
(so we could have nodde run the server, and nwjs working with its own files, and
there _shouldn&#39;t- be conflict.)</p>
<ul>
<li>user-agent (should be pretty obvious.)</li>
<li>remote enalbes calling node in remote pages, whitelist of hostnames.</li>
<li>chromium-args (literally).</li>
<li>js-flags (string) for example:<code>{&quot;name&quot;: &quot;test&quot;, &quot;main&quot;: &quot;index.html&quot;, &quot;js-flags&quot;: etc function etc}</code></li>
<li><p>inject-js-start and inject-js-end (THESE ARE THE IMPORTANT BITS, PAY ATTENTION HERE!)</p>
<ul>
<li>start: local filename (relative to index.html) to specify js to inject. js is executed AFTER all css, but BEFORE any other scripts are run or the dom is built.</li>
<li>end: same, but it&#39;s excecuted AFTER loaded, before the onload event. mostly used as an option of Window.open() to inject js into a new window.</li>
</ul>
</li>
<li><p>window:</p>
<ul>
<li>title str</li>
<li>width/height int</li>
<li>tooolbar bool</li>
<li>icon str (path to the icon)</li>
<li>position  str (null, center, or mouse)</li>
<li><code>min_width</code>, <code>min_height</code>, <code>max_width</code>, <code>max_height</code> int</li>
<li><code>as_desktop</code> bool show as x server desktop background window</li>
<li>resizable bool<ul>
<li>always-on-top bool</li>
</ul>
</li>
<li>visible-on-all-workspaces bool</li>
<li>fullscreen bool</li>
<li><code>show_in_taskbar</code> bool</li>
<li>frame bool (sets frameless; avoid if setting fullscreen to true!)</li>
<li>show bool (false would mean hidden startup [tray?])</li>
<li>kiosk bool (fullscreen, prevents mouse-driven leaving app; alt-f4 still works, and ctrl-q probably does as well)</li>
<li>transparent bool (would need composition support) (if true, set with rgba as in css)</li>
</ul>
</li>
<li><p>webkit</p>
<ul>
<li>plugin bool (defaults false, for loading media plugins)</li>
<li>java bool (fuck no, leave that shit where it is)</li>
<li>page-cache bool</li>
</ul>
</li>
</ul>
<p>More on nw stuff:</p>
<p>whether a .nw file (renamed zip) or project directory, the package.json needs to
be in the root, and if it&#39;s the .nw, that needs to be the actual project
directory contents, not a directory containing them.</p>
<p><code>console.log</code> redirects to dev tools (same with console.warn and console.error)</p>
<p>the <code>process</code> object:</p>
<ul>
<li><code>process.versions[&#39;node-webkit&#39;]</code> is set with nw&#39;s version<ul>
<li><code>process.versions[&#39;chromium&#39;]</code> is set with the chromium version that the nw version is based on (so, for example, node-webkit version 0.13.0-alpha7, chromium version 47.0.2526.73, node version 5.1.0)</li>
<li><code>process.mainModule</code> is set to the <em>start</em> page, eg <code>index.html</code>--this is whatever&#39;s under <code>main</code> in the package.json, UNLESS there&#39;s a specified <code>node-main</code> field there.</li>
</ul>
</li>
</ul>
<p><code>__dirname</code> can only be called by node modules (with <code>require()</code>). webkit doesn&#39;t have that (not in devtools either). a hacky fix:</p>
<p><code>exports.dirname = __dirname</code> in a file, then require that (eg <code>var dirname = require(&#39;./dirnamefile&#39;).dirname; console.log(dirname)</code> would return dirname).</p>
<hr>
<h1 id="misc-node-things">MISC NODE THINGS</h1>
<p>What the hell is an event emitter, anyway? Oh, okay. So. Here&#39;s an example.
<code>net.Server</code> emits an event when a peer connects. <code>fs.readStream</code> emits an event
when a file is opened. <code>events.EventEmitter</code> objects! This can be accessed
directly by requiring <code>events</code>.</p>
<p>Functions can be executed when an event is emitted--these are called
<strong>listeners</strong> (not something silly like emitter methods or whatever, that would
just be nonsense). In those functions, <code>this</code> is the <code>EventEmitter</code> to which the
listener is attached.</p>
<p>Something worth noting: <em>HANDLE EVENTEMITTER ERRORS</em>. Errors are special events
in node, and if there&#39;s no listener for it, node&#39;ll just print a stack trace and
exit. So always always always be aware, and do something like <code>.on(&#39;error&#39;, fn)</code>
to make sure you&#39;re handling errors the way you <strong>want</strong> to handle them, rather
than just letting shit crash and die.</p>
<hr>
<p>Gulp core&#39;s api is THIS SIMPLE. Check this out.</p>
<pre class="hljs"><code>.<span class="hljs-function"><span class="hljs-title">src</span><span class="hljs-params">(globs [, options])</span></span>   <span class="hljs-comment">// takes glob, returns stream in</span>
.<span class="hljs-function"><span class="hljs-title">dest</span><span class="hljs-params">(path)</span></span>               <span class="hljs-comment">// takes path, returns stream out</span>
.<span class="hljs-function"><span class="hljs-title">task</span><span class="hljs-params">(name [, deps], fn)</span></span>  <span class="hljs-comment">// defines task</span>
.<span class="hljs-function"><span class="hljs-title">run</span><span class="hljs-params">(tasks... [, cb])</span></span>     <span class="hljs-comment">// runs task</span>
.<span class="hljs-function"><span class="hljs-title">watch</span><span class="hljs-params">(glob [, opts], cb)</span></span> <span class="hljs-comment">// watches fs</span></code></pre><p>That&#39;s IT. The entire codebase is actually readable in a relatively short amount
of time. Fuckin&#39; beautiful.</p>
<p>Clearly that doesn&#39;t include <code>.pipe()</code>, but pipe isn&#39;t exactly an api thing I
think. It&#39;s a pipe. That&#39;d be like saying &#39;oh yeah, you need to learn |, that&#39;s
a really important thing&#39; or whatever. Sure, it&#39;s the most vital and fundamental
thing about *n*x, but it&#39;s not a thing you learn, I guess.</p>
<p>(note : pipe is from node, not gulp-specific)</p>
<hr>
<p>Regarding ES6 <code>let</code> and <code>const</code>: <code>let</code> would be mutable. <code>const</code> is basically
exactly what it sounds like.</p>
<p>(note : not exactly)</p>
<hr>
<p>React things:</p>
<p><code>componentWillMount()</code> is triggered <em>once</em>, before any rendering.</p>
<p><code>componentDidMount()</code> is triggered <em>after</em> initial rendering. Access to DOM, here!</p>
<p><code>componentWillReceiveProps(object nextProps)</code> triggers after component receives new props.</p>
<p><code>shouldComponentUpdate(object nextProps, object nextState)</code> optimize rendering, return false if no need to update.</p>
<p><code>componentWillUpdate(same as above, there ^^ )</code> triggered after shouldEtc,etc..., and before <code>render()</code>.</p>
<p><code>compnentDidUpdate()</code> after rendering. Modify the DOM here.</p>
<p><code>componentWillUnmount()</code> just before component unmounted from DOM--do cleanup here.</p>
<p><code>displayName</code> good for debug especially. ES6 classes, derived from class name.</p>
<p><code>getInitialState()</code> equivalent of constructor in classes.</p>
<p><code>getDefaultProps()</code> same, bro.</p>
<p><code>mixins</code> array</p>
<p><code>statics</code> properties and methods for component</p>
<hr>
<p>Webpack: <code>preLoaders</code> gets executed before <code>loaders</code>, regardless of order; this
still goes in under <code>module:{}</code>.  <code>jshint-loader</code> works in here! That&#39;ll just
look for your standard <code>.jshintrc</code>.</p>
<p>Eslint would be better for React, especially because of <code>eslint-plugin-react</code>.
Eslint also has autofixing (--fix) for some stuff.</p>
<p>With eslint we&#39;d just include that as an npm script, eg <code>npm run lint</code> with
<code>&quot;lint&quot;: &quot;eslint . --ext .js --ext .jsx --fix&quot;</code>.</p>
<p>Eslint also follows an <code>.eslintignore</code>, and an <code>.eslintrc</code>. Rules have
<em>severity</em>: 0 for disabled, 1 for warning, 2 for error. Some rules take an
<em>array</em> instead, like <code>&quot;quotes&quot;: [2, &quot;single&quot;]</code>.</p>
<p>When there&#39;s a lint error with Eslint, npm will give you an <code>ELIFECYCLE</code> error.
To hide that, we could do <code>npm run lint --silent</code>; alternatively, the same npm
script above could have <code>|| true</code> appended, but if we invoke that from somewhere
else, it&#39;ll pass even when there are failures.</p>
<p><code>jscs</code>, with <code>jscs-loader</code>, follows <code>.jscsrc</code>.</p>
<p>And, lastly, there&#39;s always EditorConfig and the <code>.editorconfig</code> file.</p>
<hr>
<p>Flux: really just an architecture pattern that means it has a <em>unidirectional
data flow</em>. Like, seriously, that&#39;s all. Here&#39;s an example diagram: <code>Actions -&gt;
Data Stores -&gt; Components (Views)</code>. That&#39;s <em>it</em>. All Flux really is is a way of
<em>thinking</em> about things. That&#39;s why there are libraries that <em>implement</em> Flux
patterns, like Alt.</p>
<p>Another example diagram:</p>
<pre class="hljs"><code>  Stores &lt;- - <span class="hljs-string">\</span>
 |              Components
 |(listens)      |
 <span class="hljs-string">\</span>               / <span class="hljs-function"><span class="hljs-params">(calls)</span>
  --&gt;</span> Actions &lt;--</code></pre><hr>
<p>Some React Vocab:</p>
<p>As of some...time, <em>all</em> React custom components <em>must</em> be Uppercase, like This,
to differentiate from standard xml/html. See <a href="https://gist.github.com/sebmarkbage/f1f4ba40816e7d7848ad">this
gist</a> for more info on
that.</p>
<p>There are five main types in React (and that&#39;s a horrible word to use, can we
think of something better? Kinds of elements? Things? Idk...).</p>
<p>React Elements are the primary... thing. A <code>ReactElement</code> has four properties:
type, props, key, ref. No methods, nothing on prototype. Created like <code>var foo =
React.createElement(&#39;div&#39;).</code> You pass these to <code>React.render</code>, with a DOM element
(HTML or SVG), like <code>React.render(foo, document.body)</code>. To add properties to it,
pass a properties object as the second argument. Children to the third. (Note
that if using JSX, that&#39;s a bit less verbose.</p>
<p><code>ReactElement</code>-<em>factory</em> is a function that generates <code>ReactElement</code> with
specific <code>type</code> property. <code>function createFactory(type){return
React.createElement.bind(null, type)}</code>; <code>var div = React.createFactory(&#39;div&#39;);
var foo = div({className: &#39;my-div&#39;}); React.render(foo, document.body)</code>. Common
HTML tags have built-in factories in React (like <code>var quux = React.DOM.ul</code> or
<code>var bar = React.DOM.li</code>). But, again, JSX negates the need for factories.</p>
<p><code>ReactNode</code> could be <code>ReactElement</code>, string, number, or array of ReactNodes
(<code>ReactFragment</code>). This is a property of other <code>ReactElement</code>s used to represent
children. Kind of basically create a tree of REs.</p>
<p><code>ReactComponent</code> would be where the real meat of React can be found. Here we can
create whatsits in React, and then sort of encapsulate them with their own
little embedded <em>state</em>. And remember, in React, everything is state. And
everything is a really ugly bit of PHP that wants to be Javascript. So, <code>var
thingy = React.createElement(SomeComponent)</code> or <code>var thingy = &lt;Some Component
/&gt;</code></p>
<pre class="hljs"><code>React.render = (ReactElement, HTMLElement | SVGElement) =&gt; ReactComponent

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ReactNode</span> </span>= ReactElement | ReactFragment | ReactText

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ReactElement</span> </span>= ReactComponentElement | ReactDOMElement

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ReactDOMElement</span> </span>= {
    <span class="hljs-class"><span class="hljs-keyword">type</span>: <span class="hljs-title">string</span>,</span>
    props: {
        children: ReactNodeList,
        className: string,
        etc.
    },
    key : string | boolean | number | <span class="hljs-keyword">null</span>,
    ref : string | <span class="hljs-keyword">null</span>
}

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ReactComponentElement</span>&lt;TProps&gt; </span>= {
    <span class="hljs-class"><span class="hljs-keyword">type</span>: <span class="hljs-title">ReacetClass</span>&lt;TProps&gt;,</span>
    props: TProps,
    key : string | boolean | number | <span class="hljs-keyword">null</span>,
    ref : string | <span class="hljs-keyword">null</span>
}

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ReactFragment</span> </span>= Array&lt;ReactNode | ReactEmpty&gt;

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ReactNodeList</span> </span>= ReactNode | ReactEmpty

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ReactText</span> <span class="hljs-title">string</span> | <span class="hljs-title">number</span></span>

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ReactEmpty</span> </span>= <span class="hljs-keyword">null</span> | undefined | boolean

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ReacetClass</span>&lt;TProps&gt; </span>= (TProps) =&gt; ReactComponent&lt;TProps&gt;

<span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">ReactComponent</span>&lt;TProps&gt; </span>= {
    props: TProps,
    render: () =&gt; ReactElement
}</code></pre><hr>
<h4 id="waterfall-model-">Waterfall Model:</h4>
<pre class="hljs"><code><span class="hljs-function"><span class="hljs-title">Requirements</span> ==&gt;</span>
<span class="hljs-function">  <span class="hljs-title">Design</span>       ==&gt;</span>
<span class="hljs-function">    <span class="hljs-title">Implementation</span> ==&gt;</span>
<span class="hljs-function">        <span class="hljs-title">Verification</span> ==&gt;</span>
            Maintenance</code></pre><p>Also known as:</p>
<pre class="hljs"><code><span class="hljs-function"><span class="hljs-title">Denial</span> ==&gt;</span>
<span class="hljs-function">  <span class="hljs-title">Bargaining</span> ==&gt;</span>
<span class="hljs-function">    <span class="hljs-title">Anger</span>      ==&gt;</span>
<span class="hljs-function">      <span class="hljs-title">Depression</span> ==&gt;</span>
          Acceptance</code></pre><hr>
<p>TO DISPLAY BRACES (<code>{{}}</code>) IN ANGULAR, YOU NEED TO WRAP THEM IN A WHATEVER
(<code>&lt;span&gt;</code>, <code>&lt;p&gt;</code>, whatever) AND GIVE THAT TAG THE ATTRIBUTE <code>ng-non-bindable</code>,
LIKE IN <code>&lt;code ng-non-bindable&gt;{{show.things}}&lt;/code&gt;</code>.</p>
<hr>
<p>Dates/times in JS:</p>
<pre class="hljs"><code><span class="hljs-tag">var</span> myDate  = new <span class="hljs-function"><span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-string">&#39;December 31, 2015 11:58:30&#39;</span>)</span></span>
  , myEpoch = myDate.<span class="hljs-function"><span class="hljs-title">getTime</span><span class="hljs-params">()</span></span>/<span class="hljs-number">1000.0</span>
console.<span class="hljs-function"><span class="hljs-title">log</span><span class="hljs-params">(myEpoch)</span></span>

<span class="hljs-tag">var</span> yourDate  = new <span class="hljs-function"><span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-number">1451631690</span> * <span class="hljs-number">1000</span>)</span></span>
console.<span class="hljs-function"><span class="hljs-title">log</span><span class="hljs-params">(yourDate.toGMTString()</span></span> + <span class="hljs-string">&#39; &#39;</span> + yourDate.<span class="hljs-function"><span class="hljs-title">toLocaleString</span><span class="hljs-params">()</span></span>)</code></pre><hr>
<pre class="hljs"><code>_.isString(<span class="hljs-keyword">str</span>) = (<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">str</span> === <span class="hljs-string">&#39;string</span>&#39;) = (toString.call(<span class="hljs-keyword">str</span>) === &#39;[object <span class="hljs-built_in">String</span>]&#39;)
<span class="hljs-comment">// underscore&#39;s okay, typeof is okay, but this one here is the shiznit, fo sho</span></code></pre><hr>
<p>A transpiler is a compiler. It takes code that can&#39;t be run on whatever engine
it&#39;s targetting, and compiles it so it works. The only actual difference is that
when funky-code-X is compiled into normal-code-Y, it stays at around the same
level of abstraction. So, turning JSX or ES6 into ES5 doesn&#39;t really make a vast
difference in terms of performance, and it&#39;s not like Javascript is a low-level
language that we&#39;re compiling to, using Babel--we&#39;re just basically
cross-piling. Hence the &#39;trans&#39; prefix.</p>
<hr>
<pre class="hljs"><code><span class="hljs-comment">/<em> hides the element so it&#39;s just <em>gone</em> </em>/</span>
<span class="hljs-class">.thing</span> <span class="hljs-rules">{<span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> none</span></span>;}</span>
<span class="hljs-comment">/<em> hides its attributes and stuff, but the tag is still there, so it might take up space </em>/</span>
<span class="hljs-class">.stuff</span> <span class="hljs-rules">{<span class="hljs-rule"><span class="hljs-attribute">visibility</span>:<span class="hljs-value"> hidden</span></span>;}</span></code></pre><p>NPM -- local (to project) <code>.npmrc</code> <em>must</em> be <code>0600</code>! Otherwise NPM ignores them.
Idea being that they should only be readable and writable by the single user
account. The local <code>.npmrc</code> can be overridden by arguments (such as <code>npm config
set foo:port 9999</code>_).</p>
]]></description><link>/2016/actually-last-notes.html</link><guid isPermaLink="true">/2016/actually-last-notes.html</guid><category><![CDATA[devmtn]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Mon, 30 May 2016 02:00:00 GMT</pubDate></item><item><title><![CDATA[devmountain alumni meetup notes]]></title><description><![CDATA[<p>this was from some reasonably long time ago</p>
<ul>
<li><p>Barbara:</p>
<ul>
<li>Networking events matter.</li>
<li>Barbara from DM2 ended up as the only actual webdev at her company</li>
<li>This kinda means she&#39;s got to be everything from junior dev to PM</li>
<li>Definitely don&#39;t be self-deprecating about stuff.</li>
<li>Express interest outright in companies/their products.</li>
<li>Yeah, sure, don&#39;t talk yourself <em>up</em> too much, but seriously, communicate
well about what you&#39;ve actually managed to do, because they want to know.</li>
<li>Know why it is that a company makes the choices it does. Barbara&#39;s
example: knowing why it was the company she works for uses Angular.</li>
</ul>
</li>
<li><p>Mark:</p>
<ul>
<li>Having past projects to talk about <em>really</em> helps. Obviously. Duh.</li>
<li><a href="https://en.wikipedia.org/wiki/Situation,_Task,_Action,_Result">STAR</a> is a thing,
and maybe I should actually know what that is, I guess?</li>
<li>This is basically a totally disheartening little talk. What?</li>
<li>They asked him to rewrite his whole project in Scala. I&#39;m confused about what
this guy is actually even talking about. What is this?</li>
<li>His experience is basically one of being put through hell to get in with
some SAAS analytics-analytics company (yes, that&#39;s correct, his company
analyses analytics).</li>
<li>Actual takeaways: go to meetups, network with people, and talk about <em>why</em>
you actually want to be doing this.</li>
<li>Trying out actual interviews (like, with companies where it may or may not
ever happen, but basically you&#39;re not really counting on that working out
anyway) can be a lot more helpful than just going over responses on your own
or in an absolutely-no-pressure kind of situation.</li>
<li>Oh, wait, okay. As depressing as his little bit was, the actual point of it
is this: jump through the hoops, because it&#39;ll probably be worth it. Maybe
the company will pay you for your work on the project (I mean, that&#39;s kinda
becoming normal now, anyway). Maybe they won&#39;t -- and if they don&#39;t, use that
project or whatever on your portfolio.</li>
</ul>
</li>
<li><p>Dallin:</p>
<ul>
<li>He likes whatever it is that he does now, I guess.</li>
<li>He has &#39;come to realise more, the many fallacies in his personality.&#39;<ul>
<li>Yay?</li>
</ul>
</li>
<li>I don&#39;t know that he has any actual advice. Besides, basically, just kinda
don&#39;t be like him, because he&#39;s more about learning from mistakes than just,
like, maybe, not trying to make as many.</li>
<li>He said a lot of other things but I was too busy being really annoyed with
the damned profiles.devmounta.in project to take any other notes.<ul>
<li>Seriously, it wouldn&#39;t kill people to check pull requests before making
huge commits. I give up.</li>
</ul>
</li>
<li>Dallin learned Ruby in a week between getting hired and actually starting work.
That&#39;s pretty cool. He works mostly in Rails, and I know he does Coffeescript,
so chances are he learned that on the job (knowing Ruby definitely would&#39;ve
helped with that).</li>
</ul>
</li>
<li><p>Jeff:</p>
<ul>
<li>Don&#39;t make portfolio pieces that aren&#39;t accessible.<ul>
<li>Example: his Instagram analytics site.</li>
<li>If this isn&#39;t possible, do a video demo of that project.</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></description><link>/2016/alum-meetup.html</link><guid isPermaLink="true">/2016/alum-meetup.html</guid><category><![CDATA[devmtn]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Wed, 25 May 2016 23:39:25 GMT</pubDate></item><item><title><![CDATA[the last of the devmountain notes!]]></title><description><![CDATA[<p>This should be the very last of my random notes from my time going through
the course at <a href="http://devmounta.in">DevMountain</a>.</p>
<p>Finally.</p>
<p>As always, don&#39;t take this stuff too seriously, there&#39;s a fair chance a lot of
it is not correct, and any opinions have most likely changed maybe probably
sortakinda.</p>
<p>These last bits are in chronological order of file modification date. I believe
this was from during the second week of Angular.</p>
<hr>
<h2 id="angular">ANGULAR</h2>
<p>so, <code>expressions</code>, basically that&#39;s why we&#39;re gonna be mashing those braces
constantly. it&#39;s kind of like inline scripts, but minus the script tags?</p>
<p><code>directives</code> are the powerful bit. jqueryish dom extension? apparently something
we&#39;ll use a lot is <code>ngRepeat</code>, which, if it means writing less html, is a-ok
with me.</p>
<pre class="hljs"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">data-ng-repeat</span>=<span class="hljs-value">&quot;user in users&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">h4</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">user.name</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h4</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">user.properties</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></span></code></pre><p>so it&#39;s like how python folks write python everything, including html; we&#39;re
writing javascriptish markup! it makes sense in those terms. that snippet there
just created that same div for each user in users; say we have several user
objects, it&#39;ll just go right ahead and repeat that markup per user.</p>
<p><code>ngShow</code> determines if an element should be shown or not, based on a boolean.</p>
<pre class="hljs"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">data-ng-repeat</span>=<span class="hljs-value">&quot;pizza in boxes&quot;</span> <span class="hljs-attribute">data-ng-show</span>=<span class="hljs-value">&quot;pizza.topping == &#39;peppers&#39;&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">h4</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">pizza.shop</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h4</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">pizza.properties</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></span></code></pre><p>guess what. your gross-ass hawaiian pie? not in those divs, no sir.</p>
<p><code>ngSwitch</code> OHH THIS IS USEFUL. we could&#39;ve used this last week.</p>
<pre class="hljs"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">data-ng-switch</span>=<span class="hljs-value">&quot;pizza.photo&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">h3</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">pizza.stuff</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">h3</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>your pie totally looks this goods<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">&quot;pepperoni.jpg&quot;</span> <span class="hljs-attribute">data-ng-switch-when</span>=<span class="hljs-value">&quot;pepperoni&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">&quot;hawaiian.bmp&quot;</span> <span class="hljs-attribute">data-ng-switch-when</span>=<span class="hljs-value">&quot;gross_as_fuck&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">&quot;heaven.png&quot;</span> <span class="hljs-attribute">data-ng-switch-when</span>=<span class="hljs-value">&quot;peppers&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span></span></code></pre><hr>
<p>directives straight up from angular are all named <code>ngSomethingStuff</code>; they&#39;re
used like &quot;ng-something-stuff&quot; (or &quot;data-ng-something-stuff&quot;) in view. they can
also be comments (?), dom elements, or CSS classes (oh hai jquery what up).</p>
<p>one could use &#39;operations&#39; within those little handlebars up there (i believe
we&#39;re calling those <code>expressions</code>, and <code>operations</code> would be our word for
executable snippets, basically?). so <code>{{pizzza.beInMe()}}</code> is totally valid.</p>
<p><code>ngModel</code> to create two-way data-binding.</p>
<p>aaaaand i do believe this example just literally piped a username to uppercase.
OKAY. <code>{{name | uppercase}}</code> that is, apparently, called a <code>filter</code>, though in
the interest of correctness (and also just to irk ryan :P) i&#39;ll keep calling
them pipes, thank you very much.</p>
<p>hmm. it would seem the guy who wrote this intro to angular is either getting
paid by google, or currently sitting on someone&#39;s dick there... some of the
worship is just a wee bit too cloying for real life.</p>
<p><code>ngApp</code> is the directive to include a partial (to bind an application, in the
parlance). <code>ngView</code> to actually use it.</p>
<p><code>.config</code> does (whodathunkit) configuration, basically by d i (?). you <em>could</em>
pass a function with parameters named after what you&#39;re sourcing that way, but
it&#39;s not good practice (actually, i hadn&#39;t thought about that before... what
happens to variables by the time they&#39;ve been through minification, base62, and
gzip? ⊙▃⊙). instead, you should use an array with the names of the elements that
should get all shot up in your page, because, y&#39;know, ain&#39;t no one messing with
your actual data.</p>
<p><code>routes</code> are a big deal, from what i hear. here&#39;s a simple one from this guy&#39;s
blog post:</p>
<pre class="hljs"><code>angularStuff.config([<span class="hljs-string">&#39;$routeProvider&#39;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-variable">$routeProvider</span>) {
  <span class="hljs-variable">$routeProvider</span>.when(<span class="hljs-string">&#39;/objects&#39;</span>, {
        templateURI : <span class="hljs-string">&#39;view/objects.html&#39;</span>
    , controller  : <span class="hljs-string">&#39;ObjCtrl&#39;</span>
    }).otherwise({templateURI : <span class="hljs-string">&#39;view/NOPE.html&#39;</span>})
}])</code></pre><p>please forgive me, but i need to take a minute to say some things that should be
obvious.</p>
<p>yes, this way of working with partials and configs is pretty sweet, but let&#39;s be
honest, here, and very straightforward: partials and templating systems and
whatnot exist solely for the purpose of making things <em>easier</em> on the people
doing the programming. somehow i feel like going with even more nested
punctuation is more of an exercise in concrete poetry than a highly advanced and
developed javascript framework. ugh.</p>
<p><code>.controller</code> is, like, what you use for controllers. <code>$scope</code> links your
controllers and their bound views. (?) (or binded, if you&#39;re this fellow.)</p>
<pre class="hljs"><code>angularThang.controller(<span class="hljs-string">&#39;BTCtrl&#39;</span>, [<span class="hljs-string">&#39;$scope&#39;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-variable">$scope</span>) {
  <span class="hljs-variable">$scope</span>.objects = [{
    key  : <span class="hljs-string">&#39;value&#39;</span>
  , next : <span class="hljs-string">&#39;another&#39;</span>
  },{
    key  : <span class="hljs-string">&#39;let\&#39;</span>s do it again<span class="hljs-string">&#39;
  , next : &#39;</span>okay, now we\<span class="hljs-string">&#39;re done&#39;</span>
  }]
}])</code></pre><p><code>$watch</code> calls a listener for a controller on an attribute of its scope (oh boy,
pronouns, this is fun). <code>$broadcast</code> will trigger an event on a scope, which&#39;ll
be transmitted to that scope, and <em>all</em> of its children. to trigger a global
even, you&#39;d use <code>$rootScope</code>. without copying down every example from this
rather crudely typed out blog post, we&#39;re basically using
<code>$scope.$watch(stuff)</code>, <code>$scope.$broadcast</code>, <code>$scope.$on</code> etc. so, y&#39;know. extra
<code>$$$$$$$$</code> for everyone.</p>
<p>obviously <code>services</code> are gonna be my favourite toy here. there&#39;s an <code>$http</code>
builtin! (i think... as mentioned, this blogger is probably better at writing
code that writing words, so... i don&#39;t really know). so you can inject them (oh
geez, really? we&#39;re going with &#39;inject&#39; here? we couldn&#39;t&#39;ve said &#39;require&#39; or
&#39;load&#39; or some other generic and often used term that could maybe be <em>slightly</em>
less confusing in this context?) into your controllers and whatnots and
fiddlybits, straight up. same goes for custom
services/external/third-party/whatever, i suppose. basically you&#39;ve just got to
have some sort of usable api there for other services &amp; fiddlywhatnots to
access.</p>
<p><code>$http</code> is a thin wrapper on XHR; <code>$resource</code> is higher level (though without
any examples of how, all i have to go on is that you can call POST something
like &#39;save&#39; and get something like &#39;GIMME DAT&#39; or whatever... so... what?). and
i think <code>$resource</code> is <em>not</em> a builtin, because you&#39;d need to have a dependency
on <code>ngResource</code> to use it. and here he says we&#39;ve got <code>$httpBackend</code> built in to
test without a web server, but he doesn&#39;t mention if that&#39;s actually a builtin
or a core module that would need to be required, nor does he mention whether or
not it runs a webserver itself or just sends out a fake packet, internally, or
whatever.</p>
<hr>
<p>so, jeremy&#39;s super-boiled-down 10-second run-through of the MVC pattern
definitely clarified the actual role of the controller. i mean, i kind of
understood that it&#39;s basically binding models and views, but never really
understood it as the actual middleman until just now. that is awfully sensible.</p>
<p>implied, but not stated explicitly: react is less of a bottleneck as a view than
angular is.</p>
<p>something to keep in mind: <code>$scope</code> is straight up two-way binding, not sortof
or sometimes as was implied in the article.</p>
<p>oh, <code>directive</code> is basically just silly slang for attributes.</p>
<p>mismatched bits and bobs? not with angular, it&#39;ll just boink up some fresh new
dom nodes for your loose-ends</p>
<p>$timeout basically same syntax as setTimeout, except</p>
<pre class="hljs"><code><span class="hljs-variable">$timeout</span>(<span class="hljs-keyword">function</span>(){
  <span class="hljs-variable">$scope</span>.thing = <span class="hljs-string">&#39;that&#39;</span>
}, <span class="hljs-number">10000</span>)</code></pre><p>EVEYTHING that goes IN the html that angular will use is INSIDE of
ng-controller, attached to its $scope</p>
<p>so for the  HTML to even give a crap about what&#39;s going on in your javascript,
it&#39;s gotta be in a $scope. everything that you want angular to actually act on
had better be {{}} in the html and $scope in your js</p>
<p>as jeremy explained it, your js as it sits in your files is ALSO basically kind
of a starting point, because (and see 1.md for more notes on triggering events),
what angular does is (he said scan for but i understood it as wait for triggers
from) basically an excuse to go changing things. so your objects, variables,
whatever are OH MY GOD NOW I KNOW WHAT IMMUTABLE JAVASCRIPT IS A BIG DEAL OKAY
(no, not because of angular, but because it just hit me how how loose EVERYTHING
can really be in javascript... wow, no wonder js get so much hate. it probably
deserves it.)</p>
<p>ng-repeat makes a miniature scope for the foo part of <code>ng-repeat=&quot;foo in bar&quot;</code>
-- underneath, i suppose. that&#39;s super slick.</p>
<pre class="hljs"><code>&lt;input ng-model=<span class="hljs-string">&quot;someFilter&quot;</span>&gt; <span class="hljs-comment">// filter is a keyword to angular, it knows to look for a filter as defined by itself</span>
&lt;<span class="hljs-keyword">div</span> ng-repeat=<span class="hljs-string">&quot;some in such | filter: someFilter&quot;</span>&gt;
{{some.stuff}} {{some.things}} <span class="hljs-comment">// okay, and i suppose, it looks like filter is just a builtin that does just that one</span>
{{some.stuff}} {{some.things}} <span class="hljs-comment">// exact thing... it only shows the thing that you&#39;re inputting/providing as a filter</span>
{{some.stuff}} {{some.things}} <span class="hljs-comment">// BUT that does not necessarily have to mean actual filtered string fragments.</span>
{{some.stuff}} {{some.things}} <span class="hljs-comment">// THIS MAKES LIFE EASY.</span>
&lt;/<span class="hljs-keyword">div</span>&gt;
&lt;<span class="hljs-keyword">div</span> ng-repeat=<span class="hljs-string">&quot;some in such | filter: { name: someFilter location { name: locationNameFilter } }&quot;</span>&gt;
<span class="hljs-comment">// so basically we&#39;re interactively filtering here, but also filtering by the type of whatchamacallits,</span>
<span class="hljs-comment">// filtering the objects with a nesting (so, narrowing) way. we could that we need to pass an object,</span>
<span class="hljs-comment">// and that object ought to have a certain .property, and that key&#39;s value should PROBABLY have a capital A</span>
<span class="hljs-comment">// or else, y&#39;know, hey angular, throw that shit out.</span>
<span class="hljs-comment">// that, right there, could be a simple (though obviously not exactly performant...) way to work on that</span>
<span class="hljs-comment">// little knowledge management problem we have.</span>
<span class="hljs-comment">// &lt;div ng-init=&quot;whatisUPYO = true&quot;&gt;YO&lt;/div&gt;</span>
<span class="hljs-comment">// &lt;div ng-init=&quot;heywhatever = false&quot;&gt;YO&lt;/div&gt;</span>
<span class="hljs-comment">// &lt;div ng-show=&quot;heywhatever&quot;&gt;YOU CAN&#39;T SEE ME&lt;/div&gt;</span>
<span class="hljs-comment">// &lt;div ng-show=&quot;whatisUPYO&quot;&gt;BUT YOU CAN SEE ME&lt;/div&gt;</span>
<span class="hljs-comment">// within the ng-thingy&quot;IN HERE THIS PLACE THIS BIT RIGHT HERE&quot; you can</span>
<span class="hljs-comment">// basically work with any executable javascript code you&#39;d like...</span>
<span class="hljs-comment">// though that would be an awfully bad idea, i suppose.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// ... we have ng-hide also, which is just ng-show-&quot; = false &quot;</span>
<span class="hljs-comment">// so you&#39;re basically only hiding if (true/truthy). negates the need for</span>
<span class="hljs-comment">// double negatives, or some such.</span>
<span class="hljs-comment">// they&#39;re only really working on css <code>display: none;</code></span>
<span class="hljs-comment">// ng-if will actually keep something off the dom if it fails, so</span>
<span class="hljs-comment">// HOLY CRAP ANGULAR HAS A BUILT IN LINK FILTER. FILTER IS NOT JUST FILTER.</span>
<span class="hljs-comment">// this means you can probably pipe to a whole fucking LOAD of things, and</span>
<span class="hljs-comment">// seeing as scripting languages basically mostly exist to abstract themselves</span>
<span class="hljs-comment">// more and more every year until they grow actual intelligences...</span>
<span class="hljs-comment">// THIS MEANS THIS IS BASICALLY LIKE POSIX PIPES. WHICH MEANS I CAN, WITH A BIT OF WORK</span>
<span class="hljs-comment">// AND A LOT OF SYNTAX HELP AND PROBABLY ALL SORTS OF FAILURES, ESCAPING, SANITIZING,</span>
<span class="hljs-comment">// AND TESTING... basically it could become fairly easy to port posix utilities to</span>
<span class="hljs-comment">// angular. and since that&#39;s written in javascript... that could be extracted and</span>
<span class="hljs-comment">// maybe combined and turned into its own library for porting posix-compliant shell</span>
<span class="hljs-comment">// scripts (or, theoretically, any, i guess...) to... the... browser.</span>
<span class="hljs-comment">// oh gosh. this clarified some things, for sure.</span>
<span class="hljs-comment">// though i STILL DON&#39;T KNOW WHY WE NEED TO DO TEMPLATING WITH MORE PUNCUATION</span>
<span class="hljs-comment">// RATHER THAN LESS</span>
<span class="hljs-comment">// JADE MAKES THINGS EASIER</span>
<span class="hljs-comment">// SO DOES STYLUS</span>
<span class="hljs-comment">// SO WHAT THE HELL WHY CAN&#39;T JAVASCRIPT TEMPLATING FOR JAVASCRIPT ACTUALLY BE GOOD</span></code></pre><hr>
<pre class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">factorial</span> (<span class="hljs-title">num</span>){</span>
  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">num</span> == <span class="hljs-number">0</span>) {
  <span class="hljs-constant">return</span> <span class="hljs-number">1</span>
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-constant">return</span> (<span class="hljs-built_in">num</span> * factorial(<span class="hljs-built_in">num</span> - <span class="hljs-number">1</span>))
  }
}</code></pre><p>ngoptions: says hey, make this array into a selection dropbox kinda thing</p>
<p>ves) ng-model (and some other diretives) need to have a parent (or both) for expcetionally good looksk to w=be happpy</p>
<p>factories vs services vs providers; basically down to personal style, though we&#39;ll just go with ryan&#39;s style</p>
<hr>
<p>$q is angular&#39;s implementation of promises.</p>
<pre class="hljs"><code><span class="hljs-keyword">var</span> myDeferred = $q.defer()

<span class="hljs-keyword">async</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>) </span>{
  myDeferreed.resolve(val)
}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) </span>{
  myDeferred.reject(error)
})

<span class="hljs-keyword">async</span>(myDeferred.resolve, myDeferred.reject)
<span class="hljs-comment">//</span>
<span class="hljs-keyword">var</span> myPromise = myDeferred.promise
myPromise
.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;It worked!&#39;</span>, data)
}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;NOPE&#39;</span>, error)
})</code></pre><p>can assign success/failure ops right after creating the deferred (before async()), and can assign as many ops as we like.</p>
<p>we can also assign ONLY success or failure functions:</p>
<pre class="hljs"><code>promise.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;assigning only success here&#39;</span>)
})

promise.catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;assigning only failure here&#39;</span>)
}) <span class="hljs-comment">// this is the same as typing out promise.then(null.errorCallback)</span>

promise.finally(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;on, and this one will happen whether we fail or succeed.&#39;</span>)
})</code></pre><p>can chain promises (as values), for example asyncTwo(asyncOne), but like:</p>
<pre class="hljs"><code>var promise = asyncOne().<span class="hljs-keyword">then</span>(asyncTwo)

<span class="hljs-variable">$q</span>.reject(reason) // will <span class="hljs-keyword">return</span> rejected, with provided reason
<span class="hljs-variable">$q</span>.<span class="hljs-keyword">when</span>(<span class="hljs-keyword">value</span>) // will <span class="hljs-keyword">return</span> resolved, with provided <span class="hljs-keyword">value</span>.
<span class="hljs-variable">$q</span>.<span class="hljs-keyword">when</span>(<span class="hljs-keyword">value</span>) // can serve <span class="hljs-keyword">as</span> a wrapper <span class="hljs-keyword">for</span> a <span class="hljs-number">3</span>rd party promise. example:
$.ajax() //jQuery
var jqPromise = $.ajax({
// stuff here })
var angPromise = <span class="hljs-variable">$q</span>.<span class="hljs-keyword">when</span>(jqPromise)

<span class="hljs-variable">$q</span>.all( [] )
// <span class="hljs-keyword">in</span> the above, one passes an <span class="hljs-keyword">array</span> <span class="hljs-keyword">of</span> promises <span class="hljs-keyword">to</span> <span class="hljs-variable">$q</span>.all

//
// angular flow <span class="hljs-keyword">in</span> ten seconds or less:
// this is according <span class="hljs-keyword">to</span> luke, so it<span class="hljs-string">&#39;s probably correct.
// $http.get(url)
// promise.then on that
// to display it, call that function on the service
// return that, $scope.that thing
// {{let&#39;</span>s go ahead and display that.thing however we want that}}

//

// angular hits serious view bottleneck around <span class="hljs-number">1800</span> items.

// node<span class="hljs-string">&#39;s event loop is exactly the same as normal async javascript, just not in a browser

//

$q.defer() // making a promise
$q.resolve() // start resolving that promise, start invoking chain of .then callback functions,
             // aka &#39;</span>i<span class="hljs-string">&#39;m done and it worked!&#39;</span>

doThing(){
  function doThing(){
    var promise = <span class="hljs-variable">$q</span>.defer
    // stuff to do
    // this needs a callback, probably
      function callback(){
        promise.resolve([<span class="hljs-string">&#39;stuff&#39;</span>, <span class="hljs-string">&#39;that you got&#39;</span>, <span class="hljs-string">&#39;because you asked for it&#39;</span>])
      }
    return promise
  }
}

var url = <span class="hljs-string">&#39;http//zacanger.com/blog&quot;
var promise = $q.defer()
$http({
  method: &#39;</span>GET<span class="hljs-string">&#39;
, url: url
}).then(function(response){
  var whatever = response.data
  // do things
})</span></code></pre><p>okay, promises are so much simpler and more straightforward than people are probably thinking.
really, basically, we&#39;re just going over use-cases and examples now. which is totally fine,
of course.</p>
<p>note that when we go ahead and send a buncha chained promises, we&#39;re gonna get stuff back
however it comes back, not in the order we started things. we&#39;d want to sort things after,
if needed, not (obviously) within promises, because that would make all of that redundant;
we&#39;d basically be using promises to run some synchronous javascript, at that point.
dumb.</p>
<p>JSONP: this is how we get around cross-origin problems.</p>
<hr>
<pre class="hljs"><code><span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>{
  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    resolve(<span class="hljs-string">&#39;hi&#39;</span>)
  }, <span class="hljs-number">5000</span>)
})

<span class="hljs-keyword">return</span> promise

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">whatUp</span>(<span class="hljs-params"></span>)</span>{
  say(<span class="hljs-string">&#39;BLAHR&#39;</span>)
}</code></pre><hr>
<p>this.whatever makes &#39;whatever&#39; (in a service) visible to the controller.</p>
<p>it&#39;s a good idea to go ahead and be like</p>
<pre class="hljs"><code><span class="hljs-keyword">var</span> hello = <span class="hljs-string">&#39;oi!&#39;</span>

<span class="hljs-keyword">this</span>.returnedInfo = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
  <span class="hljs-keyword">return</span> hello
}</code></pre><p>that way... data is made, protected, changed, broken, etc., all in one place.
just accessed through that nice little function there.  i am so confused about
bananas</p>
<hr>
<pre class="hljs"><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">lang</span>=<span class="hljs-value">&quot;en&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">&quot;utf-8&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>o hello there<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">&quot;<a href="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.0-beta.1/angular.min.js">https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.0-beta.1/angular.min.js</a>&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">&quot;text/javascript&quot;</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span> <span class="hljs-attribute">ng-app</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">ng-controller</span>=<span class="hljs-value">&quot;MyApp&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">&quot;text&quot;</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">br</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">p</span> <span class="hljs-attribute">ng-cloak</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">strong</span>&gt;</span>howdy,<span class="hljs-tag">&lt;<span class="hljs-title">em</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">name</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">em</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyApp</span><span class="hljs-params">($scope)</span></span>{$scope.name = <span class="hljs-string">&quot;zacanger&quot;</span>}</span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></span></code></pre><hr>
<p>jer.html</p>
<pre class="hljs"><code><span class="xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">ng-app</span>=<span class="hljs-value">&quot;dm7FirstApp&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">&quot;utf-8&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>jeremy&#39;s example<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">body</span> <span class="hljs-attribute">ng-controller</span>=<span class="hljs-value">&quot;myCtrl&quot;</span>&gt;</span>
    This is Plain Text

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">&quot;background-color: red&quot;</span>&gt;</span>
      </span><span class="hljs-expression">{{<span class="hljs-variable">name</span>}}</span><span class="xml">
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    Input box : <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">&quot;text&quot;</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">&quot;foo&quot;</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>Curly Brackets : </span><span class="hljs-expression">{{<span class="hljs-variable">foo</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">&quot;person.name&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">&quot;person.cereal&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">&quot;person.media&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">&quot;person.random&quot;</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span>
      Your person is :
      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">person.name</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">person.cereal</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">person.media</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">div</span>&gt;</span></span><span class="hljs-expression">{{<span class="hljs-variable">person.random</span>}}</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Repeat<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>

    Filter: <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">&quot;carfilter.name&quot;</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">ng-repeat</span>=<span class="hljs-value">&quot;car in cars | filter: carfilter &quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">&quot;car&quot;</span>&gt;</span>
      </span><span class="hljs-expression">{{<span class="hljs-variable">car.name</span>}}</span><span class="xml"> - Year: </span><span class="hljs-expression">{{<span class="hljs-variable">car.year</span>}}</span><span class="xml">
    <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">h2</span> <span class="hljs-attribute">ng-init</span>=<span class="hljs-value">&quot;isAwesome = true&quot;</span>&gt;</span>Show/Hide<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">ng-show</span>=<span class="hljs-value">&quot;isAwesome&quot;</span>&gt;</span>Yay, you are awesome!<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">ng-hide</span>=<span class="hljs-value">&quot;isAwesome&quot;</span>&gt;</span>We&#39;re sorry you&#39;re not awesome<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">ng-if</span>=<span class="hljs-value">&quot;isAdmin&quot;</span>&gt;</span>You must be the boss<span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">button</span> <span class="hljs-attribute">ng-click</span>=<span class="hljs-value">&quot;isAwesome = !isAwesome&quot;</span>&gt;</span>Click Me!<span class="hljs-tag">&lt;/<span class="hljs-title">button</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">&quot;<a href="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.min.js">https://ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular.min.js</a>&quot;</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="actionscript"><span class="hljs-keyword">var</span> app = angular.module(<span class="hljs-string">&#39;dm7FirstApp&#39;</span>, []);

      app.controller(<span class="hljs-string">&#39;myCtrl&#39;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($scope, $timeout)</span></span>{
        $scope.name = <span class="hljs-string">&quot;That lame teacher&quot;</span>

        $scope.cars = [
          {name: <span class="hljs-string">&quot;Astin Martin&quot;</span>, year: <span class="hljs-number">1972</span>},
          {name: <span class="hljs-string">&quot;Kia&quot;</span>, year: <span class="hljs-number">1973</span>},
          {name: <span class="hljs-string">&quot;Jeep&quot;</span>, year: <span class="hljs-number">1975</span>},
          {name: <span class="hljs-string">&quot;51 Mercury&quot;</span>, year: <span class="hljs-number">1951</span>},
          {name: <span class="hljs-string">&quot;Tesla&quot;</span>, year: <span class="hljs-number">2008</span>}
        ]

        $scope.isAwesome = <span class="hljs-literal">true</span>
        $scope.isAdmin   = <span class="hljs-literal">true</span>

        $scope.clicked = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
          $scope.isAwesome = !$scope.isAwesome
        }

        $scope.person = {
          name: <span class="hljs-string">&quot;namless&quot;</span>,
          cereal: <span class="hljs-string">&quot;air&quot;</span>,
          media: <span class="hljs-string">&quot;silence&quot;</span>,
          random: <span class="hljs-string">&quot;nothing&quot;</span>
        }

        $timeout(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
          $scope.foo = <span class="hljs-string">&quot;bar&quot;</span>

          $scope.cars[<span class="hljs-number">2</span>].name = <span class="hljs-string">&quot;Monster Truck&quot;</span>
        }, <span class="hljs-number">3000</span>)

      })

    </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></span></code></pre><hr>
<p>j_promise_notes.js</p>
<pre class="hljs"><code>// controller
angular.module(<span class="hljs-string">&#39;httpApp&#39;</span>).controller(<span class="hljs-string">&#39;myCtrl&#39;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-variable">$scope</span>, myService){
  <span class="hljs-variable">$scope</span>.test = <span class="hljs-string">&quot;Working&quot;</span>

  <span class="hljs-variable">$scope</span>.isLoading = true
  var promise = myService.getStarship()

  promise.then(myService.getPilots)
  .then(function(starshipWithPilots){
    <span class="hljs-variable">$scope</span>.starship = starshipWithPilots
  }

  //    promise.then(validateEmails)
  //           .then(sendEmails)
  //           .then(reportSuccess)
  //           .then(askUserForResendOption)
  //           .then(resendMoreEmails)

})


// service
angular.module(<span class="hljs-string">&#39;httpApp&#39;</span>).service(<span class="hljs-string">&#39;myService&#39;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-variable">$http</span>, <span class="hljs-variable">$q</span>){
  var baseUrl = <span class="hljs-string">&quot;<a href="http://swapi.co/api/starships/10/?format=json">http://swapi.co/api/starships/10/?format=json</a>&quot;</span>
  this.getStarshipWithPilots = function(){
    var deferred = <span class="hljs-variable">$q</span>.defer()

    <span class="hljs-variable">$http</span>({
      method: <span class="hljs-string">&#39;GET&#39;</span>,
      url: baseUrl
    }).then(function(response){
      var starship = response.data

      var pilotObjs = []
      var totalPilots = starship.pilots.length

      starship.pilots.forEach(function(pilotUrl){
        <span class="hljs-variable">$http</span>({
          method: <span class="hljs-string">&#39;GET&#39;</span>,
          url: pilotUrl
        }).then(function(pilotResponse){
          pilotObjs.push(pilotResponse.data)

          if(pilotObjs.length === totalPilots){
            starship.pilots = pilotObjs
            //order pilots alphabetically
            deferred.resolve(starship)
          }
        })
      })
    })
    return deferred.promise
  }

  this.getStarship = function(){
    var deferred = <span class="hljs-variable">$q</span>.defer()
    <span class="hljs-variable">$http</span>({
      method: <span class="hljs-string">&#39;GET&#39;</span>,
      url: baseUrl
    }).then(function(response){
      var starship = response.data
      deferred.resolve(starship)
    })
    return deferred.promise
  }

  this.getPilots = function (starship){
    var deferred = <span class="hljs-variable">$q</span>.defer()
    var arrayOfPilotUrls = starship.pilots
    var pilotObjs = []
    var totalPilots = arrayOfPilotUrls.length

    arrayOfPilotUrls.forEach(function(pilotUrl){
      <span class="hljs-variable">$http</span>({
        method: <span class="hljs-string">&#39;GET&#39;</span>,
        url: pilotUrl
      }).then(function(pilotResponse){
        pilotObjs.push(pilotResponse.data)

        if(pilotObjs.length === totalPilots){
          starship.pilots = pilotObjs
          //order pilots alphabetically
          deferred.resolve(starship)
        }
      })
    })
    return deferred.promise
  }
})</code></pre>]]></description><link>/2016/last-devmtn-notes.html</link><guid isPermaLink="true">/2016/last-devmtn-notes.html</guid><category><![CDATA[devmtn]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Mon, 23 May 2016 03:35:27 GMT</pubDate></item><item><title><![CDATA[notes from my personal project at devmountain]]></title><description><![CDATA[<h1 id="this-is-probably-a-mess">this is probably a mess</h1>
<p>a whole bunch of basically totally disorganised notes from when i was working
on my &#39;personal project&#39; at devmountain.</p>
<p>this was meant to be a sort of ghost/medium for the desktop -- a blogging platform
for people who actually cared about writing. turns out no one really wants that.
also it turns out <a href="https://github.com/TryGhost/Ghost-Desktop">ghost was working on a desktop application</a>
cool.</p>
<p>requirements for this: make a mean stack app, basically.</p>
<p>anyway <a href="https://github.com/zacanger/ayuba">this is the remains of that poor app i built</a>
and more importantly here&#39;s the mess of notes i took while doing stuff with that.</p>
<hr>
<h2 id="planner">Planner</h2>
<p>At DevMountain, for projects, you&#39;re encouraged (required, really) to use a planning
paper, which is basically a big sheet of paper divided up into sections that represent
pieces of a standard MEAN-stack app, and a sort of roadmap-to-an-end-product thing along
the bottom.</p>
<p>I was actually out sick the day those got handed out for the personal projects, but NBD,
there was a PDF version floating around so I threw a little app up using that (converted to
PNG and colour-inverted) using a little bit of PHP and jQuery to make a kind of sticky-notes
bulletin-board kind of thingy to serve the same purpose. One benefit of this is that I was
able to easily just save all my notes out (they were all just in a big text file anyway, on
my server). Note: I&#39;d initially planned on using my earlier app from my &#39;no-server&#39; project
(something we do at DevMountain early on, just an Angular app that can actually use a server
so long as it&#39;s a BaaS and not one we&#39;ve spent time doing, because we don&#39;t actually know how
to do that at that point) called <a href="https://github.com/zacanger/markvi">markvi</a>.</p>
<p>Anyway, these are the contents from my planning thing.</p>
<h3 id="ideas-and-users">Ideas and Users</h3>
<p>concept: a blogging platform <em>for writers, and readers</em>, based not around the
ADHD social media style of content-creation and likes and shares that&#39;s taken
over the popular idea of the blog, but instead around long-form writing; essays,
meaningful stories, and such. the target audience here is the moderately
technically savvy pseudo-bohemian; 25-50, used to smoke cloves, probably hangs
out in coffee shops too much.</p>
<h3 id="features">Features</h3>
<ul>
<li>mvp: oh wait, that&#39;s already done. well, except for getting it to work in the
desktop client, which is the entire idea here.</li>
<li>the rest:<ul>
<li>a clean, simple &#39;feed&#39; (a la jekyll archive pages), filterable by tag and possibly date.</li>
<li>comments.</li>
<li>import/export without relying on the browser (to markdown and html).</li>
</ul>
</li>
</ul>
<h3 id="views">Views</h3>
<ol>
<li>the existing markdown editor (however, likely revamped to move away from
plain old codemirror, and to include a basic rte-style toolbar).</li>
<li>the rendered panel, alone (the reading view; same on one&#39;s own posts as
someone else&#39;s).</li>
<li>the &#39;social&#39; view: a feed, no &#39;content-based&#39; sorting, just purely ordered
chronologically, and filterable by tag (and POSSIBLY date range).</li>
<li>-ish?: comments. they&#39;ll be isolated (data-wise), so it may be smarter to
load them in dynamically (see: discourse [not discuz, they&#39;re ruby], but don&#39;t
do that stupid thing where half the page disappears, that&#39;s some annoying-ass
bullshit).</li>
<li>settings. VERY simple. name, email, password, export (if possible) to an
archive file, delete account.</li>
</ol>
<h3 id="controllers">Controllers</h3>
<ul>
<li>browser, main, and nav (see existing codebase)</li>
<li>not controllers, but...</li>
<li>services: files (existing)</li>
<li>filters: filename and cut (existing)<ul>
<li>by tag (feed view)</li>
<li>(also possibly by date -- narrowing -- feed view)</li>
</ul>
</li>
</ul>
<h3 id="endpoints">Endpoints</h3>
<p>Those are a thing, yes.</p>
<h3 id="schemas">Schemas</h3>
<pre class="hljs"><code>// possible schemas ??

<span class="hljs-keyword">const</span> mongoose = require(&#39;mongoose&#39;)

<span class="hljs-keyword">const</span> user = mongoose.<span class="hljs-type">Schema</span>({
  username : {<span class="hljs-keyword">type</span> : <span class="hljs-type">String</span>, required : <span class="hljs-literal">true</span>}
, pass     : {<span class="hljs-keyword">type</span> : <span class="hljs-type">String</span>, required : <span class="hljs-literal">true</span>, minlength : <span class="hljs-number">6</span>}
, post     : [{mongoose.<span class="hljs-type">Types</span>.<span class="hljs-type">ObjectId</span>, <span class="hljs-keyword">ref</span> : &#39;post&#39;}]
, comments : [{mongoose.<span class="hljs-type">Types</span>.<span class="hljs-type">ObjectId</span>, <span class="hljs-keyword">ref</span> : &#39;comment&#39;}]
})

<span class="hljs-keyword">const</span> post = mongoose.<span class="hljs-type">Schema</span>({
  title    : {<span class="hljs-keyword">type</span> : <span class="hljs-type">String</span>, required : <span class="hljs-literal">true</span>}
, content  : {<span class="hljs-keyword">type</span> : <span class="hljs-type">String</span>, required : <span class="hljs-literal">true</span>}
, tags     : <span class="hljs-type">Array</span>
, date     : {<span class="hljs-keyword">type</span> : <span class="hljs-type">Number</span>, default : new <span class="hljs-type">Date</span>()}
, author   : [{mongoose.<span class="hljs-type">Types</span>.<span class="hljs-type">ObjectId</span>, <span class="hljs-keyword">ref</span> : &#39;user&#39;}]
, comments : [{mongoose.<span class="hljs-type">Types</span>.<span class="hljs-type">ObjectID</span>, <span class="hljs-keyword">ref</span> : &#39;comment&#39;}]
})

<span class="hljs-keyword">const</span> comment = mongoose.<span class="hljs-type">Schema</span>({
  date    : {<span class="hljs-keyword">type</span> : <span class="hljs-type">Number</span>, default  : new <span class="hljs-type">Date</span>()}
, content : {<span class="hljs-keyword">type</span> : <span class="hljs-type">String</span>, required : <span class="hljs-literal">true</span>}
, post    : [{mongoose.<span class="hljs-type">Types</span>.<span class="hljs-type">ObjectId</span>, <span class="hljs-keyword">ref</span> : &#39;posts&#39;}]
, author  : [{mongoose.<span class="hljs-type">Types</span>.<span class="hljs-type">ObjectId</span>, <span class="hljs-keyword">ref</span> : &#39;user&#39;}]
})

mongoose.model(&#39;user&#39;, user)
mongoose.model(&#39;post&#39;, post)
mongoose.model(&#39;comment&#39;, comment)</code></pre><h3 id="other-thoughts-">Other Thoughts:</h3>
<p>this would be relatively easy to throw up in a web browser. blogging platforms
are a dime a dozen, especially ones built on node. the idea here isn&#39;t to make
another tumblr, but to bring actual writing back to the web. sort of like
medium, but without all the twitter. a key part of that is having it NOT be in a
browser. right now the goal is to put all this in an electron shell, but i&#39;m not
going to focus super hardcore on that right this moment. if i can get everything
else in place and rock-solid first, then i&#39;ll stuff it all in electron. if not,
then i&#39;ll just write up a manifest file and call it a chrome app. either way,
fuck y&#39;all, it&#39;s already got nigh on a thousand installs....</p>
<hr>
<h2 id="the-presentation-speech">The Presentation Speech</h2>
<p>This is what I&#39;d planned to say when presenting my app. I think instead
I just kind of mumbled a little bit about how neat CodeMirror is and how
annoying it was to struggle with the <code>&#39;node-integration&#39;</code> issue with
Electron.</p>
<h3 id="markdown">Markdown</h3>
<p>…is a lightweight markup language which makes writing for the web a much quicker
and easier process than if using a rich text editor (like Word), which wouldn&#39;t
translate to HTML anyway, or writing HTML manually. Intead of <code>&lt;em&gt;</code> or
<code>&lt;strong&gt;</code>, in Markdown you&#39;d use a <code>_</code> or <code>*</code>, or <code>__</code> or <code>**</code>. Readme files on
Github are usually written in an implementation of Markdown called Github
Flavoured Markdown, which shows just how popular the format has grown. Stack
Overflow, the Discourse comment system, and various blog systems including
Ghost, Wordpress, Tumblr all use Markdown, if not by default than as an option.</p>
<p>vi is possibly the most influential editor of, like, ever. it was written in
1976, and either vi or one of its descendants (usually vim, which stands for &#39;vi
improved&#39;) has been on almost every unix-based system since then, including
every computer in this building (except the microsoft machines -- and even on
those, if you have git-bash or something similar). vim&#39;s power comes from how
easily and quickly it can manipulate large chunks of text. For example, typing
in <code>d5k</code> will delete five lines upwards, and<code>497G</code> jumps to line 497.</p>
<p>So, putting these things together makes for a really great tool for writing. Not
necessarily writing Tweets or Facebook posts, but writing longer texts, like
articles or essays. That&#39;s the purpose of this app. It&#39;s not a social blog. It&#39;s
kind of like Medium minus Twitter, Tumblr minus reblogging, or LiveJournal
minus… teenagers.</p>
<p>Since the editor component itself is based around CodeMirror, it&#39;s very
extensible, which is exciting because it leaves so much open for future
development. For example, if we wanted to make this a Javascript editor instead,
we could just change a few lines and now we have the right syntax highlighting,
automatic indentation, et cetera.</p>
<p>Oh, and, so, this is all a desktop app. It runs perfectly fine in a browser, but
from the beginning it was really meant to be a desktop tool; browsers are
distracting, this not so much.</p>
<p>Aaaand here&#39;s the code.</p>
<hr>
<h2 id="misc-notes">misc notes</h2>
<p>All this stuff was just thrown in another file.
It&#39;s mostly to do with <a href="https://electron.atom.io">Electron</a>, I think.</p>
<p>check <a href="https://github.com/atom/electron/blob/master/docs%2Fapi%2Fbrowser-window.md">https://github.com/atom/electron/blob/master/docs%2Fapi%2Fbrowser-window.md</a>
before trying to get any other browser-shit going on--we&#39;ll want to move things
into their own windows, i feel; chromeless might be a good idea, at least for
the editor view</p>
<pre class="hljs"><code>const BrowserWindow = <span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&#39;electron&#39;</span>)</span></span><span class="hljs-class">.BrowserWindow</span>
let win = new <span class="hljs-function"><span class="hljs-title">BrowserWindow</span><span class="hljs-params">({width : <span class="hljs-number">1900</span>, height : <span class="hljs-number">1600</span>, frame : false})</span></span></code></pre><p>so basically it&#39;s just a new browser window, frame as false, but we want to
probably lock the px to whatever screen we&#39;re working with, if CSS continues to
fail miserably.</p>
<p>-- note: check how atom manages to not fuck that up. except those bits where
they do.</p>
<p>frameless = non-draggable (even with alt?). specify <code>-webkit-app-region: drag</code>
in css. or, say, <code>body { -webkit-app-region: drag }</code> for all of that. this
necessitates <code>button { -webkit-app-region: no-drag }</code> (same for non-button
clickables, one assumes).</p>
<ul>
<li><code>DownloadItem</code> is an eventemitter. will-download event of Session.</li>
<li>downloadItem.setSavePath(path)</li>
<li>downloadItem.cancel()</li>
<li>downloadItem.getURL() // origin url</li>
<li>file.path = real (fs) path</li>
</ul>
<h3 id="printing">printing</h3>
<pre class="hljs"><code>webContents.printToPDF(opts, cb) <span class="hljs-comment">// where:</span>
opts:
  marginsType: <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span> (<span class="hljs-number">0</span> <span class="hljs-keyword">default</span>)
  pageSize: <span class="hljs-string">&#39;A4&#39;</span>, <span class="hljs-string">&#39;A3&#39;</span>, <span class="hljs-string">&#39;Legal&#39;</span>, <span class="hljs-string">&#39;Letter&#39;</span>, <span class="hljs-string">&#39;Tabloid&#39;</span>
  printBackground: <span class="hljs-keyword">false</span> (duh)
  landscape: <span class="hljs-keyword">false</span> (is portrait)
cb <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, data)</span></span>{<span class="hljs-keyword">if</span> err etc, data = content buffer}

<span class="hljs-keyword">empty</span> opts = <code>{marginsType: &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, printBackground: &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, printSelectionOnly: &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, landscape: &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;}</code>

<span class="hljs-comment">// sample from electron docs</span>
<span class="hljs-keyword">const</span> BrowserWindow = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#39;electron&#39;</span>).BrowserWindow
<span class="hljs-keyword">const</span> fs = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#39;fs&#39;</span>)
<span class="hljs-keyword">let</span> win = <span class="hljs-keyword">new</span> BrowserWindow({width: <span class="hljs-number">800</span>, height: <span class="hljs-number">600</span>})
win.loadURL(<span class="hljs-string">&#39;<a href="http://github.com">http://github.com</a>&#39;</span>)
win.webContents.on(<span class="hljs-string">&#39;did-finish-load&#39;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-comment">// Use default printing options</span>
  win.webContents.printToPDF({}, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error, data)</span> </span>{
    <span class="hljs-keyword">if</span> (error) {
    <span class="hljs-keyword">throw</span> error
    }
    fs.writeFile(<span class="hljs-string">&#39;/tmp/print.pdf&#39;</span>, data, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error)</span> </span>{
      <span class="hljs-keyword">if</span> (error) {
        <span class="hljs-keyword">throw</span> error
      }
      console.log(<span class="hljs-string">&#39;done did dat&#39;</span>)
    })
  })
})</code></pre><ul>
<li>main process is a normal node script</li>
<li>renderer process is a normal website, plus node modules (eg in script tags or whatever)</li>
<li>electron&#39;s built-in modules don&#39;t need <code>require(&#39;asdf&#39;)</code>; set
<code>process.env.ELECTRON_HIDE_INTERNAL_MODULES = TRUE</code></li>
<li>shell.openExternal(url) opens in eg xdg-browser</li>
<li>shell.openItem(&#39;/FULL/path/to/item&#39;) = xdg-open</li>
</ul>
<h3 id="menus">menus</h3>
<ul>
<li>new MenuItem(opts):<ul>
<li>id: string, unique within menu</li>
<li>submenu</li>
<li>checked: bool</li>
<li>visible: bool</li>
<li>enabled: bool</li>
<li>label: string</li>
<li>type: normal, separator, submenu, checkbox, or radio</li>
<li>role: action; if specified, next thing will be ignored</li>
<li>click: function -- click(menuItem, browserWindow) -- this is that &#39;next thing&#39;</li>
</ul>
</li>
<li>recommended to set role:<ul>
<li>undo</li>
<li>redo</li>
<li>cut</li>
<li>copy</li>
<li>paste</li>
<li>selectall</li>
<li>minimize</li>
<li>close</li>
</ul>
</li>
</ul>
<p>electron-rebuild would automatically take care of headers &amp; native node module
builds. so, after each <code>npm i</code>, do a <code>./node_modules/.bin/electron-rebuild</code></p>
<p>the &#39;npm&#39; way: same as usual, except env variables:</p>
<pre class="hljs"><code><span class="hljs-keyword">export</span>
  npm_config_disturl=https:<span class="hljs-comment">//atom.io/download/atom-shell</span>
  npm_config_target=<span class="hljs-number">0.33</span><span class="hljs-number">.1</span> <span class="hljs-preprocessor"># ???</span>
  npm_config_arch=x64
  npm_config_runtime=electron
HOME=~/.electron-gyp npm install module-name <span class="hljs-preprocessor"># home equals? what?</span></code></pre><p>one important thing: nw.js&#39;s url in the package file? nah, bro, electron don&#39;t
do that shit. so manually creating the browser window and loading HTML is the
right way with electron.</p>
]]></description><link>/2016/personal-project.html</link><guid isPermaLink="true">/2016/personal-project.html</guid><category><![CDATA[devmtn]]></category><category><![CDATA[electron]]></category><category><![CDATA[nwjs]]></category><category><![CDATA[markdown]]></category><category><![CDATA[angular]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Fri, 20 May 2016 05:00:00 GMT</pubDate></item><item><title><![CDATA[earliest devmtn notes]]></title><description><![CDATA[<p>uh so i just found these in a note book and remembered that
one day i forgot my laptop charger so i took notes during a lecture
by hand
i don&#39;t know what
idk</p>
<pre class="hljs"><code>vertical organization <span class="hljs-keyword">is</span> by feature;
routes, configs, etc. under the same directory.
this <span class="hljs-keyword">is</span> the devmtn preferred <span class="hljs-keyword">method</span>.
this works <span class="hljs-keyword">for</span> angular <span class="hljs-keyword">as</span> well.
keeps app.js, config (routes), index.html <span class="hljs-keyword">in</span> root --
directives, features, services, &amp; <span class="hljs-literal">shared</span> (assets), (<del>somethingican&#39;tread</del>).
starting <span class="hljs-keyword">with</span> webpack <span class="hljs-keyword">and</span> angular2, we&#39;ll be moving to <code>require</code>s.
heroku will (<del>something</del>) <span class="hljs-keyword">with</span> last good git commits -- <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> github pushes</code></pre>]]></description><link>/2016/earliest-devmtn-notes.html</link><guid isPermaLink="true">/2016/earliest-devmtn-notes.html</guid><category><![CDATA[devmtn]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Thu, 19 May 2016 18:39:25 GMT</pubDate></item><item><title><![CDATA[bootcamp analogies]]></title><description><![CDATA[<p>bootcamps are like a three-month crash-course on building features and creating value
for yourself and your future employer very quickly. and also on learning. as in,
learning to learn stuff on your own.</p>
<p>mentoring at a bootcamp is kind of a three-month course on talking/people skills.
most obviously, there&#39;s the explaining code you&#39;ve never seen before to people who have
no idea what you&#39;re saying and might not even speak the same language (natively).</p>
<p>working at a bootcamp is like being thrown headfirst into both education and jr dev
roles, which can be overwhelming but also awesome.</p>
<p>hanging out at a bootcamp after finishing is like going back to a high school reunion
after going from nerd to hugely successful nerd, waving it in everyone&#39;s face, except
everyone is that same nerd so it&#39;s kinda more like an encouraging wave than a &quot;see,
told you i&#39;d amount to something&quot; kind of wave.</p>
<p>just some thoughts i had while trying to avoid having my skin ripped off by the
pressure-washer-like shower that i just took. i need to be better at plumbing.</p>
]]></description><link>/2016/bootcamp-analogies.html</link><guid isPermaLink="true">/2016/bootcamp-analogies.html</guid><category><![CDATA[devmtn]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sat, 07 May 2016 17:20:00 GMT</pubDate></item><item><title><![CDATA[More DevMountain Notes]]></title><description><![CDATA[<p>This is a bunch more notes from my time going through the course at DevMountain.</p>
<p>These notes are specifically from the first three weeks. They&#39;re a mess.</p>
<p>Don&#39;t take anything too seriously. I probably didn&#39;t know what I was talking about, a lot of the time.</p>
<hr>
<h2 id="css">css</h2>
<p>if a div has position absolute, position RELATIVE on another
element will be in RELATION to the div that has ABSOLUTE.</p>
<p>so, top 0 is in RELATION to something else that has ABSOLUTE,
otherwise just defaults to in relative to HTML.</p>
<p>in simpler terms... position is basically just referring to its immediate parent,
unless there&#39;s no frame of reference there. all hierarchical. (lol hence C in CSS....)</p>
<ul>
<li>box-model:<ul>
<li>border goes OUTwards from the element</li>
<li>padding goes IN and squishes the element</li>
<li>LOTS of padding will actually stretch an element out</li>
<li>margins--space between picture and other items</li>
</ul>
</li>
</ul>
<hr>
<h2 id="rly-just-beginning-js">rly just beginning js</h2>
<pre class="hljs"><code><span class="hljs-comment">// Variables</span>

<span class="hljs-comment">// JavaScript uses &quot;lexical&quot; scoping for variables, meaning it matches</span>
<span class="hljs-comment">// a variable based on its name.  &quot;Name&quot; isn&#39;t the same as &quot;name&quot;.</span>

<span class="hljs-comment">// Variables hold values (Numbers, Strings, Arrays, Objects, Functions, Boolean)</span>
<span class="hljs-keyword">var</span> myAge = <span class="hljs-number">39</span>
<span class="hljs-keyword">var</span> myName = <span class="hljs-string">&#39;Jared&#39;</span>
<span class="hljs-keyword">var</span> myKids = [<span class="hljs-string">&#39;Isaac&#39;</span>,<span class="hljs-string">&#39;Abbi&#39;</span>,<span class="hljs-string">&#39;Natalia&#39;</span>,<span class="hljs-string">&#39;Camila&#39;</span>,<span class="hljs-string">&#39;Bella&#39;</span>]

<span class="hljs-comment">// Conditional Statements (if/else)</span>

<span class="hljs-comment">// Conditional statements use comparison operators to produce a</span>
<span class="hljs-comment">// Boolean result (true/false)</span>
<span class="hljs-keyword">if</span> (myAge &lt; <span class="hljs-number">20</span>) {
  <span class="hljs-comment">// do something</span>
} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (myAge &lt; <span class="hljs-number">40</span>) {

} <span class="hljs-keyword">else</span> {
  <span class="hljs-comment">// do something else</span>
}

<span class="hljs-comment">// Truthy and Falsy</span>
<span class="hljs-comment">// There are 6 values that are considered &quot;falsy&quot;</span>
<span class="hljs-comment">// &#39;&#39;,0,false,undefined,null,NaN</span>

<span class="hljs-comment">// == vs ===</span>
<span class="hljs-comment">// The double equals will convert the string to a number</span>
<span class="hljs-comment">// The triple equals will return false if the values aren&#39;t</span>
<span class="hljs-comment">// the same type</span>
<span class="hljs-keyword">if</span> (<span class="hljs-string">&#39;42&#39;</span> == <span class="hljs-number">42</span>) {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;&#39;42&#39; == 42&quot;</span>)
}

<span class="hljs-keyword">if</span> (<span class="hljs-string">&#39;42&#39;</span> === <span class="hljs-number">42</span>) {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;&#39;42&#39; === 42&quot;</span>)
}

<span class="hljs-comment">// Function Declaration</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DoubleANumber</span>(<span class="hljs-params">number</span>) </span>{
  <span class="hljs-built_in">console</span>.log(number <em> <span class="hljs-number">2</span>)
}

<span class="hljs-comment">// A function can also return a value</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DoubleANumber2</span>(<span class="hljs-params">number</span>) </span>{
  <span class="hljs-keyword">return</span> number </em> <span class="hljs-number">2</span>
}

<span class="hljs-comment">// Function Invocation</span>
DoubleANumber(<span class="hljs-number">10</span>)

<span class="hljs-comment">// If a function returns a value, we save that in a variable</span>
<span class="hljs-keyword">var</span> doubled = DoubleANumber2(<span class="hljs-number">10</span>)
<span class="hljs-built_in">console</span>.log(doubled)

<span class="hljs-comment">// Function Expression</span>

<span class="hljs-comment">// Functions themselves can be stored in a variable</span>
<span class="hljs-keyword">var</span> func = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SayHello</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello&quot;</span>)
}

<span class="hljs-comment">// When a function is used in an expression, the function name</span>
<span class="hljs-comment">// isn&#39;t required.  This is called an anonymous function</span>
<span class="hljs-keyword">var</span> func1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hello&quot;</span>)
}

<span class="hljs-comment">// We&#39;ll see where using anonymous functions is a common</span>
<span class="hljs-comment">// pattern in a future lesson</span>

<span class="hljs-comment">// Scope</span>
<span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Jared&quot;</span>

<span class="hljs-comment">// A function can access variables declared outside the function</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SayMyName</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(name)
}

SayMyName()

<span class="hljs-comment">// A function argument is &quot;local&quot; to the function, and &quot;hides&quot;</span>
<span class="hljs-comment">// the outer variable with the same name</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SayMyName2</span>(<span class="hljs-params">name</span>) </span>{
  <span class="hljs-built_in">console</span>.log(name)
}

SayMyName2(<span class="hljs-string">&quot;John&quot;</span>)

<span class="hljs-comment">// A variabled declared inside the function also &quot;hides&quot; the</span>
<span class="hljs-comment">// outer variable with the same name</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SayMyName3</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Bob&quot;</span>
  <span class="hljs-built_in">console</span>.log(name)
}

SayMyName3()

<span class="hljs-comment">// But variables declared inside a function are only</span>
<span class="hljs-comment">// visible inside the function</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShowAge</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>
  <span class="hljs-built_in">console</span>.log(age)
}

<span class="hljs-comment">//console.log(age) // This is an error because &quot;age&quot; isn&#39;t defined</span>

<span class="hljs-comment">// Functions can be &quot;nested&quot; inside of other functions.  Scope works</span>
<span class="hljs-comment">// from the inside-out.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Grandpa</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Grandpa&quot;</span>
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dad</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Dad&quot;</span>
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Son</span>(<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Son&quot;</span>
    }
  }
}

<span class="hljs-comment">// There are two rules to remember with functions</span>
<span class="hljs-comment">// 1. A function can access the the variables declared in outer functions</span>
<span class="hljs-comment">// 2. A function can access those variables even after the outer function</span>
<span class="hljs-comment">//    has been invoked and returned.</span>
<span class="hljs-comment">// A function that has &quot;remembered&quot; these values is called a closure.</span>

<span class="hljs-comment">// Closures</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">firstName, lastName</span>) </span>{
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SayMyName</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-built_in">console</span>.log(firstName + <span class="hljs-string">&#39; &#39;</span> + lastName)
  }
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;All done&#39;</span>)
  <span class="hljs-keyword">return</span> SayMyName;
}

<span class="hljs-keyword">var</span> person = Person(<span class="hljs-string">&#39;Jared&#39;</span>,<span class="hljs-string">&#39;Stark&#39;</span>)
person()

.call(scope, arg1, arg2, etc) <span class="hljs-comment">// takes ARGUMENTS, comma sep</span>
.apply(scope, [arg1, arg2, etc])<span class="hljs-comment">// takes ARRAY of arguments</span>
using .call() or .apply() invokes the <span class="hljs-function"><span class="hljs-keyword">function</span>, <span class="hljs-title">so</span> <span class="hljs-title">no</span> <span class="hljs-title">need</span> <span class="hljs-title">to</span> <span class="hljs-title">invoke</span> <span class="hljs-title">like</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>);
.<span class="hljs-title">bind</span>(<span class="hljs-params"></span>) <span class="hljs-title">does</span> <span class="hljs-title">NOT</span> <span class="hljs-title">invoke</span>, <span class="hljs-title">just</span> <span class="hljs-title">binds</span> <span class="hljs-title">values</span> <span class="hljs-title">prior</span> <span class="hljs-title">to</span> <span class="hljs-title">invocation</span>.
// <span class="hljs-title">this</span> <span class="hljs-title">way</span> <span class="hljs-title">one</span> <span class="hljs-title">can</span> <span class="hljs-title">bind</span> <span class="hljs-title">values</span> <span class="hljs-title">WITHOUT</span> <span class="hljs-title">calling</span> <span class="hljs-title">it</span>, <span class="hljs-title">so</span> <span class="hljs-title">no</span> <span class="hljs-title">need</span> <span class="hljs-title">to</span> <span class="hljs-title">create</span> <span class="hljs-title">another</span> <span class="hljs-title">inner</span> <span class="hljs-title">function</span>
// <span class="hljs-title">and</span> <span class="hljs-title">go</span> <span class="hljs-title">through</span> <span class="hljs-title">lots</span> <span class="hljs-title">of</span> <span class="hljs-title">work</span> <span class="hljs-title">to</span> <span class="hljs-title">avoid</span> <span class="hljs-title">screwing</span> <span class="hljs-title">up</span> <span class="hljs-title">scope</span></span></code></pre><hr>
<h2 id="js-basix">js basix</h2>
<pre class="hljs"><code>object that <span class="hljs-keyword">contains</span> a <span class="hljs-function"><span class="hljs-keyword">function</span></span> = {
  <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span> {
    <span class="hljs-keyword">return</span>: stuffs
  }
}
<span class="hljs-keyword">call</span>.the(object(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>)</code></pre><ul>
<li><code>arrayName.pop()</code> removes the last item from the array</li>
<li><code>arrayName.push(&quot;item&quot;, &quot;maybeAnotherItem&quot;)</code> adds to the end of the array</li>
<li><code>arrayName[integer] = &quot;item&quot;</code> adds item at this place in array; could leave empty items thusly</li>
<li><code>arrayName.shift()</code> removes FIRST item from array</li>
<li><code>arrayName.unshift(&quot;item&quot;, &quot;more if you want&quot;, &quot;hey why not&quot;)</code> adds to the BEGINNING of array</li>
<li><p><code>arrayName.splice(startingInteger, integerofItemsToRemove, &quot;string&quot;, &quot;item&quot;, &quot;etc&quot;)</code></p>
<p>  // example:
  var bits = [&quot;bots&quot;, &quot;boots&quot;, &quot;bats&quot;, &quot;beets&quot;, &quot;boats&quot;, &quot;bets&quot;]
  bits.splice(2, 2, &quot;wat&quot;, &quot;wuuuuuuuh&quot;)
  // would result in:
  bots boots way wuuuh boats bets</p>
</li>
</ul>
<p>use same method to just remove from an array eg <code>bits.splice(3, 3)</code> would return from the above, <code>bots boots boats bets</code></p>
<p>to move items from one array to another, also splice, like so: <code>var stib = bits.splice(2, 5)</code></p>
<p>this would leave bits unchanged.
2 is the starting index of item to be copied;
5 is the element AFTER the last one to be copied.
can use same method simply to reduce current array (overwrite)</p>
<pre class="hljs"><code><span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>: booleans (so no quotes)
<span class="hljs-keyword">if</span> blahblah
    <span class="hljs-keyword">break</span>;
don<span class="hljs-string">&#39;t know why i&#39;</span>m making a note <span class="hljs-keyword">of</span> <span class="hljs-string">&#39;break.&#39;</span>

whateVaR.toLowerCase(); <span class="hljs-comment">//does that thing that it says it does. WOOWWOWOWOWW</span>
wutTHEfack.toUpperCase(); <span class="hljs-comment">//does the exact opposite of the thing above this line. MIND. BLOWN.</span>

.slice(indexinginteger, firstCharAFTERtheslice) <span class="hljs-comment">// so, second number minus first number equals total characters in the slice</span>
example: <span class="hljs-keyword">var</span> threeLetterPrefix = thatDudesName.slice(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)
.slice(singleNumber) would return <span class="hljs-keyword">until</span> the <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> the string.

<span class="hljs-keyword">var</span> blah = whatever.length
<span class="hljs-comment">//returns the length of &#39;whatever&#39;</span></code></pre><p>in the case of true || whatever, whatever will never be checked;
in the casae of false &amp;&amp; whatever, whatever will never be checked.
they are evaluated <em>only when necessary</em>.</p>
<p>expression is kinda like a clause in natural language;
can have nested subclauses, whatnots.
statemets, more like full, complete sentences.</p>
<p>builtin function <code>Number()</code> converts given value to integer. for example:</p>
<pre class="hljs"><code><span class="hljs-tag">var</span> ancient = <span class="hljs-function"><span class="hljs-title">Number</span><span class="hljs-params">(prompt(<span class="hljs-string">&#39;how many milliseconds have you been alive?&#39;</span>)</span></span>, <span class="hljs-string">&#39;&#39;</span>))
<span class="hljs-function"><span class="hljs-title">alert</span><span class="hljs-params">(<span class="hljs-string">&#39;you&#39;</span>re one old sonofabitch, <span class="hljs-string">&quot; + ancient + &quot;</span> is a long freaking time.<span class="hljs-string">&#39;)</span></span></span></code></pre><p>do loop is similar to while, but do will always execute at least once;
it doesn&#39;t test until after the first execution. example:</p>
<pre class="hljs"><code><span class="hljs-operator"><span class="hljs-keyword">do</span> {
  <span class="hljs-keyword">var</span> asdf = <span class="hljs-keyword">prompt</span>(<span class="hljs-string">&quot;what do they call you?&quot;</span>)
  } <span class="hljs-keyword">while</span> (!asdf)
console.<span class="hljs-keyword">log</span>(asdf)
// this will <span class="hljs-keyword">keep</span> prompting <span class="hljs-keyword">until</span> the <span class="hljs-keyword">prompt</span> recieves a <span class="hljs-keyword">string</span></span></code></pre><p>standard loop boilerplate pattern: counter variable to count (duh);
while loop (check counter against limit?) then update counter.</p>
<p>OH WAIT WE CALL THIS A FOR LOOP DUH.</p>
<pre class="hljs"><code><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>; <span class="hljs-built_in">number</span> &lt;= <span class="hljs-number">26</span>; <span class="hljs-built_in">number</span> = <span class="hljs-built_in">number</span> + <span class="hljs-number">1</span>)
      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">number</span>)
<span class="hljs-comment">//0</span>
<span class="hljs-comment">//1</span>
<span class="hljs-comment">//etc, until we are less than or equal to 26.</span></code></pre><ul>
<li>for loop syntax:<ul>
<li>for (bit that initializes the loop, like setting an integer at 0 to count up;</li>
<li>expression check if the loop should still go, like defining a counting limit;</li>
<li>what to do, if we&#39;ve made it through those first bits)</li>
<li>always needs three sections/two semicolons</li>
</ul>
</li>
</ul>
<p><code>+=</code> is not the only thing that works for updating;
looks like all math operations, when done <code>i *= i</code>;
obvs <code>i += i</code> and <code>i -= i</code> can be shortened to <code>i--</code> and <code>i++</code></p>
<p>switch: it&#39;s case, i guess, but minus esac (because, note, we also don&#39;t use done, or fi... wtf).</p>
<p>so:</p>
<pre class="hljs"><code><span class="hljs-keyword">switch</span> (thingy(whatthewhat)) {
  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;oioioi!&quot;</span>:
    alert(<span class="hljs-string">&quot;OI! OI! OI!&quot;</span>)
  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;blaahh&quot;</span>:
    whatever
  <span class="hljs-keyword">break</span>
  <span class="hljs-keyword">default</span>:
    console.log(<span class="hljs-string">&quot;u r a bag of dix&quot;</span>)
  <span class="hljs-keyword">break</span>
}</code></pre><p>functions always have curly braces around body, even if just one command</p>
<p>braces are allowed everywhere but only define a new local environment within functions,
and only really useful for grouping conditionals and loops</p>
<p>like any other variable, functions can totally get new names.
their values are just as mutable as any other vars&#39;.</p>
<p>use brackets when accessing vague proprop (eg looping over) from object;
otherwise dot notation if know specific key</p>
<p>NOT <code>for i in arr.length whatever</code></p>
<p>....</p>
<p>rather,
<code>return arr[arr.length -1]</code></p>
<pre class="hljs"><code><span class="hljs-comment">//GLOBAL SCOPE</span>
<span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outerFunction</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">//LOCAL SCOPE FOR OUTERFUNCTION</span>
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">innerFunction</span><span class="hljs-params">()</span> </span>{ <span class="hljs-comment">//LOCAL SCOPE INNERFUNCTION</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;hello&#39;</span>;
  }
}
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">returnOne</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
}
<span class="hljs-keyword">var</span> myNewFunction = outerFunction();
myNewFunction();
myNewFunction();
<span class="hljs-keyword">var</span> numOne = returnOne();

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeCounter</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">var</span> counter = <span class="hljs-number">0</span>; <span class="hljs-comment">//local scoped makeCounter and children</span>
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myCounter</span><span class="hljs-params">()</span> </span>{
    counter++;
  }
}

<span class="hljs-keyword">var</span> count = makeCounter();
count(); <span class="hljs-comment">//return 1</span>
count(); <span class="hljs-comment">//return 2</span>
<span class="hljs-keyword">var</span> count = makeCounter();

<span class="hljs-keyword">var</span> secondCount = makeCounter();
secondCount() <span class="hljs-comment">//return 1</span></code></pre><p>a closure references variables OUTSIDE OF ITSELF
and remembers those even when its parent scope (parent function) has returned</p>
<p>remember, don&#39;t need to do
<code>if whatever == true/if whatever != true (or == false)</code>
just need to do</p>
<pre class="hljs"><code>if<span class="hljs-function"> (</span>whatever<span class="hljs-function">)</span><span class="hljs-instruction">
return </span>true
else<span class="hljs-instruction">
return </span>false
<span class="hljs-keyword">.</span>..<span class="hljs-instruction"> and </span>that&#39;s all.


// reversing an<span class="hljs-instruction"> array </span>without using<span class="hljs-function"> array.reverse(</span><span class="hljs-function">)</span> ...
function<span class="hljs-function"> flipIt(</span>arr<span class="hljs-function">)</span>{
  var flipped =<span class="hljs-instruction"> new </span>Array
 <span class="hljs-function"> for(</span>var i = arr.length-1; i &gt;= 0; i--<span class="hljs-function">)</span>{
   <span class="hljs-function"> flipped.push(</span>arr<span class="hljs-keyword">[</span>i]<span class="hljs-function">)</span>
  }
 <span class="hljs-instruction"> return </span>flipped
}</code></pre><hr>
<h2 id="ajax-jquery-snippets">ajax (jquery) snippets</h2>
<pre class="hljs"><code>$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-keyword">var</span> app = $(<span class="hljs-string">&#39;app&#39;</span>)
  <span class="hljs-keyword">var</span> header = $(<span class="hljs-string">&#39;&lt;h3&gt;Random Colour Palette&lt;/h3&gt;&#39;</span>)
  <span class="hljs-keyword">var</span> button = $(<span class="hljs-string">&#39;&lt;button&gt;Colours!&lt;/button&gt;&#39;</span>)
  <span class="hljs-keyword">var</span> clear = $(<span class="hljs-string">&#39;&lt;button&gt;New ones!&lt;/button&gt;&#39;</span>)
  <span class="hljs-keyword">var</span> list = $(<span class="hljs-string">&#39;&lt;ul&gt;&lt;/ul&gt;&#39;</span>)
  button.on(<span class="hljs-string">&#39;click&#39;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    $.ajax({
      method: <span class="hljs-string">&#39;GET&#39;</span>,
      url:<span class="hljs-string">&#39;<a href="http://www.colourlovers.com/api/palettes/random?format=json">http://www.colourlovers.com/api/palettes/random?format=json</a>&#39;</span>,
    }).then(data){
      <span class="hljs-keyword">var</span> dataObj = <span class="hljs-built_in">JSON</span>.parse(data)
      showData(dataObj)
    })
  }

  app.append(header)
  app.append(button)
  app.append(clear)
  app.append(palette)

  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showData</span>(<span class="hljs-params">data</span>)</span>{
    <span class="hljs-keyword">var</span> image = indexOf(<span class="hljs-string">&#39;imageUrl&#39;</span>)
    <span class="hljs-keyword">var</span> paletteDiv = $(<span class="hljs-string">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span>)
    <span class="hljs-comment">//    var image = $(image tag  + url)</span>

    pallet.append(paletteDiv)
  }

})</code></pre><hr>
<h2 id="toy-problem-notes-week-two">toy problem notes, week two</h2>
<pre class="hljs"><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkEvens</span>(<span class="hljs-params"> num </span>) </span>{
  <span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) {    <span class="hljs-comment">// this just checks if the argument passed is divisible by two</span>
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
  }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compareLengths</span>(<span class="hljs-params"> originalArr, newArr </span>) </span>{
  <span class="hljs-keyword">if</span> (originalArr &gt; newArr) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;More odds than evens.&#39;</span>   <span class="hljs-comment">// this is pretty self-explanitory</span>
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (originalArr &lt; newArr) { <span class="hljs-comment">// just comparing lengths (whodathunkit)</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;More evens than odds.&#39;</span>   <span class="hljs-comment">// and returning based on which is longer</span>
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;Same number of evens and odds&#39;</span>
  }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">howMany</span>(<span class="hljs-params"> originalArr, newArr, evensOrOdds </span>) </span>{
  <span class="hljs-keyword">if</span> (evensOrOdds === <span class="hljs-string">&#39;More odds than evens.&#39;</span>) {
    <span class="hljs-keyword">var</span> length = originalArr.length - newArr.length <span class="hljs-comment">// this is the bit where things are</span>
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;There are &#39;</span> + length + <span class="hljs-string">&#39; more odds than evens.&#39;</span>)
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (evensOrOdds === <span class="hljs-string">&#39;More evens than odds.&#39;</span>) {
    <span class="hljs-keyword">var</span> length = newArr.length - (originalArr.length - newArr.length)
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;There are &#39;</span> + length + <span class="hljs-string">&#39; more evens than odds.&#39;</span>)
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;There are the same number of evens and odds.&#39;</span>)
  }
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myCallbacks</span>(<span class="hljs-params"> iterator, lengthCompare, counter, arr </span>) </span>{
  <span class="hljs-keyword">var</span> newArray = []                      <span class="hljs-comment">// hey hey hey, a sweet new array</span>
  arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"> num, index </span>) </span>{   <span class="hljs-comment">// let&#39;s loop over the old array first</span>
    <span class="hljs-keyword">if</span> (checkEvens(num)) {               <span class="hljs-comment">// see if them items is %2===0</span>
      newArray.push(checkEvens(num))     <span class="hljs-comment">// if they is... i can&#39;t keep that up...</span>
    }                                    <span class="hljs-comment">// we just push them to the new array.</span>
  })
  <span class="hljs-keyword">var</span> evensOrOdds = lengthCompare(arr, newArray) <span class="hljs-comment">// we compare lengths of the old array and new array</span>
  counter(arr, newArray, evensOrOdds)            <span class="hljs-comment">// we pass the old array, the new array, and the variable above</span>
}                                                <span class="hljs-comment">// to the parameter from the top of this function</span>

<span class="hljs-keyword">var</span> myArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, ,<span class="hljs-number">3</span> ,<span class="hljs-number">4</span> ,<span class="hljs-number">5</span> ,<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>] <span class="hljs-comment">// oh, HERE&#39;s that array we keep talking about</span>

myCallbacks(checkEvens, compareLengths, howMany, myArray) <span class="hljs-comment">// let&#39;s invoke that function and pass it ALL THE THINGS</span></code></pre><hr>
<h2 id="something-about-some-twitter-clone-thing">something about some twitter clone thing</h2>
<h3 id="do-this">do this</h3>
<ul>
<li>hide tweet button and character count initially (so, just not there)</li>
<li>on click, double textarea size, reveal character count and tweet button</li>
<li>ch count decrease realtime</li>
<li>at 10 chars, count turns red</li>
<li>if chars &gt; 140, disable tweet button (and re-enable if =&lt; 140)</li>
<li>new tweet pushed to column immediately, w/ prof image in top left, full username and name</li>
<li>tweet actions on :hover over individual tweets only</li>
<li>rt/timestamp/reply area hidden by default; expand on click</li>
<li>timestamps with timeago (or, i think, livestamp actually)</li>
<li>icons for favs/rts in upper right of tweet card</li>
<li>bootstrap tooltips on :hover over avatar</li>
<li>localstorage (or howabout localForage?)</li>
<li>or baas... ... yeah. localforage.</li>
</ul>
<h4 id="notes-on-changes">notes on changes</h4>
<ul>
<li>setting max-viewport is a <em>horrible</em> practice. nixed.</li>
<li>normalize instead of reset; cdn instead of stuck in our own stylesheet.</li>
<li>updated to jquery 2.1.4; cdn instead of in our js directory.</li>
<li>replacing ids with classes, at least for starters... just a few ids in here, sprinkled around ಠ⌣ಠ</li>
<li><code>page-container</code> = <code>container</code></li>
<li><code>dashboard</code> = <code>dash</code></li>
<li><code>profile-summary</code> = <code>profile</code></li>
<li><code>char-count</code> = <code>count</code></li>
<li><code>tweet-controls</code> = <code>controls</code></li>
<li>because i don&#39;t like to type</li>
</ul>
<h4 id="notes-on-the-process-and-result-">notes on the process (and result)</h4>
<ul>
<li>so it turns out that i&#39;m 99% sure none of us is doing this right. after doing epic battle with</li>
<li>the javascripts, i&#39;ve been defeated. manually moving the first tweet down and putting the new</li>
<li>tweet&#39;s content in its place, right now, kind of relies solely on using the actual username/name</li>
<li>of the former top tweet on the feed (btw, css could probably use an update... twitter&#39;s one column</li>
<li>of user and tweets, and two side columns of promos and ads, now.). that&#39;s, uh, totally unrealistic.</li>
</ul>
<hr>
<h2 id="murr-nuutes">murr nuutes</h2>
<pre class="hljs"><code><span class="hljs-comment">// make a loop. then have it go 1-5 endlessly. then have it only do it once.</span>

<span class="hljs-comment">// our way</span>
<span class="hljs-comment">// function count () {</span>
<span class="hljs-comment">//   while (true) {</span>
<span class="hljs-comment">//    for (i = 1; i &lt;= 5; i++) {</span>
<span class="hljs-comment">//      console.log(i);</span>
<span class="hljs-comment">//     }</span>
<span class="hljs-comment">//   }</span>
<span class="hljs-comment">// }</span>

<span class="hljs-comment">// correct way</span>
<span class="hljs-comment">// function countOnce () {</span>
<span class="hljs-comment">//   for (var i = 0; i &lt; 1; i++) {</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeCounter</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">5</span>) {
      <span class="hljs-keyword">return</span> num++;
    } <span class="hljs-keyword">else</span> {
      num = <span class="hljs-number">0</span>;
      <span class="hljs-keyword">return</span> num;
    }
  };
}
<span class="hljs-comment">//   }</span>
<span class="hljs-comment">// }</span>

<span class="hljs-comment">// other way</span>

<span class="hljs-comment">// function makeCounter() {</span>
<span class="hljs-comment">//  var x = 1;</span>
<span class="hljs-comment">//  retrun function() {</span>
<span class="hljs-comment">//    console.log(x1);</span>
<span class="hljs-comment">//    x++;</span>
<span class="hljs-comment">//    if (x&gt;5) {</span>
<span class="hljs-comment">//      x=0;</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">//    }</span>
<span class="hljs-comment">//  }</span>
<span class="hljs-comment">// }</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeCounter</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> counter = <span class="hljs-number">1</span>;
  <span class="hljs-keyword">var</span> counter2 = <span class="hljs-number">1</span>;
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myCounter</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">if</span> (counter2 &gt; <span class="hljs-number">11</span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (counter === <span class="hljs-number">6</span>) {
      counter = <span class="hljs-number">0</span>;
    }
    counter2++;
    <span class="hljs-keyword">return</span> counter++;
  };
}

<span class="hljs-comment">// Objects: less primitive than primitives.</span>
<span class="hljs-comment">// create an object literal that models a facebook message:</span>

<span class="hljs-comment">// var fbMsg = {</span>
<span class="hljs-comment">//    sender: &#39;Jack&#39;;</span>
<span class="hljs-comment">//    recipient: &#39;Jill&#39;;</span>
<span class="hljs-comment">//    topic: [&#39;water&#39;, &#39;pail&#39;, &#39;hill&#39;, &#39;cranial trauma&#39;]</span>
<span class="hljs-comment">//    }</span>

<span class="hljs-comment">// or, using new Object();</span>

<span class="hljs-keyword">var</span> fbMsg = { };
fbMsg.sender = <span class="hljs-string">&#39;Jack&#39;</span>;
fbMsg.recipient = <span class="hljs-string">&#39;Jill&#39;</span>;
fbMsg.topic = [<span class="hljs-string">&#39;water&#39;</span>, <span class="hljs-string">&#39;pail&#39;</span>, <span class="hljs-string">&#39;hill&#39;</span>, <span class="hljs-string">&#39;cranial trauma&#39;</span>];

<span class="hljs-comment">// removing from object, much less work than in array</span>

<span class="hljs-keyword">delete</span> message.recipient;

<span class="hljs-comment">// brackets also work for accessing properties on an object</span>

fbMsg[<span class="hljs-string">&#39;fuzzy date&#39;</span>] = <span class="hljs-string">&#39;yesterday afternoon&#39;</span>;

<span class="hljs-comment">// for loops over keys/values in an object:</span>

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> fbMsg) {
  <span class="hljs-built_in">console</span>.log(key);
}

<span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> fbMsg) {
  <span class="hljs-built_in">console</span>.log(fbMsg[value]);
}

<span class="hljs-comment">// you don&#39;t really NEED to declare that something&#39;s a variable...</span>
<span class="hljs-comment">// that&#39;s bad practice, though. that&#39;ll make your whatever a global variable.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// there are no constants in javascrpt, apparently.</span>
<span class="hljs-comment">// so, js isn&#39;t really modular. and scripts included in html will basically</span>
<span class="hljs-comment">// just override in loading order. so, a script tag by the footer would</span>
<span class="hljs-comment">// override one that&#39;s all the way up at the beginning of your body, if they</span>
<span class="hljs-comment">// had the same globals, for example.</span>

<span class="hljs-comment">// wrapping an entire function (even anonymous) in parens is a sweet idea!</span>
<span class="hljs-comment">// this way you&#39;re not polluting global namespace, and you can just</span>
<span class="hljs-comment">// invoke the &#39;function expression&#39; immediately, so it&#39;s not really any</span>
<span class="hljs-comment">// different in practice than as if you&#39;d left off the parents. so...</span>

(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> yo = <span class="hljs-string">&#39;billybob&#39;</span>;
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;what up &#39;</span> + yo);
})();(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> yo = <span class="hljs-string">&#39;margie-jo&#39;</span>;
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;what up &#39;</span> + yo);
})();

<span class="hljs-comment">// i guess a lot of minifiers will automatically just wrap all your scripts</span>
<span class="hljs-comment">// in these kind of expressions?</span>

<span class="hljs-comment">// a function is an object. it has a property called prototype.</span>
<span class="hljs-comment">// the keys of prototype (which is an object itself) are inhereted by any other</span>
<span class="hljs-comment">// object below that one.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// one can add to a prototype after declaring that function.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// a prototype describes the idea of a thing; here&#39;s all the things that would</span>
<span class="hljs-comment">// be in a facebook message, y&#39;know? so this way, we just made a CONSTRUCTOR.</span>
<span class="hljs-comment">// and there&#39;s your use for the new Object syntax! now we know how to use that.</span>
<span class="hljs-comment">//</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Message</span>(<span class="hljs-params">sender, recipient, topic</span>) </span>{
  <span class="hljs-keyword">this</span>.from = sender;
  <span class="hljs-keyword">this</span>.to = recipient;
  <span class="hljs-keyword">this</span>.subject = topic;
}

<span class="hljs-comment">// if you DON&#39;T explicity definte a prototype, you&#39;d get one anyway,</span>
<span class="hljs-comment">// it would basically just be implied/automatic.</span>
<span class="hljs-comment">// readability is a good reason to explicitly define it, though.</span>
<span class="hljs-comment">// also, you can set values in your prototype, obvs, that&#39;ll then be applied</span>
<span class="hljs-comment">// to all the stuffs that uses that prototype.</span>

<span class="hljs-comment">// // so we could also go ahead and comment out all that like so</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Message</span>(<span class="hljs-params"></span>) </span>{
}

Message.prototype = {
  to: <span class="hljs-string">&#39; &#39;</span>,
  from: <span class="hljs-string">&#39; &#39;</span>,
  about: <span class="hljs-string">&#39; &#39;</span>,
  date: <span class="hljs-string">&#39; &#39;</span> <span class="hljs-comment">// note no comma on this line</span>
};        <span class="hljs-comment">// also note that this could return stuff in ANY GODDAMN ORDER.</span>

<span class="hljs-keyword">var</span> msg = <span class="hljs-keyword">new</span> Message (<span class="hljs-string">&#39;joe&#39;</span>, <span class="hljs-string">&#39;ruth&#39;</span>, <span class="hljs-string">&#39;pickles and cream cheese&#39;</span>);
<span class="hljs-keyword">var</span> mssg - <span class="hljs-keyword">new</span> Message (<span class="hljs-string">&#39;ann&#39;</span>, <span class="hljs-string">&#39;barb&#39;</span>, <span class="hljs-string">&#39;i hear joe eats some weird stuff&#39;</span>);
<span class="hljs-built_in">console</span>.log(msg, mssg);

<span class="hljs-comment">// this will make each one basically have the same structure (oh! prototype)</span>
<span class="hljs-comment">// is basically a framework for building objects!), but each INSTANCE is a</span>
<span class="hljs-comment">// totally different actual object. okay.</span>

<span class="hljs-comment">// the keyword this: this.thing, etc... this just references the new (current</span>
<span class="hljs-comment">// parent) object, that&#39;s all!</span>

<span class="hljs-comment">// okay. a method is a property containing a function definition. that sounds</span>
<span class="hljs-comment">// more complicated than it needs to. a method is kind of like a little</span>
<span class="hljs-comment">// function that works just on an object, i guess.</span>
<span class="hljs-comment">// or, in other words, it&#39;s literally just a property, the value of which</span>
<span class="hljs-comment">// happens to be a function.</span>

<span class="hljs-comment">// okay, and so as was just cleared up, things that use the notation that</span>
<span class="hljs-comment">// makes me think they&#39;re just being confusing and shit? yeah. basically just</span>
<span class="hljs-comment">// properties of the string object, or the window object, or the browser</span>
<span class="hljs-comment">// object, or the global (in node) object.</span>

<span class="hljs-comment">// but wait. what about node, really, seriously? i mean, is global the same</span>
<span class="hljs-comment">// as browser? or window? because those are actual structures that would need</span>
<span class="hljs-comment">// to be emulated, right? um... i&#39;ll want to ask our lecturer this, though</span>
<span class="hljs-comment">// chances are we&#39;ll actually be getting to this in a few weeks.</span>

<span class="hljs-comment">//</span>
<span class="hljs-comment">// ARRAYS</span>
<span class="hljs-comment">//</span>

<span class="hljs-comment">// Length of an array is how many items. In arrays, order matters (unlike objects).</span>



<span class="hljs-comment">// snippet for reversing strings, because we apparently don&#39;t have a builtin</span>
<span class="hljs-comment">// for this, exactly...</span>
<span class="hljs-keyword">var</span> reversed
  , name = <span class="hljs-string">&quot;zac anger&quot;</span>;

reversed = name.split(<span class="hljs-string">&quot;&quot;</span>).reverse().join(<span class="hljs-string">&quot;&quot;</span>);
<span class="hljs-keyword">return</span>(reversed);

<span class="hljs-comment">//</span>
<span class="hljs-comment">// THIS</span>
<span class="hljs-comment">//</span>

<span class="hljs-comment">// <code>this</code> is not assigned a value until an <em>object</em> invokes the <em>function</em></span>
<span class="hljs-comment">// where <code>this</code> is defined.</span>
<span class="hljs-comment">// So, while it seems (to me, and I guess to others) that <code>this</code> refers to the</span>
<span class="hljs-comment">// object, it&#39;s not until an object invokes a function that <code>this</code> is</span>
<span class="hljs-comment">// actually assigned a value. The actual <em>value</em> is <strong>only</strong> based on which</span>
<span class="hljs-comment">// object invoked said function. <code>this</code> has the value of the invoking object</span>
<span class="hljs-comment">// in most cases. sometimes it does not.</span>

<span class="hljs-comment">// IMPLICIT is the value attached to a keyword when it refers to an object</span>
<span class="hljs-comment">// and it applies to the PARENT object</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// EXPLICIT (call, apply, bind)</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// DEFAULT (window object)</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// NEW in creation of new objects</span>

<span class="hljs-comment">// To mantain <code>this</code> inside anonymous functions, we can set the value</span>
<span class="hljs-comment">// before entering all that forEach bidnez.</span>
<span class="hljs-comment">// eg var that = this ... lol</span>

<span class="hljs-keyword">var</span> arrOne = [<span class="hljs-number">1</span>, <span class="hljs-number">44</span>, <span class="hljs-number">7</span>, <span class="hljs-number">89</span>];
<span class="hljs-keyword">var</span> arrTwo = [<span class="hljs-number">44</span>, <span class="hljs-number">2</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">37</span>, <span class="hljs-number">1</span>];
<span class="hljs-keyword">var</span> arrThree = [<span class="hljs-number">56</span>, <span class="hljs-number">19</span>, <span class="hljs-number">44</span>, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>, <span class="hljs-number">89</span>];
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">arrayItUp</span>(<span class="hljs-params">arrOne, arrTwo, arrThree</span>) </span>{
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i =&gt; arrOne.length; i++) {
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j =&gt; arrTwo.length; j++) {
      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span>; k =&gt; arrThree.length; k++) {
        <span class="hljs-keyword">if</span> (arrOne[i] === arrTwo[j] &amp;&amp; arrOne[i] === arrThree[k]);
        arrFour.push(arrOne[i]);
      }
    }
  }
  <span class="hljs-keyword">return</span> arrFour;
}
arrayItUp(arrOne, arrTwo, arrThree);

<span class="hljs-comment">// all of this could&#39;ve just been basically a foreach loop... and avoided</span>
<span class="hljs-comment">// the scope problems... crap.</span>


<span class="hljs-comment">//</span>
<span class="hljs-comment">// back to <code>this</code></span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// because it&#39;s better to keep methods and their objects/properties together in</span>
<span class="hljs-comment">// the same model, one can always go ahead and make a method over there, and</span>
<span class="hljs-comment">// then include that method as the value to a key under the object. that way</span>
<span class="hljs-comment">// you&#39;ve got modularity of a sort, but also keeping your models together in</span>
<span class="hljs-comment">// one place.</span>
<span class="hljs-comment">// so defining it in one place and then pointing to it in a second and maybe</span>
<span class="hljs-comment">// invoking it in a third? it&#39;s still going to point to that <em>function</em> that</span>
<span class="hljs-comment">// called it (or, rather, that function&#39;s object).</span>
<span class="hljs-comment">// may be important, because he&#39;s said this several times now:</span>
<span class="hljs-comment">// &#39;we want our models to represent the real world.&#39; and...</span>
<span class="hljs-comment">// &#39;we want the behaviors that represent our models to be with those models.&#39;</span>
<span class="hljs-comment">// i suppose this is more expressive? either way, it&#39;s obvious how it&#39;d be</span>
<span class="hljs-comment">// much easier to maintain and scale.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// .call is ONLY on a function, yo.</span>
<span class="hljs-comment">// .apply works identically to call, except in how one passes in parameters.</span>
<span class="hljs-comment">// first argument is <em>always</em> what <code>this</code> is bound to... which to use depends</span>
<span class="hljs-comment">// on how you intend to pass in parameters.</span>
<span class="hljs-comment">// btw, <code>arguments</code> is actually a keyword, apparently--for use in functions,</span>
<span class="hljs-comment">// it provides an array of all the passed parameters.</span>
<span class="hljs-comment">// but with .call, the second argument is a comma sep list;</span>
<span class="hljs-comment">// .call and .apply invoke the function immediately. .bind dooesn&#39;t. instead,</span>
<span class="hljs-comment">// it kind of makes a new function for you. that&#39;s actually super cool!</span>
<span class="hljs-comment">// OKAY OKAY wait. so. both call and apply are functions  that can ONLY be</span>
<span class="hljs-comment">// called on other functions! The one difference here is that call accepts both</span>
<span class="hljs-comment">// a first argument AND ANY ADDITIONAL ARGUMENTS THA ARE PASSED TO IT.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// okay, here&#39;s a new example.</span>

<span class="hljs-keyword">var</span> car = {};

<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">doors, model, make</span>) </span>{
  <span class="hljs-keyword">this</span>.doors = doors
  <span class="hljs-keyword">this</span>.make = make
  <span class="hljs-keyword">this</span>.model = model
  <span class="hljs-keyword">return</span>
}

car.call (car, <span class="hljs-number">2</span>, <span class="hljs-string">&#39;Hyundai&#39;</span>, <span class="hljs-string">&#39;Equus&#39;</span>);

<span class="hljs-comment">// so this is actually just a super roundabout way (in this simplified example)</span>
<span class="hljs-comment">// to do a constructor functon, i guess.</span>


<span class="hljs-comment">// okay, so the NEW keyword! var blah = new Blah(thing2 thing2);</span>
<span class="hljs-comment">// but javascript IMPLICITLY does that, and IMPLICITY returns things for you,</span>
<span class="hljs-comment">// and so makes things easier for you. HOWEVER, <code>new</code> is actually a shortcut</span>
<span class="hljs-comment">// for you. but don&#39;t do that. it&#39;s not pretty, and it&#39;s not nice.</span>
<span class="hljs-comment">// there&#39;s a thing that&#39;s like if (this instanceof Foo) or so, which will aid</span>
<span class="hljs-comment">// in avoiding using the window/browser/global object. syntax is super fuzzy</span>
<span class="hljs-comment">// though.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// currying: providing missing paramaters, some or all, when you call BIND.</span>
<span class="hljs-comment">// it will not override anything. so:</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">what</span>(<span class="hljs-params">one, two</span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;oi! &#39;</span> + one);
}

<span class="hljs-keyword">var</span> huh = { meh: <span class="hljs-string">&#39;yo&#39;</span> }; meh.what(); (two);

<span class="hljs-comment">// so with apply, those other parameters after the first, you&#39;d better get</span>
<span class="hljs-comment">// them into an array.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// from rey:</span>
<span class="hljs-comment">// The this Keyword</span>
<span class="hljs-comment">// In JavaScript, the thing called this, is the object that &quot;owns&quot; the JavaScript code.</span>
<span class="hljs-comment">//The value of this, when used in a function, is the object that &quot;owns&quot; the function.</span>
<span class="hljs-comment">//The value of this, when used in an object, is the object itself.</span>
<span class="hljs-comment">//The this keyword in an object constructor does not have a value. It is only a substitute for the new object.</span>
<span class="hljs-comment">//The value of this will become the new object when the constructor is used to create an object.</span>
<span class="hljs-comment">//Note     Note that this is not a variable. It is a keyword. You cannot change the value of this.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">//<a href="http://www.codeproject.com/Articles/857357/Introduction-to-HTML-WebSockets">http://www.codeproject.com/Articles/857357/Introduction-to-HTML-WebSockets</a> , <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API</a> and <a href="http://www.html5rocks.com/en/tutorials/websockets/basics/">http://www.html5rocks.com/en/tutorials/websockets/basics/</a> are some good primers on the websockets topic mentioned a little bit ago; and <a href="https://www.pubnub.com/blog/websockets-vs-rest-api-understanding-the-difference/">https://www.pubnub.com/blog/websockets-vs-rest-api-understanding-the-difference/</a> and <a href="https://news.ycombinator.com/item?id=3636681">https://news.ycombinator.com/item?id=3636681</a> for differences between websockets and http/rest/ajax/xhr/every-other-hacker-news-buzzword.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// ASYNC</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// to avoid problems with async functions and synchronous functions causing conflicts</span>
<span class="hljs-comment">// (eg a sync one returning undefined because the async one hasn&#39;t finished yet),</span>
<span class="hljs-comment">// just do callbacks. that makes <strong>sense</strong>, okay!</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// worth noting again that setTimeout really isn&#39;t fantastic practice, so maybe just don&#39;t do that...</span>
<span class="hljs-comment">// but if you do, it&#39;s super not difficult, so don&#39;t make it difficult.</span>
<span class="hljs-comment">// just put in a function (which can obviously just be calling something defined elsewhere), and the</span>
<span class="hljs-comment">// time (in milliseconds, which can also be calculated elsewhere). that&#39;s all.</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doThatThing</span>(<span class="hljs-params">arr</span>)</span>{
  <span class="hljs-keyword">return</span> (<span class="hljs-string">&#39;Hello &#39;</span> + arr + <span class="hljs-string">&#39;, how are you?&#39;</span>);
}
setTimeout(doThatThing, <span class="hljs-number">1000</span>);

<span class="hljs-comment">// ask:</span>
<span class="hljs-comment">// would it be harmful to think of underscore (or functional javascript in general) as</span>
<span class="hljs-comment">// being modular libraries/modules? (because javascript, at least in the browser, is not</span>
<span class="hljs-comment">// inherently modular -- no more so than it is inherently functional, object-oriented,</span>
<span class="hljs-comment">// or anything else... it&#39;s dynamic and multi-paradigm).</span>

<span class="hljs-comment">// order.updateTotal();</span>
<span class="hljs-comment">// console.log(order.total.bind();</span>

<span class="hljs-comment">// he uses &#39;self&#39;; we could just as easily use &#39;that&#39; or whatever <code>var foo = this.bar</code></span>
<span class="hljs-comment">// ... or we could not, also.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// Functions as parameters</span>

<span class="hljs-comment">// Create a function that calculates 10% tax</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateTax</span>(<span class="hljs-params">amount</span>) </span>{
  <span class="hljs-keyword">return</span> amount <em> <span class="hljs-number">0.10</span>;
}

<span class="hljs-comment">// Create a function that takes in an order amount calculates total</span>
<span class="hljs-comment">// including tax</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateTotal</span>(<span class="hljs-params">amount</span>) </span>{
  <span class="hljs-keyword">return</span> amount + calculateTax(amount);
}

<span class="hljs-keyword">var</span> orderTotal = calculateTotal(<span class="hljs-number">10.00</span>);
<span class="hljs-built_in">console</span>.log(orderTotal);

<span class="hljs-comment">// Create a function that calculates 7% tax for Utah</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateUtahTax</span>(<span class="hljs-params">amount</span>) </span>{
  <span class="hljs-keyword">return</span> amount </em> <span class="hljs-number">0.07</span>;
}

<span class="hljs-comment">// Update calculateTotal to include a state parameter use</span>
<span class="hljs-comment">// the new utah calculator when the state is Utah</span>
calculateTotal = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">amount, state</span>) </span>{
  <span class="hljs-keyword">if</span> (state === <span class="hljs-string">&#39;Utah&#39;</span>) {
    <span class="hljs-keyword">return</span> amount + calculateUtahTax(amount);
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> amount + calculateTax(amount);
  }
};

orderTotal = calculateTotal(<span class="hljs-number">20</span>, <span class="hljs-string">&#39;Utah&#39;</span>);
<span class="hljs-built_in">console</span>.log(orderTotal);

<span class="hljs-comment">// Q: What are some potential problems with this method?</span>
<span class="hljs-comment">// Q: What if tax calculation for Utah is based on county?</span>
<span class="hljs-comment">// Q: What if we need to calculate for other states?</span>

<span class="hljs-comment">// Update the calculateTotal to accept a function</span>
<span class="hljs-comment">// as a parameter that can calculate tax</span>
calculateTotal = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">amount, taxCalculator</span>) </span>{
  <span class="hljs-keyword">return</span> amount + taxCalculator(amount);
};


<span class="hljs-comment">// Invoke calculateTotal with both calculateTax functions</span>
orderTotal = calculateTotal(<span class="hljs-number">30</span>, calculateUtahTax);
<span class="hljs-built_in">console</span>.log(orderTotal);

<span class="hljs-comment">// Q: What is better about this approach?</span>


<span class="hljs-comment">// Create a another function called GetTaxCalculator</span>
<span class="hljs-comment">// that takes state as a parameter and returns the</span>
<span class="hljs-comment">// correct tax calculator</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetTaxCalculator</span>(<span class="hljs-params"></span>) </span>{

}

<span class="hljs-comment">// Q: If we add new tax calculators, what code will need to be updated?</span>

<span class="hljs-comment">// Using functions as arguments to other functions is one way we can</span>
<span class="hljs-comment">// get results from an asynchronous function.</span>

<span class="hljs-comment">// Asynchronous &amp; functions as callbacks</span>

<span class="hljs-comment">// Create a function called done, that writes done to the console</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">done</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;done&#39;</span>);
}

<span class="hljs-comment">// Use setTimeout and pass the done function as the callback</span>
setTimeout(done, <span class="hljs-number">2000</span>);

<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;after setTimeout&#39;</span>);

<span class="hljs-comment">// Q: Why does &#39;after setTimeout&#39; display before &#39;done&#39;?</span>


<span class="hljs-comment">// Create a function called getColors that uses setTimeout to simulate</span>
<span class="hljs-comment">// an asynchronous call to a web server that returns an array of colors</span>
<span class="hljs-keyword">var</span> getColors = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">//console.log(&#39;Returning colors...&#39;);</span>
    <span class="hljs-keyword">return</span> [<span class="hljs-string">&#39;Red&#39;</span>,<span class="hljs-string">&#39;Blue&#39;</span>,<span class="hljs-string">&#39;Purple&#39;</span>,<span class="hljs-string">&#39;Black&#39;</span>];
  },<span class="hljs-number">500</span>);
};


<span class="hljs-comment">// Q: What will the value of colors be? Why?</span>
<span class="hljs-keyword">var</span> colors = getColors();
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;Colors: &#39;</span> + colors);

<span class="hljs-comment">// Update getColors to solve the problem by using a callback</span>
getColors = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">displayColors</span>) </span>{

  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    displayColors([<span class="hljs-string">&#39;Red&#39;</span>,<span class="hljs-string">&#39;Blue&#39;</span>,<span class="hljs-string">&#39;Purple&#39;</span>,<span class="hljs-string">&#39;Black&#39;</span>]);
  },<span class="hljs-number">500</span>);

};
<span class="hljs-comment">// Invoke getColors again using the callback</span>
<span class="hljs-keyword">var</span> displayColors = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">colors</span>) </span>{
  <span class="hljs-built_in">console</span>.log(colors);
};

getColors(displayColors);
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;after getColors&#39;</span>);


<span class="hljs-comment">// Q: What challenges does asynchronous code create? How does it affect</span>
<span class="hljs-comment">// code readability?</span>
<span class="hljs-comment">// Q: What advantages does it provide?</span>

<span class="hljs-comment">// Create a function called forEach that takes an array as the first parameter, and a function as the second parameter.  The forEach function should loop over the items in the array and invoke the callback function, passing in each item in the array</span>
<span class="hljs-keyword">var</span> forEach = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">items, callback</span>) </span>{
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; items.length; i++) {
    callback(items[i]);
  }
};

<span class="hljs-comment">// Create an array of colors</span>
<span class="hljs-keyword">var</span> colors = [<span class="hljs-string">&#39;Red&#39;</span>, <span class="hljs-string">&#39;Blue&#39;</span>, <span class="hljs-string">&#39;Purple&#39;</span>, <span class="hljs-string">&#39;Pink&#39;</span>];

<span class="hljs-comment">// use forEach to loop over the array of colors.  Pass a callback</span>
<span class="hljs-comment">// to forEach that receives a color as a parameter and outputs the</span>
<span class="hljs-comment">// name of the color to the console.</span>
forEach(colors, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">color</span>) </span>{
  <span class="hljs-keyword">return</span> color;
});

<span class="hljs-comment">// Now create an order object that has a total property, and a property called items that is an array containing item prices. Add a method called updateTotal that uses the forEach function to loop over the items and update the total property</span>
<span class="hljs-keyword">var</span> order = {
  total: <span class="hljs-number">0</span>,
  items: [<span class="hljs-number">1.99</span>,<span class="hljs-number">2.50</span>,<span class="hljs-number">9.99</span>],
  updateTotal: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">this</span>.total = <span class="hljs-number">0</span>;

    forEach(<span class="hljs-keyword">this</span>.items, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{
      <span class="hljs-keyword">this</span>.total += item;
    });
  }
};

<span class="hljs-comment">// Invoke the updateTotal method and display the order total</span>
order.updateTotal();
<span class="hljs-built_in">console</span>.log(order.total);

<span class="hljs-comment">// Q: Why is the total zero?</span>

<span class="hljs-comment">// Change the updateTotal method to solve the problem using &#39;self&#39;</span>
order.updateTotal = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">this</span>.total = <span class="hljs-number">0</span>;

  <span class="hljs-keyword">var</span> self = <span class="hljs-keyword">this</span>;
  forEach(<span class="hljs-keyword">this</span>.items, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{
    self.total += item;
  });
};

order.updateTotal();
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Total using &#39;self&#39;: &quot;</span> + order.total);

<span class="hljs-comment">// Change the updateTotal method to solve the problem using &#39;bind&#39;</span>
order.updateTotal = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">this</span>.total = <span class="hljs-number">0</span>;

  forEach(<span class="hljs-keyword">this</span>.items, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{
    <span class="hljs-keyword">this</span>.total += item;
  }.bind(<span class="hljs-keyword">this</span>));
};

order.updateTotal();
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Total using &#39;bind&#39;: &quot;</span> + order.total);

<span class="hljs-comment">// Change the updateTotal method to solve problem by passing &#39;this&#39;</span>
<span class="hljs-comment">// to forEach</span>
<span class="hljs-comment">// This solution requires updating our forEach function itself and isn&#39;t</span>
<span class="hljs-comment">// always an option</span>

<span class="hljs-comment">// Update forEach to take a 3rd parameter, which is what &#39;this&#39; should</span>
<span class="hljs-comment">// be bound to</span>
forEach = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">items, callback, whatThisShouldBe</span>) </span>{
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; items.length; i++) {
    callback.call(whatThisShouldBe, items[i]);
  }
};

<span class="hljs-comment">// Update updateTotal to pass it the order object</span>
order.updateTotal = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">this</span>.total = <span class="hljs-number">0</span>;

  forEach(<span class="hljs-keyword">this</span>.items, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>{
    <span class="hljs-keyword">this</span>.total += item;
  }, <span class="hljs-keyword">this</span>);
};

order.updateTotal();
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#39;Total using update to forEach: &#39;</span> + order.total);


<span class="hljs-comment">//</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// JQUERY</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">//</span>

<span class="hljs-comment">// things to keep in mind:</span>
<span class="hljs-comment">// css and images will load up to 6 in parl</span>
<span class="hljs-comment">// js will only load in order, once after another</span>
<span class="hljs-comment">// because obviously some things depend on other things</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">//</span>
.find <span class="hljs-comment">// finds all below</span>
.children <span class="hljs-comment">// finds only direct immediate descendant</span>
<span class="hljs-comment">// this is like nesting in css selectors, basically</span>


<span class="hljs-comment">// dragndrop in jquery:</span>

.on(<span class="hljs-string">&#39;mousedown&#39;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  isPressed = <span class="hljs-literal">true</span>;
}

.on(<span class="hljs-string">&#39;mouseup&#39;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  isPressed = <span class="hljs-literal">false</span>;
})

.on(<span class="hljs-string">&#39;mouseenter&#39;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-keyword">if</span>(isPressed) {
    $(<span class="hljs-keyword">this</span>).addClass(color);
  }
})

<span class="hljs-comment">// assuming we&#39;re using that paint example, obvs.</span>

<span class="hljs-comment">// notes on localstorage:</span>
localStorage.setItem(<span class="hljs-string">&#39;key&#39;</span>, <span class="hljs-string">&#39;value&#39;</span>); ==
localStorage.key = <span class="hljs-string">&#39;value&#39;</span>; ==
localStorage[<span class="hljs-string">&#39;key&#39;</span>] = <span class="hljs-string">&#39;value&#39;</span>;

<span class="hljs-keyword">return</span> localStorage.key; ==
<span class="hljs-keyword">return</span> localStorage.getItem(<span class="hljs-string">&#39;key&#39;</span>); ==
<span class="hljs-keyword">return</span> localStorage[<span class="hljs-string">&#39;key&#39;</span>];

<span class="hljs-keyword">delete</span> localStorage.key also works.
;;;;;;;;

<span class="hljs-comment">//</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// AJAX THINGS</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// make data</span>
<span class="hljs-comment">// change data</span>
<span class="hljs-comment">// check data</span>
<span class="hljs-comment">// move data</span>
<span class="hljs-comment">// delete data</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// is there anything else in an application but these five things?</span>
<span class="hljs-comment">// this is a dare, from jeremy. hmmmmmmmmmmm.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// notes: jeremy says to not store drug money data on PCs xD</span>
<span class="hljs-comment">// (because everything is data, data, data, data, data)</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// Create - POST</span>
<span class="hljs-comment">// Read    - GET</span>
<span class="hljs-comment">// Update - PUT</span>
<span class="hljs-comment">// Delete - DELETE</span>
<span class="hljs-comment">//</span>
<span class="hljs-keyword">var</span> ajaxParams = {
  method: <span class="hljs-string">&#39;GET&#39;</span>,
  url: <span class="hljs-string">&#39;<a href="http://zacanger.com/blog/feed.rss">http://zacanger.com/blog/feed.rss</a>&#39;</span>,
}


$.ajax(ajaxParams).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>{

})

<span class="hljs-comment">// cyclomatic complexity</span>
<span class="hljs-comment">// more things you&#39;re doing</span>
<span class="hljs-comment">// more bugs</span>
<span class="hljs-comment">//</span></code></pre>]]></description><link>/2016/notes-from-devmountain-02.html</link><guid isPermaLink="true">/2016/notes-from-devmountain-02.html</guid><category><![CDATA[devmtn]]></category><category><![CDATA[js]]></category><category><![CDATA[css]]></category><category><![CDATA[angular]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Thu, 05 May 2016 19:35:00 GMT</pubDate></item><item><title><![CDATA[NOTES FROM DEVMOUNTAIN]]></title><description><![CDATA[<p>This is going to be a crapton of my notes, from when I was going through the course at DevMountain.</p>
<p>Looking back over these, a lot of them are dumb. What I mean by this is that my opinions on things were dumb.</p>
<p>Whatever.</p>
<p>Don&#39;t take it all so seriously. Some of it could be really helpful. This is about half of my collected
notes <em>that were inside project files</em>. Everything else has already been cleaned up and posted, or is in
a directory of drafts somewhere. This stuff is totally unedited.</p>
<hr>
<h2 id="ng-probs">ng probs</h2>
<pre class="hljs"><code><span class="hljs-comment">// this is in a <code>.then</code>. NOTE THAT ANGULAR WILL GIVE YOU AN OBJECT EVEN IF YOU HAVE AN ARRAY</span>
<span class="hljs-comment">// though it will give you your <em>objects</em> in the <em>array</em> that they come in, it&#39;ll still work</span>
<span class="hljs-comment">// on the front end.</span>
<span class="hljs-comment">// we were having issues here looping over the array and setting the returned index on scope,</span>
<span class="hljs-comment">// then trying to return that. this works a lot better.</span>
.then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(stuff)</span></span>{
  <span class="hljs-variable">$scope</span>.foo = stuff
  <span class="hljs-variable">$scope</span>.things = stuff.StuffToBringBack
})</code></pre><hr>
<h2 id="angular-directives">angular: directives</h2>
<p>directives are different than controllers and services. directives ALWAYS return an object. when you write a
ctrl or svc you&#39;re giving some definitions to something that already exists. with directives you&#39;re closer
to writing routing. you&#39;re writing a set of instructions. they return an object. objects get, obviously,
key-value pairs.</p>
<pre class="hljs"><code><span class="hljs-class">.directive</span>(<span class="hljs-string">&#39;myDirective&#39;</span>, <span class="hljs-function">function</span>(){
  <span class="hljs-tag">return</span> {
    <span class="hljs-attribute">template</span>: <span class="hljs-string">&#39;Key: Value, key: value&#39;</span>;
  }
})</code></pre><p>directive names MUST be camelCase. pascal case will not be recognized. nor snake case?</p>
<p>i mean, really, it&#39;s all made a lot more complicated than it needs to be. we&#39;re starting out basically
just making our own little bits. it makes sense. if it works as a template file, or as just regular html,
it&#39;ll work as a custom directive. just more reusable as a directive.</p>
<p>we could have a directive with a TYPE. imagine a function that returns a customer with an attribute that&#39;s
.type... so we&#39;d have a directive called myCustomer, type=&quot;name&quot;, then another, type=&quot;smoking habits&quot;.
paramaters here are always (element, attribute).</p>
<p>Restrict as a property: E means element (so you&#39;d do <myDirective> instead of <div myDirective>
A is attribute, so it&#39;d be <div myDirective>
can do BOTH so it&#39;d work for either. (restrict: EA)
C is for class, but let&#39;s not do that! That seems like a really not okay and very bad idea.
This is basically for semantic enforcement. Element would be good for a custom block, eg</p>
<p><myDirective>a whole bunch of shit just about this one</myDirective></p>
<p><mySECONDdirective>another whole bunch</mySECONDdirective> etc
A would be good for tacking things onto elements that would likely be there anyway, it seems.
If you need to take in parameters, A would be better.</p>
<p>custom filters like this!</p>
<pre class="hljs"><code>&lt;input model=<span class="hljs-string">&quot;whatcha&quot;</span>&gt;
&lt;span custom=<span class="hljs-string">&quot;format&quot;</span>&gt;
<span class="hljs-keyword">function</span> link(scope, <span class="hljs-literal">element</span>, attributes){
var whatever
stuffings
}
<span class="hljs-keyword">return</span> { link: link; }
scp.<span class="hljs-variable">$watch</span>(<span class="hljs-string">&#39;format&#39;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-keyword">value</span>){
format=value;
updateTime();
});</code></pre><p>link ALWAYS takes in at leaste those three, and alkways in that order!</p>
<p>inside a directive, feel free to do some jquery-lite.
if you want to use, say, d3, or three.js, you can go ahead and inject that into angular
and use it. (we&#39;re talking about other DOM manupilation, not utilities like lodash).</p>
<p>inside a link whatever, that scp refers to its parent&#39;s scope, it shares parent&#39;s scope
by default. eg if custom up there is directly below mainCtrl, scp means mainCtrl&#39;s $scope.</p>
<p>underneath .directive, the scope: { stuff } actually means, like, scope INSTRUCTIONS or
somesuch.</p>
<p>SCOPE</p>
<pre class="hljs"><code><span class="hljs-tag">scope</span>: {
<span class="hljs-attribute">string</span>: <span class="hljs-string">&#39;@&#39;</span>,
<span class="hljs-attribute">link</span>: <span class="hljs-string">&#39;=&#39;</span>,
<span class="hljs-attribute">func</span>: <span class="hljs-string">&#39;&amp;&#39;</span>
}</code></pre><p>The properties on the scope object represent the attributes on the directive in the html. Our example scope object here would look something like this in the html.
<code>&lt;example-directive string=&quot;a string&quot; link=&quot;user&quot; func=&quot;updateUser()&quot;&gt;&lt;/example-directive&gt;</code>
The hard part here is the <code>@</code>, <code>=</code>, and <code>&amp;</code>. They each have very important and distinct meanings.</p>
<ul>
<li><code>@</code> says take in my attribute value as a string.</li>
<li><code>=</code> says take in my attribute value as a two-way bound variable from the parent scope.</li>
<li><p><code>&amp;</code> says take in my attribute value as a reference to a function on the parent scope.</p>
</li>
<li><p>(from another notes snippet):</p>
<ul>
<li><code>@</code> : string/text (one-way)</li>
<li><code>=</code> : two-way</li>
<li><code>&amp;</code> : binds parent scope&#39;s methods into directive&#39;s scope</li>
<li><code>&lt;</code> : one-way (outer-to-inner)</li>
</ul>
</li>
</ul>
<hr>
<h2 id="firebase">firebase</h2>
<p>firebase with $firebaseObject (or $firebaseArray) and $bindTo just makes all
the <strong>MAGIC</strong> (that we poor slobs are are too dumb to even vaguely comprehend)
even MORE magical; with angularfire and firebase and angular doing everything
for you, we now have, basically, a subpar meteor-like 3-way-binding.</p>
<p><code>&lt;ng-change=&quot;$scope.save(thingy)&quot;&gt;</code> will propogate back to firebase
(or <code>&lt;ng-change=&quot;thingy(save)&quot;&gt; // $scope.sav(thingy)</code> if we&#39;re doing things
modularly).</p>
<p><code>ng-model-options=&quot;{debounce: {&#39;default&#39;: 5000}}&quot; // debounces. to 5000 ms. wowe.</code></p>
<hr>
<h2 id="express">express</h2>
<ul>
<li>if chain in express:</li>
<li>method, url, callback</li>
<li><code>app.all(&#39;/endpoint&#39;, function(){console.log(&#39;a thing&#39;)})</code></li>
<li>so it&#39;s one long chain of if statements. like we do manually. that&#39;s all.</li>
<li>express chain [{method: &#39;all&#39;, endpoint:&#39;/endpoint&#39;, function(){}, {method: &#39;get&#39;, endpoint:&#39;/nextone&#39;}etc etc etc etc}]d</li>
<li>all endpoints are hit, with exception dependent on response</li>
<li>req and res are passed to EVERY function by express</li>
<li>ongoing request and response are passed on down whole if statement chain</li>
<li>a controller can&#39;t reference arrays from another file.<ul>
<li>so, your server (or, let&#39;s say, your index) couldn&#39;t have something defined that a ctrl needs to access<ul>
<li>(assuming your ctrl is set up as a an object, module.exports = {} with your functions(req, res, next) all in there.)</li>
</ul>
</li>
<li>solution?</li>
<li>move your stuff into the file where you want to access it, i guess.</li>
<li>module.exports can be an array, too. that makes sense in a db context, okay.</li>
</ul>
</li>
</ul>
<hr>
<h2 id="express-more">express more</h2>
<h4 id="req-params-vs-req-query">req.params vs req.query</h4>
<ul>
<li>Params and Query do the same thing.</li>
<li>Params is hardcoded into endpoint; query allows some flexibility.</li>
<li>Query uses <a href="http://url.url/api/endpoint?whatever=something">http://url.url/api/endpoint?whatever=something</a></li>
<li>Param would be more like <a href="http://url.url/api/endpoint/something">http://url.url/api/endpoint/something</a></li>
</ul>
<pre class="hljs"><code>app.get(<span class="hljs-string">&#39;api/hobbies/:type/:fun&#39;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res)</span></span>{
  req.params.<span class="hljs-built_in">type</span> // boring
  hobbies.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(hobby)</span></span>{
    <span class="hljs-keyword">if</span> (hobby.<span class="hljs-built_in">type</span> = req.params.<span class="hljs-built_in">type</span>) {
      res.send(hobby)
    }
  })
});

localhost:<span class="hljs-number">8989</span>/api/hobbies/boring/no

app.get(<span class="hljs-string">&#39;api/hobbies&#39;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res)</span></span>{
  req.query.<span class="hljs-built_in">type</span> // boring
  hobbies.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(hobby)</span></span>{
    <span class="hljs-keyword">if</span> (hobby.<span class="hljs-built_in">type</span> = req.query.<span class="hljs-built_in">type</span>) {
      res.send(hobby)
    }
  })
})

localhost:<span class="hljs-number">8989</span>/api/hobbies?<span class="hljs-built_in">type</span>=boring&amp;fun=no

var hobbies = [];</code></pre><h4 id="how-to-not-need-to-use-express-cors-or-whatever-cors-">how to not need to use express-cors (or whatever-cors)</h4>
<pre class="hljs"><code><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#39;express&#39;</span>);
<span class="hljs-keyword">var</span> request = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#39;request&#39;</span>);

<span class="hljs-keyword">var</span> app = express();
app.<span class="hljs-keyword">use</span>(<span class="hljs-string">&#39;/&#39;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res)</span> </span>{
  <span class="hljs-keyword">var</span> url = apiServerHost + req.url;
  req.pipe(request(url)).pipe(res);
});

app.listen(process.env.PORT || <span class="hljs-number">3000</span>);</code></pre><p>OBVIOUSLY this only applies when everything&#39;s local; this is a proxy server, essentially, sort of.</p>
<p>also there&#39;s an express builtin: <code>app.use(express.static()</code>, eg <code>app.use(express.static(&#39;public&#39;))</code></p>
<h4 id="monogooooooooooo-se-">monogooooooooooo(se)</h4>
<p>Turns out if you send Mongoose anything that&#39;s not in your schema, it&#39;s just like &quot;Oh, okay, I&#39;m not interested&quot; and tosses that bit out, I guess.</p>
<p>When we&#39;re not doing eg <code>require(&#39;./path&#39;)</code> (but rather <code>require(/path)&#39; with no dot first</code>), it looks in <code>node_modules/</code>. Obvs usually we&#39;ll probably look from cwd instead. Any way to look from project root by default?</p>
<pre class="hljs"><code>getStuff: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req, res)</span>{</span>
  <span class="hljs-transposed_variable">Stuff.</span>find().populate(<span class="hljs-string">&#39;things.whatevers&#39;</span>).exec()
    .<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(data, err)</span></span>
<span class="hljs-comment">// etc., etc., etc., etc.</span></code></pre><hr>
<h2 id="ionic">ionic</h2>
<ul>
<li>We&#39;re getting a little super-fast (read: unplanned and, I think, unannounced) rundown on Ionic.</li>
<li>Which is totally fine, but it&#39;s basically Angular, plus Phonegap, which are two things I rather dislike.</li>
<li>Okay, I&#39;m using the Yeoman generator-ionic-gulp seed.</li>
<li>Aaaaand this is just like Angular, except with predefined CSS rules, basically.</li>
<li>The &#39;magic&#39; is all in the bit where it handles compiling/wrapping for you.</li>
<li>So... on with my personal project, I suppose.</li>
</ul>
<hr>
<h2 id="d3">D3</h2>
<ul>
<li>svg starts 0,0 top left, not bottom left.</li>
<li>svg has no z-index. just renders in order it&#39;s written.</li>
<li>rotations and transforms on svg will screw with things when it comes to moving stuff!</li>
<li>d3, chaining methods super common.</li>
</ul>
<hr>
<h2 id="react">react</h2>
<ul>
<li>react is reacty. it reacts, sometimes reactively.</li>
<li>it&#39;s still ugly as hell and i hope it dies, though.</li>
<li>note that i&#39;m doing all this in vim because:<ul>
<li>A. lighttable doesn&#39;t like react and</li>
<li>B. lighttable has my projects loadded up, currently, and i don&#39;t want to add yet another workspace.</li>
</ul>
</li>
<li>so, this will probably all be formatted like shit, because vim doesn&#39;t understand, no matter how many times i tell it, that i don&#39;t want it to turn spaces into tabs, i want the opposite.</li>
<li>oh well.</li>
</ul>
<hr>
<h2 id="s3">S3</h2>
<ul>
<li>Basically, since Mongo can&#39;t store images without doing difficult-ish things involving GridFS,
the prescription is to use S3 in... basically the same way, actually, which results in more total requests,
but the hope is that Amazon&#39;s caching or somesuch is good enough to offset the latency.</li>
<li>Amazon needs your regional server to be passed in during requests. Which is both sensible and silly, since really that should be a part of your keys.</li>
<li>When Amazon wants a &#39;Key&#39; in your paramss, that&#39;s not a key. That&#39;s the actual thing you&#39;re fuckin&#39; with. so, req.body.img.</li>
<li>Buffers in node are bytes in python are strings in PHP if they were mutable.</li>
</ul>
<hr>
<h2 id="deployment-while-in-development">deployment while in development</h2>
<h3 id="heroku">heroku</h3>
<ul>
<li>workflow: have a project. have a git repo in it. <code>heroku create</code>, assuming you use/have heroku.</li>
<li>(same as <code>git remote add heroku https://someurl.herokuapp.com</code>)</li>
</ul>
<h3 id="digital-ocean">digital ocean</h3>
<ul>
<li>digital ocean: works the same as ever, which is to say, it&#39;s not convenient,
but it it&#39;s okay. prefer koding if they let me back in, but if not,
maybe using codeanywhere/codenvy/c9/any one of the other IDEs with built in dev servers.</li>
</ul>
<hr>
<p>...that&#39;s all, for now. There will probably be more, once I sort through the first three weeks&#39; worth of shit.</p>
<p>tags: notes, devmountain, lol, i-am-ridiculous, directives, angular, firebase, express, mongo, mongoose, node, ionic, d3, react, heroku, digital-ocean</p>
]]></description><link>/2016/notes-from-devmountain-01.html</link><guid isPermaLink="true">/2016/notes-from-devmountain-01.html</guid><category><![CDATA[devmtn]]></category><category><![CDATA[notes]]></category><category><![CDATA[js]]></category><category><![CDATA[css]]></category><category><![CDATA[angular]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Thu, 05 May 2016 19:30:00 GMT</pubDate></item><item><title><![CDATA[notes from mentoring at devmountain]]></title><description><![CDATA[<h2 id="webinar-notes">webinar notes</h2>
<ul>
<li><code>%</code> is not <em>exactly</em> modulo, but rather remainder. Eg <code>9 % 3 // 0</code> , or <code>10 % 3 // 1</code></li>
<li><code>var++ === var=var+1</code></li>
<li><code>var-- === var=var-1</code></li>
<li>however</li>
<li><code>varTwo = var++</code> would mean <code>varTwo = var</code>, <code>var=var+1</code>, etc. keep in mind.</li>
<li>and, <code>varTwo = ++var</code> is the same as <code>++var,</code> <code>varTwo = var</code></li>
<li>(so, if <code>var</code> is originally one, both <code>varTwo</code> and <code>var</code> are now equal to two).</li>
<li>In other words, <code>++var</code> says &#39;increment this <code>var</code>; the value of the expression is the final value,&#39;
while <code>var++</code> would mean &#39;remember var? go ahead and increment it, but the value of the expression
is the original value of <code>var</code>.&#39; <code>var++</code> and <code>++var</code> are the same thing, but when used in an expression,
they&#39;ll return differently.</li>
<li>math using parens works just like math using parens in real life:
those things happen first. convenient, neh?</li>
<li>mention <code>===</code> vs <code>==</code> ? the book doesn&#39;t touch on that early enough.</li>
<li><p>in the case of <code>true || whatever</code>, <code>whatever</code> will never be checked;
in the case of <code>false &amp;&amp; whatever</code>, <code>whatever</code> will never be checked. they are evaluated <em>only when necessary</em>.</p>
</li>
<li><p>keywords:</p>
</li>
</ul>
<pre class="hljs"><code><span class="hljs-keyword">break</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">catch</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">continue</span> debugger
<span class="hljs-keyword">default</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">do</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">enum</span> <span class="hljs-keyword">export</span> extends <span class="hljs-literal">false</span>
<span class="hljs-keyword">finally</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">function</span> <span class="hljs-keyword">if</span> implements <span class="hljs-keyword">import</span> <span class="hljs-keyword">in</span>
instanceof <span class="hljs-keyword">interface</span> let <span class="hljs-keyword">new</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">package</span> <span class="hljs-keyword">private</span>
<span class="hljs-keyword">protected</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">super</span> <span class="hljs-keyword">switch</span> <span class="hljs-keyword">this</span>
<span class="hljs-keyword">throw</span> <span class="hljs-literal">true</span> <span class="hljs-keyword">try</span> <span class="hljs-keyword">typeof</span> var <span class="hljs-keyword">void</span> <span class="hljs-keyword">while</span> <span class="hljs-keyword">with</span> yield</code></pre><p><code>if (2 &amp;&amp; null){console.log(&#39;yes&#39;)}</code> returns <code>undefined</code></p>
<p><code>if (2 &amp;&amp; 3){console.log(&#39;yes&#39;)}</code> returns &#39;yes&#39;</p>
<pre class="hljs"><code>console.<span class="hljs-function"><span class="hljs-title">log</span><span class="hljs-params">(<span class="hljs-string">&#39;stuff&#39;</span>)</span></span> <span class="hljs-comment">// this is a single-line comment, ignored by the interpreter</span>
<span class="hljs-comment">/<em> and this
</em> is a multi-line commment
<em> also ignored
</em> and full of words
*/</span></code></pre><hr>
<h2 id="functional-js">Functional JS</h2>
<p>Functions are first-class objects. This means that <code>var foo = 2</code> and <code>var bar = function(quux, baz){return quux + baz}</code>
are equally valid. This isn&#39;t exactly special, but it means that (importantly) functions can be passed as arguments.
<code>var fooBar = function(fn, quux, baz){return fn(quux, baz)}</code> is still good, as is the following:</p>
<pre class="hljs"><code><span class="hljs-keyword">var</span> sum = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a, b)</span></span>{
    <span class="hljs-keyword">return</span> a + b
}
<span class="hljs-keyword">var</span> exec = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(fn, a, b)</span></span>{
    <span class="hljs-keyword">return</span> fn(a, b)
}
exec(sum, <span class="hljs-number">28</span>, <span class="hljs-number">98</span>)</code></pre><p>Higher-order functions are functions that <em>return other functions</em>. <code>var stuff = function(things){return
function(){return things}}</code>. Closures, for example, always return the same thing, as in <code>var what = stuff(function(){})
; what() === what()</code>.</p>
<p>A closure&#39;s inner function has access to its parent&#39;s scope <em>even after the parent function has been returned</em>.
<code>function asdf(){var texty = &#39;howdy&#39;; function ghjkl(){console.log(texty)}ghjkl()}</code>.</p>
<hr>
<h2 id="local-and-session-storage">local and session storage</h2>
<ul>
<li>same api for both, but sessionStorage loses data on browser close.<ul>
<li><code>storage.getItem(k)</code> returns value for key</li>
<li><code>storage.removeItem(k)</code> removes &#39;&#39;</li>
<li><code>storage.setItem(k, v)</code> stores &#39;&#39;</li>
<li><code>storage.clear()</code> empties storage contents.</li>
</ul>
</li>
<li>api expects strings, so <em>if needed</em>, implement a wrapper. json.stringify is chill.</li>
</ul>
<hr>
<h2 id="-google-s-search-operators-help-page-https-support-google-com-websearch-answer-2466433-"><a href="https://support.google.com/websearch/answer/2466433">Google&#39;s Search Operators help page</a></h2>
<hr>
<h2 id="mongo">mongo</h2>
<ul>
<li><p><code>mongod --fork --syslog</code> will throw it in the background</p>
</li>
<li><p>from the mongo shell, <code>use admin</code> and <code>db.shutdownServer()</code> to kill. or, just <code>mongod --shutdown</code></p>
</li>
<li><p>For Mac users, if they&#39;ve installed with Ports (or Brew?), this alias would be nice:</p>
<ul>
<li><code>alias mongo-start=&#39;mongod --fork --logpath /var/log/mongo.log --logappend --dbpath=/tmp/mongo&#39;</code></li>
</ul>
</li>
</ul>
<hr>
<h2 id="angular">angular</h2>
<p>Don&#39;t design a page, then manuipulate the DOM (as you would in jQuery). Here, we&#39;re no longer building websites that we
make expressive and add to with Javascript... we&#39;re building applications in the browser, and thinking about
<em>architecting</em> an app, rather than building a website.</p>
<p>Related to that, don&#39;t try to build out your site in HTML, CSS, and Javascript (or jQuery, or whatever), and use Angular
for models and controllers. Angular doesn&#39;t like that. Angular gets mad. If you&#39;re committing to using Angular, you&#39;re
committing to learning that DSL, and using it. Angular wasn&#39;t built by Javascript people to program in Javascript. It
was designed by Java people for designers to be able to sketch out concepts in the browser.</p>
<p>The <em>view</em> is the official &#39;record&#39; in Angular. So you never actually change the DOM, except in directives, which are
applied in the view.</p>
<p>Angular&#39;s two-way data binding is actually probably it&#39;s strongest feature, at least for small apps. Using jQuery, we
might do something like the following to update content based on events:</p>
<pre class="hljs"><code><span class="hljs-variable">$.</span>ajax({
  url <span class="hljs-symbol">:</span> <span class="hljs-string">&#39;/thing.json&#39;</span>
, success (data, status) {
    <span class="hljs-variable">$(</span><span class="hljs-string">&#39;ul#log&#39;</span>).append(<span class="hljs-string">&#39;&lt;li&gt;data is here!&lt;/li&gt;&#39;</span>)
  }
})</code></pre><p>(where in the HTML we might have <code>&lt;ul id=&quot;log&quot;&gt;&lt;/ul&gt;</code>). In Angular, we&#39;d do:</p>
<pre class="hljs"><code><span class="hljs-variable">$http</span>(<span class="hljs-string">&#39;/thing.json&#39;</span>).<span class="hljs-keyword">then</span>(response =&gt; {
  <span class="hljs-variable">$scope</span>.log.push({msg : <span class="hljs-string">&#39;data is here!&#39;</span>})
})</code></pre><p>for a view that looks like <code>&lt;ul&gt;&lt;li ng-repeat&quot;thing in log&quot;&gt;{{thing.msg}}&lt;/li&gt;&lt;/ul&gt;</code>.</p>
<p>We could also just have, in our view, something like <code>&lt;input ng-model=&quot;thing.msg&quot;&gt;</code>, and there&#39;s our two-way data
binding.</p>
<p>Angular&#39;s separation of concerns is very much an MVC-ish architecture. You have a view, a model (representing data), a
service layer (reusable tasks), directives for DOM manipulation, and controllers to just stick it all together. We also
have DI in Angular, which is not at all new, but was a little unusual in client-side code before Angular really took
off. Essentially this just means we&#39;re exporting components, and then importing them in some other bit of code.</p>
<p>Something to keep in mind with Angular is that you&#39;re essentially compiling your Angular in the browser, into something
your browser&#39;s Javascript rendering engine can handle. This is the big reason Angular can have performance problems.
Angular is esssentialy <em>template driven</em> (just another way of saying that it&#39;s all about the view, as above). In
traditional sites, we&#39;re using unobtrusive Javascript; that is, we build a site, use semantic HTML, style things in a
stylesheet linked into the header, throw all our scripts in a file linked in the footer, and the page still works. In an
Angular app, you&#39;re fucked if you don&#39;t want/use/have JS, because your entire <code>index.html</code> might only consist of opening
and closing tags, and a couple of links to scripts/styles. Everything is written in Angular, which means you literally
cannot use your thing as a website anymore, because it is not (one clear indicator of this is just how badly hash
routing fucks up a lot of things).</p>
<p>This really goes back to the &#39;Angular Way&#39; of doing things--Angular isn&#39;t a framework for programmers to program; it&#39;s
not a framework to make performant, navigable, friendly sites for users to use--it&#39;s a DSL for Java developers and
designers to be able to use and comprehend equally well. Angular treats your HTML as if it&#39;s code to be compiled. In
that way it deviates from a regular MVC--the view in Angular is actaully mixed into your logic, and usually has its own
logic mixed into <em>it</em>. Angular compiles all of that into standard languages that browsers can actually understand.</p>
<p>Angular has no real solution for itself. If SEO, accessibility, compatibility, maintainability, performance, comformity
(to actual standards), ease of use, best practices, and conventional wisdom are important, Angular&#39;s probably not the
best choice. If you need to sketch out an idea and none of those are really a big deal, it&#39;s not necessarily a bad
option.</p>
<p>In Angular, you <em>want</em> to use two-way binding (I mean, really, why else use Angular, anymore?). Rather than writing a
function to update a DOM node based on an event, we&#39;re binding an element in the template, using either an attribute or
the <code>{{}}</code> notation. So, <code>&lt;input ng-model=&quot;foo.bar&quot;&gt;</code>, and <code>{{&lt;p&gt;{{foo.bar}}&lt;/p&gt;}}</code>. Now, we&#39;re sending data from the
view, to the model (<code>$scope.foo.bar</code>), and then sending that to our view.</p>
<p>Services are essentially helper functions, sorta. They&#39;re an object that contains data and functions. They&#39;re always
singletons. Nuff said.</p>
<p>One really basic way to think about the difference between Angular and many other ways of writing Javascript
applications would be this little summary: &#39;Don&#39;t select... <em>direct.</em>&#39; What I mean is, unlike in jQuery, where you use a
selector to find the elements, and then do things to them, in Angular you write your code <em>in</em> your elements (as in
<code>&lt;button ng-click=&quot;stuff()&quot;&gt;</code>), or simply write your own elements, and plug them in.</p>
<p>Angular&#39;s super opinionated about things. If you want to use unobtrusive JS, don&#39;t use Angular. Angular&#39;s position is
that it&#39;s an HTML extension; it&#39;s template-driven, declarative, and compiled.</p>
]]></description><link>/2016/notes-from-mentoring-at-demvountain.html</link><guid isPermaLink="true">/2016/notes-from-mentoring-at-demvountain.html</guid><category><![CDATA[devmtn]]></category><category><![CDATA[mentoring]]></category><category><![CDATA[angular]]></category><category><![CDATA[mongo]]></category><category><![CDATA[js]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Wed, 06 May 2015 22:35:36 GMT</pubDate></item></channel></rss>