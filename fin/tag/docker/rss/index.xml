<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - angr]]></title><description><![CDATA[writings from zac anger]]></description><link>http://blog.zacanger.com/</link><generator>Ghost</generator><lastBuildDate>Sun, 26 Mar 2017 22:04:30 GMT</lastBuildDate><atom:link href="http://blog.zacanger.com/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[script to set up ec2 build agent for tc]]></title><description><![CDATA[<p>This is a shell script to run on a new Ubuntu EC2 instance to get it
set up as a build agent for TeamCity, running stuff in Docker.</p>
<pre class="hljs"><code>#!/usr/bin/env bash

# start with a t2.large (or maybe medium) ec2 instance
# ubuntu, preferably 16.x
# needs to have semi-<span class="hljs-keyword">open</span> network access and public IP
# to be able to <span class="hljs-keyword">update</span> packages and talk to docker and your
# build server
# after running this and registering the agent <span class="hljs-keyword">on</span> the TC
# server, just <span class="hljs-keyword">use</span> the agent push
# or, download the <span class="hljs-keyword">zip</span> and scp it up

# new ubuntu instances won&#39;t have pw <span class="hljs-keyword">on</span> default user (ubuntu)
sudo <span class="hljs-keyword">su</span>

apt-get <span class="hljs-keyword">update</span>

apt-key adv --keyserver hkp:<span class="hljs-comment">//p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span>

<span class="hljs-keyword">mkdir</span> -p /etc/apt/sources.<span class="hljs-keyword">list</span>.<span class="hljs-keyword">d</span>/
touch /etc/apt/sources.<span class="hljs-keyword">list</span>.<span class="hljs-keyword">d</span>/docker.<span class="hljs-keyword">list</span>
echo &#39;deb https:<span class="hljs-comment">//apt.dockerproject.org/repo ubuntu-xenial main&#39; &gt;&gt; /etc/apt/sources.list.d/docker.list</span>
echo &#39;apt_preserve_sources_list: true&#39; &gt;&gt; /etc/cloud/cloud.cfg

<span class="hljs-keyword">if</span> [ command -v lxc-docker ] ; then
  apt-get purge lxc-docker -<span class="hljs-literal">y</span>
fi

echo &quot;
## <span class="hljs-keyword">Note</span>, this <span class="hljs-keyword">file</span> is written <span class="hljs-keyword">by</span> cloud-init <span class="hljs-keyword">on</span> first <span class="hljs-keyword">boot</span> of <span class="hljs-keyword">an</span> instance
## modifications made here will not survive a re-bundle.
## <span class="hljs-keyword">if</span> you wish to make changes you can:
## a.) add &#39;apt_preserve_sources_list: true&#39; to /etc/cloud/cloud.cfg
##     or <span class="hljs-keyword">do</span> the same <span class="hljs-keyword">in</span> user-data
## b.) add sources <span class="hljs-keyword">in</span> /etc/apt/sources.<span class="hljs-keyword">list</span>.<span class="hljs-literal">d</span>
## c.) make changes to template <span class="hljs-keyword">file</span> /etc/cloud/templates/sources.<span class="hljs-keyword">list</span>.tmpl
#

# See http:<span class="hljs-comment">//help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span>
# newer versions of the distribution.
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial main restricted</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial main restricted</span>

## Major bug fix updates produced after the final release of the
## distribution.
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates main restricted</span>

## <span class="hljs-keyword">N</span>.B. software from this repository is ENTIRELY UNSUPPORTED <span class="hljs-keyword">by</span> the Ubuntu
## team. Also, please <span class="hljs-keyword">note</span> that software <span class="hljs-keyword">in</span> universe WILL NOT receive any
## review or updates from the Ubuntu security team.
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial universe</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial universe</span>
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates universe</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates universe</span>

## <span class="hljs-keyword">N</span>.B. software from this repository is ENTIRELY UNSUPPORTED <span class="hljs-keyword">by</span> the Ubuntu
## team, and may not be under a free licence. Please satisfy yourself <span class="hljs-keyword">as</span> to
## your rights to <span class="hljs-keyword">use</span> the software. Also, please <span class="hljs-keyword">note</span> that software <span class="hljs-keyword">in</span>
## multiverse WILL NOT receive any review or updates from the Ubuntu
## security team.
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial multiverse</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial multiverse</span>
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-updates multiverse</span>

## Uncomment the following <span class="hljs-keyword">two</span> lines to add software from the &#39;backports&#39;
## repository.
## <span class="hljs-keyword">N</span>.B. software from this repository may not have been tested <span class="hljs-keyword">as</span>
## extensively <span class="hljs-keyword">as</span> that contained <span class="hljs-keyword">in</span> the main release, although it includes
## newer versions of some applications <span class="hljs-keyword">which</span> may provide useful features.
## Also, please <span class="hljs-keyword">note</span> that software <span class="hljs-keyword">in</span> backports WILL NOT receive any review
## or updates from the Ubuntu security team.
deb http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span>
deb-src http:<span class="hljs-comment">//us-east-1.ec2.archive.ubuntu.com/ubuntu/ xenial-backports main restricted universe multiverse</span>

## Uncomment the following <span class="hljs-keyword">two</span> lines to add software from Canonical&#39;<span class="hljs-literal">s</span>
## &#39;partner&#39; repository.
## This software is not part of Ubuntu, but is offered <span class="hljs-keyword">by</span> Canonical and the
## respective vendors <span class="hljs-keyword">as</span> a service to Ubuntu users.
# deb http:<span class="hljs-comment">//archive.canonical.com/ubuntu xenial partner</span>
# deb-src http:<span class="hljs-comment">//archive.canonical.com/ubuntu xenial partner</span>

deb http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security main</span>
deb-src http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security main</span>
deb http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security universe</span>
deb-src http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security universe</span>
# deb http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security multiverse</span>
# deb-src http:<span class="hljs-comment">//security.ubuntu.com/ubuntu xenial-security multiverse</span>
&quot; &gt; /etc/apt/sources.<span class="hljs-keyword">list</span>

apt-get install -y apt-transport-https <span class="hljs-keyword">ca</span>-certificates
apt-get install -y linux-image-extra-$(uname -r) --fix-missing --allow-unauthenticated
apt-get install -y default-jdk unzip docker-engine --fix-missing --allow-unauthenticated
apt-get dist-upgrade -y --allow-unauthenticated --fix-<span class="hljs-literal">missing</span>
apt-get autoremove
apt-get purge

systemctl daemon-reload
systemctl enable docker
systemctl start docker

echo &quot;
#!/usr/bin/env bash

<span class="hljs-keyword">while</span> true
<span class="hljs-keyword">do</span>
  <span class="hljs-keyword">sleep</span> 86400
  docker rmi <code>docker images -aq</code>
done
&quot; &gt; ~/docker-cleanup.<span class="hljs-keyword">sh</span>

chmod +x ~/docker-cleanup.<span class="hljs-keyword">sh</span>
nohup ~/docker-cleanup.<span class="hljs-keyword">sh</span> &amp;</code></pre>]]></description><link>/2016/teamcity-ubuntu-build-agent-setup.html</link><guid isPermaLink="true">/2016/teamcity-ubuntu-build-agent-setup.html</guid><category><![CDATA[ubuntu]]></category><category><![CDATA[docker]]></category><category><![CDATA[aws]]></category><category><![CDATA[teamcity]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Wed, 06 Jul 2016 15:59:29 GMT</pubDate></item><item><title><![CDATA[deploying docker images]]></title><description><![CDATA[<h1 id="deploying-docker-images">Deploying Docker Images</h1>
<p>You can use Docker&#39;s repos. That&#39;s the easy way so I won&#39;t talk about it here.
There are loads of good docs out there on that, and anyway, it&#39;s built into the
tools. Instead this post deals with deployment of images that you can&#39;t publish
(like your company&#39;s code).</p>
<h2 id="the-non-repo-way">The non-repo way</h2>
<p>This way doesn&#39;t give you any of the nice features of having a repo, but it&#39;s
also much easier to deal with.</p>
<p>First export your (running) container. Do a <code>docker ps</code> to get its name or ID,
then <code>docker export &lt;that-name&gt; &gt; foo.tar</code>.</p>
<p>Then you&#39;ll want to get it to your server (using <code>sftp</code> or whatever else works
for you). On the server, do a <code>cat foo.tar | docker import -</code></p>
<p>Boom, it&#39;s there. You can run it the same way you would normally (like <code>docker
run -p 80:80 -d foo</code> or whatever).</p>
<h2 id="the-your-own-repo-way">The your-own-repo way</h2>
<p>This is a little more difficult, but you get to keep all the benefits of a
Docker repo without making stuff public.</p>
<p>Get your own repo with <code>docker run -p 5000:5000 samalba/docker-registry</code>.</p>
<p>Hurray, once that&#39;s done you&#39;ll have your own Docker registry running!</p>
<p>Do something like <code>docker login localhost:5000</code> and set up some login
credentials.</p>
<p>To push your stuff to it, first tag it with info, like <code>docker tag
mycompany/theirprivatecode localhost:5000/mycompany/theirprivatecode</code>.</p>
<p>Do use this repo, just use <code>docker push
localhost:5000/mycompany/theirprivatecode</code> instead of pushing to a public repo.</p>
<p>You&#39;ll want to do a <code>docker ps</code> and get the container ID for your local
registry, and commit that so you don&#39;t lose your stuff. Or you can use <code>-v</code> or
set up volumes.</p>
<p>You&#39;ll want to do a <code>docker ps</code> and get the container ID for your local
registry, and commit that so you don&#39;t lose your stuff. Or you can use <code>-v</code> or
set up volumes.</p>
<p>Okay, so probably you&#39;ll want to put that somewhere not-on-your-local-machine.
<code>ssh</code> into your server and do an <code>ssh -R 5000:localhost:5000 -l</code> to forwared
that port. Then to deploy forreal, just <code>docker pull
localhost:5000/mycompany/theirprivatecode</code>.</p>
<p>Then to run it you should be able to just <code>docker run
mycompany/theirprivatecode</code>.</p>
]]></description><link>/2016/docker-deployment.html</link><guid isPermaLink="true">/2016/docker-deployment.html</guid><category><![CDATA[docker]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Fri, 03 Jun 2016 20:16:42 GMT</pubDate></item><item><title><![CDATA[docker notes]]></title><description><![CDATA[<p>So this is a <code>Dockerfile</code>:</p>
<pre class="hljs"><code><span class="hljs-built_in">FROM</span> ubuntu:latest
<span class="hljs-built_in">RUN</span> <span class="bash"><span class="hljs-comment"># any commands, for example</span>
</span><span class="hljs-built_in">RUN</span> <span class="bash">apt-get update
</span><span class="hljs-built_in">RUN</span> <span class="bash">apt-get dist-upgrade -y -allow-unauthenticated --fix-missing
</span><span class="hljs-built_in">RUN</span> <span class="bash">apt-get install build-essential curl
</span><span class="hljs-built_in">RUN</span> <span class="bash">curl <a href="https://gist.githubusercontent.com/isaacs/">https://gist.githubusercontent.com/isaacs/</a><span class="hljs-number">579814</span>/raw/<span class="hljs-number">24</span>f5f02b5<span class="hljs-built_in">cd</span>1812ebb1c41a33a13a0417cccbd69/take-ownership.sh | bash
</span><span class="hljs-built_in">EXPOSE</span> <span class="hljs-number">4010</span> <span class="hljs-comment"># port to expose</span>
ENTRYPOINT [<span class="hljs-string">&quot;node&quot;</span>] <span class="hljs-comment"># thing to run when we start the image, i think</span></code></pre><p>and then we do something like <code>docker build -t whatwewanttocallit .</code></p>
<p>and then <code>docker run -d 4010:4010 whatwecalledit</code></p>
<p>It looks like the <code>argon:node</code> image is one that is a thing. Nodejs.org recommends it.</p>
<p>Some other Dockerfile commands (?):</p>
<pre class="hljs"><code><span class="hljs-built_in">WORKDIR</span> <span class="bash">/<span class="hljs-built_in">set</span>/working/directory/to/here/i/guess
</span><span class="hljs-built_in">COPY</span> <span class="bash">thisthing /to/here
</span><span class="hljs-built_in">CMD</span> <span class="bash">[<span class="hljs-string">&quot;array&quot;</span>, <span class="hljs-string">&quot;of&quot;</span>, <span class="hljs-string">&quot;commands&quot;</span>, <span class="hljs-string">&quot;like&quot;</span>, <span class="hljs-string">&quot;npm&quot;</span>, <span class="hljs-string">&quot;start&quot;</span>]
</span><span class="hljs-built_in">ADD</span> <span class="bash">. . <span class="hljs-comment"># add files/dirs from cwd to image</span></span></code></pre><p>The <code>-d</code> in <code>docker run -d</code> means <code>detach</code>. And <code>-p</code> as in <code>docker run -p 80:4010</code> looks obvious.</p>
<p>Some commands:</p>
<pre class="hljs"><code>docker ps <span class="hljs-comment"># get container id</span>
docker logs containerid
docer exec -<span class="hljs-keyword">it</span> containerid /bin/bash <span class="hljs-comment"># enter the container</span></code></pre><p>It&#39;s totally fine to test against ports from a container (with eg <code>cURL</code>).</p>
<p>There&#39;s also a <code>node:versionnumber</code> image I think?</p>
<p>To get non-root users: <code>RUN groupadd -r app &amp;&amp; useradd -r -g app app</code>,
then when the image is run, do it with <code>-u &quot;app&quot;</code>.</p>
<p>To limit usage: <code>-m &quot;256M&quot; --memory-swap &quot;2G&quot;</code></p>
<p>An example:</p>
<pre class="hljs"><code>docker run \
-<span class="ruby">e <span class="hljs-string">&quot;NODE_ENV=production&quot;</span> \
</span>-<span class="ruby">u <span class="hljs-string">&quot;app&quot;</span> \
</span>-<span class="ruby">m <span class="hljs-string">&quot;256M&quot;</span> --memory-swap <span class="hljs-string">&quot;2G&quot;</span> \
</span>-<span class="ruby">w <span class="hljs-string">&quot;/web/jane-com/app&quot;</span> \
</span>-<span class="ruby">-name <span class="hljs-string">&quot;jane-com&quot;</span> \
</span>node index.js</code></pre><p>Installing (on nix): <code>curl https://get.docker.com/ | sh</code></p>
<p>Installing test version: <code>curl https://test.docker.com | sh</code></p>
<p>Installing dev version: <code>curl https://experimental.docker.com | sh</code></p>
<p>Compose is like fig, but from Docker.</p>
<pre class="hljs"><code>pip <span class="hljs-operator"><span class="hljs-keyword">install</span> -U docker-compose
docker-compose up -<span class="hljs-keyword">d</span>
docker-compose <span class="hljs-keyword">stop</span>, <span class="hljs-keyword">kill</span>, rm</span></code></pre><p>All of these just go off a YAML file, I guess.</p>
<p>Okay, based on Node&#39;s official docs we can do:</p>
<pre class="hljs"><code>FROM <span class="hljs-keyword">node</span><span class="hljs-identifier"></span><span class="hljs-title">:6</span>.<span class="hljs-number">2.0</span>
EXPOSE <span class="hljs-number">4010</span>

<span class="hljs-comment"># and then</span>

docker build -t jane-com .
docker run -it --rm -name jane-com-docker-running jane-com</code></pre><p>To keep Docker running, throw this in your bash rc: <code>eval $(docker-machine env default)</code></p>
<p>And if you need systemd in the mix, try something like:</p>
<pre class="hljs"><code><span class="hljs-comment">;; once docker is installed, there should already be</span>
<span class="hljs-comment">;; a systemd service for it. so you can just systemctl start docker</span>
<span class="hljs-comment">;; and systemctl enable docker and that SHOULD be it</span>
<span class="hljs-title">
[Unit]</span>
<span class="hljs-setting">Description=<span class="hljs-value">This is our Node service</span></span>
<span class="hljs-setting">Requires=<span class="hljs-value">docker.service</span></span>
<span class="hljs-setting">After=<span class="hljs-value">docker.service</span></span>
<span class="hljs-title">
[Service]</span>
<span class="hljs-setting">Restart=<span class="hljs-value">always</span></span>
<span class="hljs-setting">ExecStartPre=<span class="hljs-value">/usr/bin/docker kill ournodecontainer</span></span>
<span class="hljs-setting">ExecStartPre=<span class="hljs-value">/usr/bin/docker rm ournodecontainer</span></span>
<span class="hljs-setting">ExecStart=<span class="hljs-value">/usr/bin/docker run --name=ournodecontainer ournode/container</span></span>
<span class="hljs-setting">ExecStop=<span class="hljs-value">/usr/bin/docker stop ournodecontainer</span></span>
<span class="hljs-title">
[Install]</span>
<span class="hljs-setting">WantedBy=<span class="hljs-value">multi-user.target</span></span></code></pre><p><strong>TO GET YOUR IMAGE INTO A TARBALL, LOCALLY</strong> (because they don&#39;t really tell you where to look for that):</p>
<pre class="hljs"><code>docker <span class="hljs-built_in">export</span> &lt;container-hash&gt; &gt; dockerimg.tar

<span class="hljs-comment"># And then you could just:</span>

mkdir ~/foo
tar -C ~/foo -xvf dockerimg.tar

<span class="hljs-comment"># (or just use atool&#39;s aunpack, much easier to remember!)</span></code></pre><p>Docker can take a <code>.dockerignore</code>, formatted I guess basically the same as gitignore.</p>
<p>Doing an <code>export</code> piped to an <code>import</code> essentially works like a squash, flattening all the layers,
so extraneous info (for example, creating files that later get removed) wouldn&#39;t take up extra space.</p>
<p><code>docker export</code> is for <em>containers</em>, currently running.</p>
<p><code>docker save</code> is for <em>images</em>.</p>
]]></description><link>/2016/docker.html</link><guid isPermaLink="true">/2016/docker.html</guid><category><![CDATA[docker]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Thu, 26 May 2016 21:00:00 GMT</pubDate></item></channel></rss>