<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - angr]]></title><description><![CDATA[writings from zac anger]]></description><link>http://blog.zacanger.com/</link><generator>Ghost</generator><lastBuildDate>Wed, 19 Oct 2016 04:10:11 GMT</lastBuildDate><atom:link href="http://blog.zacanger.com/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[fizzbuzz]]></title><description><![CDATA[<h1 id="fizzbuzz-">fizzbuzz!</h1>
<p>i like to collect fizzbuzz solutions. that&#39;s a little weird, i guess. but fun.</p>
<p>fizzbuzz is kind of the stereotypical pointless toy problem/whiteboarding problem.</p>
<p>if you&#39;re not familiar, here&#39;s the standard definition of the problem:</p>
<p>write a program that prints numbers from 1 to 100, but for multiples of
three print &#39;fizz,&#39; for multiples of five print &#39;buzz,&#39; and for multiples
of both three and five print &#39;fizzbuzz.&#39;</p>
<p>and some good reading on fizzbuzz:</p>
<ul>
<li><a href="http://c2.com/cgi/wiki?FizzBuzzTest">http://c2.com/cgi/wiki?FizzBuzzTest</a></li>
<li><a href="http://blog.codinghorror.com/why-cant-programmers-program/">http://blog.codinghorror.com/why-cant-programmers-program/</a></li>
<li><a href="https://www.rosettacode.org/wiki/FizzBuzz">https://www.rosettacode.org/wiki/FizzBuzz</a></li>
<li><a href="http://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/">http://www.tomdalling.com/blog/software-design/fizzbuzz-in-too-much-detail/</a></li>
</ul>
<p>i keep a bunch of solutions in js <a href="https://github.com/zacanger/pineapple-curry/tree/solutions/fizzbuzz">here</a>.</p>
<p>here are some of them (including some other languages).</p>
<h2 id="in-c">in c</h2>
<pre class="hljs"><code><span class="hljs-preprocessor">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span>

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{
  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fizzbuzz from 1 through 100.\n&quot;</span>);
  <span class="hljs-keyword">int</span> hundred;
  <span class="hljs-keyword">for</span> (hundred = <span class="hljs-number">1</span>; hundred &lt;= <span class="hljs-number">100</span>; hundred++){
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, hundred);
    <span class="hljs-keyword">if</span> (hundred % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) {
      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Fizz&quot;</span>);
    } <span class="hljs-keyword">if</span> (hundred % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) {
      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Buzz\n&quot;</span>);
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);
    }
  }
  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}</code></pre><h2 id="coffeescript">coffeescript</h2>
<pre class="hljs"><code><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> in <span class="hljs-matrix">[<span class="hljs-number">1.</span><span class="hljs-number">.100</span>]</span>
  str = <span class="hljs-string">&#39;&#39;</span>
  str += <span class="hljs-string">&#39;Fizz&#39;</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">i</span> <span class="hljs-comment">% 3 is 0</span>
  str += <span class="hljs-string">&#39;Buzz&#39;</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">i</span> <span class="hljs-comment">% 5 is 0</span>
  console.<span class="hljs-built_in">log</span> (<span class="hljs-keyword">if</span> str.<span class="hljs-built_in">length</span> is <span class="hljs-number">0</span> then <span class="hljs-built_in">i</span> <span class="hljs-keyword">else</span> str)</code></pre><h2 id="php">php</h2>
<pre class="hljs"><code>&lt;?php

<span class="hljs-keyword">function</span> fizzbuzz(<span class="hljs-variable">$num</span>) {
  if (<span class="hljs-variable">$num</span> % <span class="hljs-number">15</span> == <span class="hljs-number">0</span>) {
    print(<span class="hljs-string">&quot;FizzBuzz&quot;</span> . PHP_EOL);
  } else if (<span class="hljs-variable">$num</span> % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) {
    print(<span class="hljs-string">&quot;Buzz&quot;</span> . PHP_EOL);
  } else if (<span class="hljs-variable">$num</span> % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) {
    print(<span class="hljs-string">&quot;Fizz&quot;</span> . PHP_EOL);
  } else {
    print(<span class="hljs-variable">$num</span> . PHP_EOL);
  }
}

<span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt;=<span class="hljs-number">100</span>; <span class="hljs-variable">$i</span>++)
{
  fizzbuzz(<span class="hljs-variable">$i</span>);
}</code></pre><h2 id="ruby">ruby</h2>
<pre class="hljs"><code>def fizz_buzz(num)
  <span class="hljs-literal">result</span> = &#39;&#39;
  <span class="hljs-literal">result</span> += &#39;<span class="hljs-type">Fizz</span>&#39; <span class="hljs-keyword">if</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>
  <span class="hljs-literal">result</span> += <span class="hljs-string">&quot;Buzz&quot;</span> <span class="hljs-keyword">if</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>
  puts(<span class="hljs-literal">result</span>.empty? ? num : <span class="hljs-literal">result</span>)
<span class="hljs-keyword">end</span>

(<span class="hljs-number">1</span>..<span class="hljs-number">100</span>).each{|x|
  fizz_buzz(x)
}

<span class="hljs-comment">####</span>

fizz = [<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;Fizz&quot;</span>].lazy.cycle
buzz = [<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;Buzz&quot;</span>].lazy.cycle
nums = (<span class="hljs-number">1</span>..<span class="hljs-type">Float</span>::<span class="hljs-type">INFINITY</span>).lazy

fizzbuzz = nums.zip(fizz,buzz).map <span class="hljs-keyword">do</span> |n,f,b|
  (f.empty? &amp;&amp; b.empty?) ? n.to_s : f + b
<span class="hljs-keyword">end</span>

puts fizzbuzz.take(<span class="hljs-number">100</span>).to_a

<span class="hljs-comment">####</span>

<span class="hljs-number">1</span>.upto(<span class="hljs-number">100</span>) <span class="hljs-keyword">do</span> |i|
  fizz = (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)
  buzz = (i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>)
  puts <span class="hljs-keyword">case</span>
    <span class="hljs-keyword">when</span> fizz &amp;&amp; buzz then &#39;<span class="hljs-type">FizzBuzz</span>&#39;
    <span class="hljs-keyword">when</span> fizz then &#39;<span class="hljs-type">Fizz</span>&#39;
    <span class="hljs-keyword">when</span> buzz then &#39;<span class="hljs-type">Buzz</span>&#39;
    <span class="hljs-keyword">else</span> i
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span>

<span class="hljs-comment">####</span>

<span class="hljs-number">1</span>.upto(<span class="hljs-number">100</span>) <span class="hljs-keyword">do</span> |i|
  <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>
    puts &#39;<span class="hljs-type">FizzBuzz</span>&#39;
  elsif i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>
    puts &#39;<span class="hljs-type">Fizz</span>&#39;
  elsif i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>
    puts &#39;<span class="hljs-type">Buzz</span>&#39;
  <span class="hljs-keyword">else</span>
    puts i
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span></code></pre><h2 id="python">python</h2>
<pre class="hljs"><code>i=<span class="hljs-number">0</span>
<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:i+=<span class="hljs-number">1</span>;<span class="hljs-keyword">print</span><span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-string">&quot;BzuzzizF&quot;</span>[::<span class="hljs-number">2</span>*j]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span> <span class="hljs-number">1</span>&gt;i%(<span class="hljs-number">4</span>+j))<span class="hljs-keyword">or</span> i


print([<span class="hljs-string">&quot;FizzBuzz&quot;</span> <span class="hljs-keyword">if</span> x%<span class="hljs-number">15</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;Fizz&quot;</span> <span class="hljs-keyword">if</span> x%<span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;Buzz&quot;</span> <span class="hljs-keyword">if</span> x % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">101</span>)])


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fizz_buzz</span><span class="hljs-params">(num)</span>:</span>
    <span class="hljs-keyword">if</span> num % <span class="hljs-number">15</span> == <span class="hljs-number">0</span>:
        <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;FizzBuzz&quot;</span>
    <span class="hljs-keyword">elif</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:
        <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Buzz&quot;</span>
    <span class="hljs-keyword">elif</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:
        <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Fizz&quot;</span>
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">print</span> num

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):
    fizz_buzz(i)



<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fizz_buzz</span><span class="hljs-params">(num)</span>:</span>
    <span class="hljs-keyword">if</span> num % <span class="hljs-number">15</span> == <span class="hljs-number">0</span>:
        print(<span class="hljs-string">&quot;FizzBuzz&quot;</span>)
    <span class="hljs-keyword">elif</span> num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>:
        print(<span class="hljs-string">&quot;Buzz&quot;</span>)
    <span class="hljs-keyword">elif</span> num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:
        print(<span class="hljs-string">&quot;Fizz&quot;</span>)
    <span class="hljs-keyword">else</span>:
        print(num)

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>):
    fizz_buzz(i)</code></pre><h2 id="haskell">haskell</h2>
<pre class="hljs"><code><span class="hljs-comment">-- i wrote this one</span>
<span class="hljs-module"><span class="hljs-keyword">module</span> Main <span class="hljs-keyword">where</span></span>

<span class="hljs-title">main</span> :: <span class="hljs-type">IO</span> ()
<span class="hljs-title">main</span> = printAll $ map fizzBuzz [<span class="hljs-number">1.</span><span class="hljs-number">.100</span>]
  <span class="hljs-keyword">where</span>
    printAll [] = return ()
    printAll (x:xs) = putStrLn x &gt;&gt; printAll xs

<span class="hljs-title">fizzBuzz</span> :: <span class="hljs-type">Integer</span> -&gt; <span class="hljs-type">String</span>
<span class="hljs-title">fizzBuzz</span> n | n <code>mod</code> <span class="hljs-number">15</span> == <span class="hljs-number">0</span> = <span class="hljs-string">&quot;FizzBuzz&quot;</span>
           | n <code>mod</code> <span class="hljs-number">5</span>  == <span class="hljs-number">0</span> = <span class="hljs-string">&quot;Fizz&quot;</span>
           | n <code>mod</code> <span class="hljs-number">3</span>  == <span class="hljs-number">0</span> = <span class="hljs-string">&quot;Buzz&quot;</span>
           | otherwise       = show n



<span class="hljs-comment">-- i did not write these. found around.</span>

[max(show x)(concat[n|(f,n)&lt;-[(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;Fizz&quot;</span>),(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;Buzz&quot;</span>)],mod x f==<span class="hljs-number">0</span>])|x&lt;-[<span class="hljs-number">1.</span><span class="hljs-number">.100</span>]]

<span class="hljs-comment">-- gh:ryoia</span>
<span class="hljs-comment">-- i like this one. it&#39;s a lot like how i thought it was supposed to be</span>
<span class="hljs-comment">-- which means i can read it, except it&#39;s cleaner so i can see a simple way</span>
<span class="hljs-comment">-- to improve on my own super limited hs</span>
<span class="hljs-module"><span class="hljs-keyword">module</span> FizzBuzz <span class="hljs-keyword">where</span></span>

<span class="hljs-title">divBy</span> :: <span class="hljs-type">Int</span> -&gt; <span class="hljs-type">Int</span> -&gt; <span class="hljs-type">Bool</span>
<span class="hljs-title">divBy</span> d x = x <code>mod</code> d == <span class="hljs-number">0</span>

<span class="hljs-title">fizzBuzz</span> :: <span class="hljs-type">Int</span> -&gt; <span class="hljs-type">String</span>
<span class="hljs-title">fizzBuzz</span> x
  | divBy <span class="hljs-number">15</span> x = <span class="hljs-string">&quot;FizzBuzz&quot;</span>
  | divBy <span class="hljs-number">5</span>  x = <span class="hljs-string">&quot;Buzz&quot;</span>
  | divBy <span class="hljs-number">3</span>  x = <span class="hljs-string">&quot;Fizz&quot;</span>
  | otherwise  = show x


<span class="hljs-comment">-- the below are from haskellquiz</span>

<span class="hljs-comment">-- a FizzBuzz (and FizzBuzzBaz) solution by Aaron Contorer.</span>
<span class="hljs-comment">-- This implementation is designed for extensibility,</span>
<span class="hljs-comment">-- as the list of tags can be easily edited, loaded from a file, etc.</span>
<span class="hljs-comment">-- Number range is set &gt;100 so as to demonstrate the FizzBuzzBaz case.</span>
<span class="hljs-title">fizzBuzz</span> i = <span class="hljs-keyword">if</span> null desc <span class="hljs-keyword">then</span> show i <span class="hljs-keyword">else</span> desc <span class="hljs-keyword">where</span>
  desc = concat [label | (j,label) &lt;- tags, <span class="hljs-number">0</span> == rem i j]
  tags = [ (<span class="hljs-number">3</span>,<span class="hljs-string">&quot;Fizz&quot;</span>), (<span class="hljs-number">5</span>,<span class="hljs-string">&quot;Buzz&quot;</span>), (<span class="hljs-number">7</span>,<span class="hljs-string">&quot;Baz&quot;</span>) ]

<span class="hljs-title">main</span> = mapM<em> (putStrLn . fizzBuzz) [<span class="hljs-number">1.</span><span class="hljs-number">.120</span>]


<span class="hljs-comment">-- don&#39;t know if this works, but looks not nice.</span>
<span class="hljs-module"><span class="hljs-keyword">module</span> Main <span class="hljs-keyword">where</span></span>

  main :: <span class="hljs-type">IO</span> ()
  main = <span class="hljs-keyword">do</span>
    mapM</em> (putStrLn) [fizzBuzz x | x &lt; [<span class="hljs-number">0.</span><span class="hljs-number">.100</span>]]

    fizz :: <span class="hljs-type">Int</span> -&gt; <span class="hljs-type">String</span>
    fizz x = <span class="hljs-keyword">if</span> x <code>mod</code> <span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&quot;fizz&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span>

    buzz :: <span class="hljs-type">Int</span> -&gt; <span class="hljs-type">String</span>
    buzz x = <span class="hljs-keyword">if</span> x <code>mod</code> <span class="hljs-number">5</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&quot;buzz&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;&quot;</span>

    fizzBuzz :: <span class="hljs-type">Int</span> -&gt; <span class="hljs-type">String</span>
    fizzBuzz x = <span class="hljs-keyword">if</span> fizz(x) ++ buzz(x) == <span class="hljs-string">&quot;&quot;</span>
                    <span class="hljs-keyword">then</span> show x
                    <span class="hljs-keyword">else</span> fizz(x) ++ buzz(x)


<span class="hljs-comment">{-
Fizz comes before Buzz comes before an integer. Fizz and Buzz stick to each other, but hide integers.
The lists for Fizz and Buzz are infinite, but zipping together with a finite list of integers,
the result is finite.
-}</span>

<span class="hljs-module"><span class="hljs-keyword">module</span> Main <span class="hljs-keyword">where</span></span>

<span class="hljs-title">main</span> :: <span class="hljs-type">IO</span> ()
<span class="hljs-title">main</span> = mapM<em> putStrLn $ zipWith3 join (loop <span class="hljs-number">3</span> <span class="hljs-string">&quot;Fizz&quot;</span>) (loop <span class="hljs-number">5</span> <span class="hljs-string">&quot;Buzz&quot;</span>) [<span class="hljs-number">1.</span><span class="hljs-number">.100</span>]
  <span class="hljs-keyword">where</span>
    xor s t = <span class="hljs-keyword">if</span> null s <span class="hljs-keyword">then</span> t <span class="hljs-keyword">else</span> s
    loop n s = cycle $ replicate (n-<span class="hljs-number">1</span>) [] ++ [s]
    join s t n = xor (s ++ t) (show n)

<span class="hljs-comment">{-
If one has enabled all warnings as errors, then the integers need an explicit type, as shown below.
The hiding logic can also be implemented by filtering for the first non-null element of a list:
-}</span>

<span class="hljs-module"><span class="hljs-keyword">module</span> Main <span class="hljs-keyword">where</span></span>
  <span class="hljs-module"><span class="hljs-keyword">module</span> Main <span class="hljs-keyword">where</span></span>

  main :: <span class="hljs-type">IO</span> ()
  main = sequence</em> $ zipWith3 join (loop <span class="hljs-number">3</span> <span class="hljs-string">&quot;Fizz&quot;</span>) (loop <span class="hljs-number">5</span> <span class="hljs-string">&quot;Buzz&quot;</span>) [<span class="hljs-number">1.</span><span class="hljs-number">.100</span> :: <span class="hljs-type">Int</span>]
    <span class="hljs-keyword">where</span>
      loop n s = cycle $ replicate (n-<span class="hljs-number">1</span>) <span class="hljs-string">&quot;&quot;</span> ++ [s]
      join s t n = putStrLn . head $ filter (not . null) [s ++ t, show n]</code></pre><h2 id="javascript">javascript</h2>
<pre class="hljs"><code>
<span class="hljs-keyword">for</span>(x=<span class="hljs-number">0</span>;x++&lt;<span class="hljs-number">100</span>;)console.log(x%<span class="hljs-number">3</span>||<span class="hljs-string">&#39;fizz&#39;</span>,x%<span class="hljs-number">5</span>||<span class="hljs-string">&#39;buzz&#39;</span>)

<span class="hljs-comment">////</span>

<span class="hljs-keyword">var</span>
  words = []
, func = <span class="hljs-keyword">null</span>
, l    = <span class="hljs-number">100</span>

<span class="hljs-keyword">var</span> conditions = {
  <span class="hljs-number">1</span>  : {
    <span class="hljs-keyword">true</span>  : <span class="hljs-keyword">null</span>
  , <span class="hljs-keyword">false</span> : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(i)</span> </span>{
      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
        console.log(i)
      }
    }
  }
, <span class="hljs-number">3</span>  : {
    <span class="hljs-keyword">true</span>  : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">return</span> func;
    }
  , <span class="hljs-keyword">false</span> : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
        console.log(<span class="hljs-string">&#39;fizz&#39;</span>)
      }
    }
  }
, <span class="hljs-number">5</span>  : {
    <span class="hljs-keyword">true</span>  : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">return</span> func
    }
  , <span class="hljs-keyword">false</span> : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
        console.log(<span class="hljs-string">&#39;buzz&#39;</span>)
      }
    }
  }
, <span class="hljs-number">15</span> : {
    <span class="hljs-keyword">true</span>  : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">return</span> func
    }
  , <span class="hljs-keyword">false</span> : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
        console.log(<span class="hljs-string">&#39;fizzbuzz&#39;</span>)
      }
    }
  }
}

<span class="hljs-keyword">for</span> (l = <span class="hljs-number">1</span>; l &lt; <span class="hljs-number">100</span>; l++) {
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> thing in conditions) {
    <span class="hljs-keyword">var</span> result = l % thing
    func = conditions[thing]<a href="l">!!result</a>
  }
  func()
}

<span class="hljs-comment">////</span>

Object.keys(<span class="hljs-keyword">new</span> Int8Array(<span class="hljs-number">100</span>))
.map(x      =&gt; ((++x % <span class="hljs-number">3</span>  ==  <span class="hljs-number">0</span>) ? f = <span class="hljs-string">&#39;fizz&#39;</span> : x))
.map((x, i) =&gt; ((++i % <span class="hljs-number">5</span>  ==  <span class="hljs-number">0</span>) ? b = <span class="hljs-string">&#39;buzz&#39;</span> : x))
.map((x, i) =&gt; ((++i % <span class="hljs-number">15</span> === <span class="hljs-number">0</span>) ? f + b : x))

<span class="hljs-comment">////</span>

<span class="hljs-comment">// this is basically the same as the usual solution, just sorta recursive also</span>
<span class="hljs-keyword">const</span> fizzBuzz = num =&gt; {
  <span class="hljs-keyword">if</span> (num % <span class="hljs-number">3</span> === <span class="hljs-number">0</span> &amp;&amp; num % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>) {
    console.log(<span class="hljs-string">&#39;FizzBuzz&#39;</span>)
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>) {
    console.log(<span class="hljs-string">&#39;Fizz&#39;</span>)
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>) {
    console.log(<span class="hljs-string">&#39;Buzz&#39;</span>)
  } <span class="hljs-keyword">else</span> {
    console.log(num)
  }
  <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">100</span>) {
    <span class="hljs-keyword">let</span> newNum = num + <span class="hljs-number">1</span>
    fizzBuzz(newNum)
  }
}
fizzBuzz(<span class="hljs-number">1</span>)

<span class="hljs-comment">////</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fizzbuzz</span><span class="hljs-params">(num, fizz, buzz)</span> </span>{
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= num; i++) {
    <span class="hljs-keyword">if</span> (i % (fizz <em> buzz) === <span class="hljs-number">0</span>) {
      console.log(<span class="hljs-string">&#39;FizzBuzz&#39;</span>)
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i % buzz === <span class="hljs-number">0</span>) {
      console.log(<span class="hljs-string">&#39;Buzz&#39;</span>)
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i % fizz === <span class="hljs-number">0</span>) {
      console.log(<span class="hljs-string">&#39;Fizz&#39;</span>)
    } <span class="hljs-keyword">else</span> {
      console.log(i)
    }
  }
}
fizzbuzz(<span class="hljs-number">100</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)

<span class="hljs-comment">////</span>

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {
  <span class="hljs-keyword">let</span>
    mod3   = i % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>
  , mod5   = i % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>
  , result = mod3 &amp;&amp; mod5 ? <span class="hljs-string">&#39;fizzbuzz&#39;</span> : mod3 ? <span class="hljs-string">&#39;fizz&#39;</span> : mod5 ? <span class="hljs-string">&#39;buzz&#39;</span> : i
  console.log(result)
}

<span class="hljs-comment">////</span>

<span class="hljs-keyword">let</span> counter = <span class="hljs-number">0</span>

<span class="hljs-keyword">while</span> (counter &lt; <span class="hljs-number">100</span>) {
  counter = counter + <span class="hljs-number">1</span>
  <span class="hljs-keyword">if</span> (counter % <span class="hljs-number">3</span> === <span class="hljs-number">0</span> &amp;&amp; counter % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>) {
    console.log(<span class="hljs-string">&#39;FizzBuzz&#39;</span>)
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (counter % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>) {
    console.log(<span class="hljs-string">&#39;Fizz&#39;</span>)
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (counter % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>) {
    console.log(<span class="hljs-string">&#39;Buzz&#39;</span>)
  } <span class="hljs-keyword">else</span> {
    console.log(counter)
  }
}

<span class="hljs-comment">////</span>

<span class="hljs-keyword">let</span>
  div = ((n, s) =&gt; i =&gt; i % n ? <span class="hljs-string">&#39;&#39;</span> : s)
, f = div(<span class="hljs-number">3</span>,<span class="hljs-string">&#39;fizz&#39;</span>)
, b = div(<span class="hljs-number">5</span>,<span class="hljs-string">&#39;buzz&#39;</span>)
, loop = fn =&gt; i =&gt; i &gt; <span class="hljs-number">0</span> &amp;&amp; loop(fn)(i - <span class="hljs-number">1</span>) || fn(i)
, fizzbuzz = loop(i =&gt; console.log(f(i) + b(i) || i))
fizzbuzz(<span class="hljs-number">100</span>)

<span class="hljs-comment">// (or)</span>

<span class="hljs-keyword">let</span>
  div = ((n, s) =&gt; i =&gt; i % n ? <span class="hljs-string">&#39;&#39;</span> : s)
, f = div(<span class="hljs-number">3</span>,<span class="hljs-string">&#39;fizz&#39;</span>)
, b = div(<span class="hljs-number">5</span>,<span class="hljs-string">&#39;buzz&#39;</span>)
, fizzbuzz = i =&gt; i &gt; <span class="hljs-number">0</span> &amp;&amp; fizzbuzz((i - <span class="hljs-number">1</span>)) || console.log(f(i) + b(i) || i)
fizzbuzz(<span class="hljs-number">100</span>)

<span class="hljs-comment">////</span>

<span class="hljs-comment">// this may or may not continue to work in firefox</span>
<span class="hljs-comment">// it may not ever work anywhere else; list comprehensions were</span>
<span class="hljs-comment">// removed from es2015 drafts.</span>
console.log(
  [<span class="hljs-keyword">for</span> (i of <span class="hljs-keyword">Array</span>(<span class="hljs-number">100</span>).keys())
    (++i % <span class="hljs-number">3</span> ? <span class="hljs-string">&#39;&#39;</span> : <span class="hljs-string">&#39;fizz&#39;</span>) + (i % <span class="hljs-number">5</span> ? <span class="hljs-string">&#39;&#39;</span> : <span class="hljs-string">&#39;buzz&#39;</span>) || i]
  .join(<span class="hljs-string">&#39;\n&#39;</span>)
)

<span class="hljs-comment">////</span>


<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;++i&lt;<span class="hljs-number">101</span>;)console.log((i%<span class="hljs-number">3</span>?<span class="hljs-string">&#39;&#39;</span>:<span class="hljs-string">&#39;Fizz&#39;</span>)+(i%<span class="hljs-number">5</span>?<span class="hljs-string">&#39;&#39;</span>:<span class="hljs-string">&#39;Buzz&#39;</span>)||i)

<span class="hljs-comment">////</span>

<span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">101</span>;i++)console.log((x=(i%<span class="hljs-number">3</span>?<span class="hljs-string">&#39;&#39;</span>:<span class="hljs-string">&#39;Fizz&#39;</span>)+(i%<span class="hljs-number">5</span>?<span class="hljs-string">&#39;&#39;</span>:<span class="hljs-string">&#39;Buzz&#39;</span>))?x:i)

<span class="hljs-comment">////</span>

a=b=!![]+![],a--,c=b+b;<span class="hljs-keyword">while</span>(++a)e=!(a%(c+c+b)),alert(!(a%(c+b))?e?<span class="hljs-string">&quot;FizzBuzz&quot;</span>:<span class="hljs-string">&quot;Fizz&quot;</span>:e?<span class="hljs-string">&quot;Buzz&quot;</span>:a);

<span class="hljs-comment">////</span>

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">101</span>; i++) {
  console.log([i, <span class="hljs-string">&#39;fizz&#39;</span>, <span class="hljs-string">&#39;buzz&#39;</span>, <span class="hljs-string">&#39;fizzbuzz&#39;</span>][(i % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>) + <span class="hljs-number">2</span> </em> ( i % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>)])
}

<span class="hljs-comment">////</span>

<span class="hljs-keyword">const</span> numGen = i =&gt; i ? numGen(i - <span class="hljs-number">1</span>).concat(i) : []

numGen(<span class="hljs-number">100</span>).map(n =&gt; n % <span class="hljs-number">3</span> ?
      (n % <span class="hljs-number">5</span> ? n : <span class="hljs-string">&#39;Buzz&#39;</span>) :
      (n % <span class="hljs-number">5</span> ? <span class="hljs-string">&#39;Fizz&#39;</span> : <span class="hljs-string">&#39;FizzBuzz&#39;</span>))

<span class="hljs-comment">////</span>

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {
  <span class="hljs-keyword">let</span>
    fizz = (!(i%<span class="hljs-number">3</span>)) ? <span class="hljs-string">&#39;Fizz&#39;</span> : <span class="hljs-string">&#39;&#39;</span>
  , buzz = (!(i%<span class="hljs-number">5</span>)) ? fizz + <span class="hljs-string">&#39;Buzz&#39;</span> : fizz
  console.log((buzz) ? buzz : i)
}

<span class="hljs-comment">////</span>

<span class="hljs-keyword">let</span> o, i

<span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {
  o = <span class="hljs-string">&#39;&#39;</span>
  i % <span class="hljs-number">3</span> === <span class="hljs-number">0</span> ? o += <span class="hljs-string">&#39;fizz&#39;</span> : o
  i % <span class="hljs-number">5</span> === <span class="hljs-number">0</span> ? o += <span class="hljs-string">&#39;buzz&#39;</span> : o
  o === <span class="hljs-string">&#39;&#39;</span> ? o = i : o
  console.log(o)
}

<span class="hljs-comment">////</span>

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {
  console.log({
    truefalse : <span class="hljs-string">&#39;Fizz&#39;</span>
  , falsetrue : <span class="hljs-string">&#39;Buzz&#39;</span>
  , truetrue  : <span class="hljs-string">&#39;FizzBuzz&#39;</span>
  }[(i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) + <span class="hljs-string">&#39;&#39;</span> + ( i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>)] || i)
}

<span class="hljs-comment">////</span>

(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">numGen</span><span class="hljs-params">(i)</span></span>{
  <span class="hljs-keyword">return</span> i ? numGen(i - <span class="hljs-number">1</span>).concat(i) : []
})(<span class="hljs-number">100</span>).map(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(n)</span></span>{
  <span class="hljs-keyword">return</span> n % <span class="hljs-number">3</span> ?
    (n % <span class="hljs-number">5</span> ? n : <span class="hljs-string">&#39;Buzz&#39;</span>) :
    (n % <span class="hljs-number">5</span> ? <span class="hljs-string">&#39;Fizz&#39;</span> : <span class="hljs-string">&#39;FizzBuzz&#39;</span>)
}).join(<span class="hljs-string">&#39; &#39;</span>)

<span class="hljs-comment">////</span>

<span class="hljs-keyword">let</span> f, b, fb, n

<span class="hljs-keyword">for</span> (n = <span class="hljs-number">1</span>; n &lt;= <span class="hljs-number">100</span>; n++) {
  f  = !(n % <span class="hljs-number">3</span>)
  b  = !(n % <span class="hljs-number">5</span>)
  fb = f &amp;&amp; b
  console.log(
    fb ? <span class="hljs-string">&#39;fizzbuzz&#39;</span> :
   (f  ? <span class="hljs-string">&#39;fizz&#39;</span>     :
    b  ? <span class="hljs-string">&#39;buzz&#39;</span>     :
    n))
}

<span class="hljs-comment">////</span>

<span class="hljs-keyword">const</span> fizzBuzz = () =&gt; {
  <span class="hljs-keyword">let</span> i, output
  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">101</span>; i += <span class="hljs-number">1</span>) {
    output = <span class="hljs-string">&#39;&#39;</span>
    <span class="hljs-keyword">if</span> (!(i % <span class="hljs-number">3</span>)) {
      output += <span class="hljs-string">&#39;Fizz&#39;</span>
    }
    <span class="hljs-keyword">if</span> (!(i % <span class="hljs-number">5</span>)) {
      output += <span class="hljs-string">&#39;Buzz&#39;</span>
    }
    console.log(output || i)
  }
}

<span class="hljs-comment">////</span>

<span class="hljs-keyword">const</span> word = x =&gt; {
  <span class="hljs-keyword">if</span> (!(x % <span class="hljs-number">15</span>)) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;fizzbuzz&#39;</span>
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!(x % <span class="hljs-number">3</span>)) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;fiz&#39;</span>
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!(x % <span class="hljs-number">5</span>)) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;buzz&#39;</span>
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> x
  }
}

<span class="hljs-keyword">const</span> fb = max =&gt; <span class="hljs-keyword">Array</span>
  .apply(<span class="hljs-keyword">null</span>, {length : max + <span class="hljs-number">1</span>})
  .map(Number.call, Number)
  .splice(<span class="hljs-number">1</span>)
  .map(word)

<span class="hljs-comment">////</span>

<span class="hljs-function"><span class="hljs-keyword">function</span><em> <span class="hljs-title">FizzBuzz</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">let</span> idx = <span class="hljs-number">0</span>
  <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) {
    <span class="hljs-keyword">let</span> val = <span class="hljs-string">&#39;&#39;</span>
    idx++
    <span class="hljs-keyword">if</span> (idx % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>) {
      val += <span class="hljs-string">&#39;Fizz&#39;</span>
    }
    <span class="hljs-keyword">if</span> (idx % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>) {
      val += <span class="hljs-string">&#39;Buzz&#39;</span>
    }
    <span class="hljs-keyword">yield</span> val || idx
  }
}

<span class="hljs-keyword">let</span> fb = FizzBuzz()

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) {
  console.log(fb.next().val)
}

<span class="hljs-comment">////</span>

<span class="hljs-keyword">const</span> range = n =&gt; [...<span class="hljs-keyword">Array</span>(n).keys()]

<span class="hljs-keyword">const</span> fbTest = n =&gt; {
  <span class="hljs-keyword">let</span>
    by3 = n % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>
  , by5 = n % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>

  <span class="hljs-keyword">return</span> by3 &amp;&amp; by5 ? <span class="hljs-string">&#39;fizz buzz&#39;</span> :
                by3 ? <span class="hljs-string">&#39;fizz&#39;</span>      :
                by5 ? <span class="hljs-string">&#39;buzz&#39;</span>      :
                n
}

<span class="hljs-keyword">const</span> fizzBuzz = n =&gt; range(n).map(x =&gt; fbTest(x + <span class="hljs-number">1</span>)).join(<span class="hljs-string">&#39;, &#39;</span>)

console.log(fizzBuzz(<span class="hljs-number">100</span>))

<span class="hljs-comment">////</span>

<span class="hljs-comment">// this (or a slight variation on this) is easily the most common solution</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fizz_buzz</span><span class="hljs-params">(num)</span></span>{
  <span class="hljs-keyword">if</span> (num % <span class="hljs-number">15</span> == <span class="hljs-number">0</span>) {
    console.log(<span class="hljs-string">&#39;FizzBuzz&#39;</span>)
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) {
    console.log(<span class="hljs-string">&#39;Buzz&#39;</span>)
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) {
    console.log(<span class="hljs-string">&#39;Fizz&#39;</span>)
  } <span class="hljs-keyword">else</span> {
    console.log(num)
  }
}

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) {
  fizz_buzz(i)
}

<span class="hljs-comment">////</span>

<span class="hljs-comment">#!/usr/bin/env node</span>

<span class="hljs-keyword">const</span> max = process.argv[<span class="hljs-number">2</span>]

<span class="hljs-keyword">let</span> FizzBuzz = <span class="hljs-function"><span class="hljs-keyword">function</span></em> <span class="hljs-params">()</span></span>{
  <span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>
  <span class="hljs-keyword">while</span> (num &lt;= max){
    <span class="hljs-keyword">let</span> value = num
    num++
    <span class="hljs-keyword">if</span> (value % <span class="hljs-number">15</span> === <span class="hljs-number">0</span>) {
      value = <span class="hljs-string">&#39;FizzBuzz&#39;</span>
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>) {
      value = <span class="hljs-string">&#39;Fizz&#39;</span>
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>) {
      value = <span class="hljs-string">&#39;Buzz&#39;</span>
    }
    <span class="hljs-keyword">yield</span> value
  }
}()

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n of FizzBuzz){
  console.log(n)
}

<span class="hljs-comment">////</span>

<span class="hljs-keyword">const</span> fb = n =&gt; {
  <span class="hljs-keyword">switch</span>(<span class="hljs-keyword">true</span>) {
    <span class="hljs-keyword">case</span> item % <span class="hljs-number">15</span> === <span class="hljs-number">0</span>:
      console.log(<span class="hljs-string">&#39;fizbuzz&#39;</span>)
      <span class="hljs-keyword">break</span>
    <span class="hljs-keyword">case</span> item % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>:
      console.log(<span class="hljs-string">&#39;fizz&#39;</span>)
      <span class="hljs-keyword">break</span>
    <span class="hljs-keyword">case</span> item % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>:
      console.log(<span class="hljs-string">&#39;buzz&#39;</span>)
      <span class="hljs-keyword">break</span>
    <span class="hljs-keyword">default</span>:
      console.log(n)
      <span class="hljs-keyword">break</span>
  }
}

<span class="hljs-keyword">const</span> nums = <span class="hljs-keyword">Array</span>.apply(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">Array</span>(<span class="hljs-number">100</span>)).map(() =&gt; Math.round(Math.random() <em> <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>)

nums.map(fb)

<span class="hljs-comment">////</span>

<span class="hljs-keyword">const</span> a = {fizz : <span class="hljs-number">3</span>, buzz : <span class="hljs-number">5</span>}

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span>; b &lt;= <span class="hljs-number">100</span>; b++) {
  <span class="hljs-keyword">let</span> c = <span class="hljs-string">&#39;&#39;</span>
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> d in a) {
    c += b % a[d] ? <span class="hljs-string">&#39;&#39;</span> : d
  }
  console.log(c ? c : b)
}

<span class="hljs-comment">// this is nice because you can fizz buzz bing boom zing easily</span>
<span class="hljs-keyword">const</span> a = {
  fizz : <span class="hljs-number">3</span>
, buzz : <span class="hljs-number">5</span>
, bing : <span class="hljs-number">7</span>
, boom : <span class="hljs-number">11</span>
, zing : <span class="hljs-number">13</span>
}

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> b = <span class="hljs-number">1</span>; b &lt;= <span class="hljs-number">1000</span>; b++) {
  <span class="hljs-keyword">let</span> c = <span class="hljs-string">&#39;&#39;</span>
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> d in a) {
    c += b % a[d] ? <span class="hljs-string">&#39;&#39;</span> : d
  }
  console.log(c ? c : b)
}

<span class="hljs-comment">////</span>

<span class="hljs-comment">// this is cheating</span>
alert(<span class="hljs-string">&#39;1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16 17 Fizz 19 Buzz Fizz 22 23 Fizz Buzz 26 Fizz 28 29 FizzBuzz 31 32 Fizz 34 Buzz Fizz 37 38 Fizz Buzz 41 Fizz 43 44 FizzBuzz 46 47 Fizz 49 Buzz Fizz 52 53 Fizz Buzz 56 Fizz 58 59 FizzBuzz 61 62 Fizz 64 Buzz Fizz 67 68 Fizz Buzz 71 Fizz 73 74 FizzBuzz 76 77 Fizz 79 Buzz Fizz 82 83 Fizz Buzz 86 Fizz 88 89 FizzBuzz 91 92 Fizz 94 Buzz Fizz 97 98 Fizz Buzz&#39;</span>)

<span class="hljs-comment">////</span>

<span class="hljs-comment">#!/usr/bin/env node</span>

<span class="hljs-keyword">const</span> max = +process.argv[<span class="hljs-number">2</span>]

<span class="hljs-keyword">let</span> FizzBuzz = {
  <a href="">Symbol.iterator</a> {
    <span class="hljs-keyword">let</span> num = <span class="hljs-number">1</span>
    <span class="hljs-keyword">return</span> {
      next() {
        <span class="hljs-keyword">if</span> (num &gt; max) {
          <span class="hljs-keyword">return</span> {
            done : <span class="hljs-keyword">true</span>
          }
        }
        <span class="hljs-keyword">let</span> value = num
        <span class="hljs-keyword">if</span> (value % <span class="hljs-number">15</span> === <span class="hljs-number">0</span>) {
          value = <span class="hljs-string">&#39;FizzBuzz&#39;</span>
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>) {
          value = <span class="hljs-string">&#39;Fizz&#39;</span>
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>) {
          value = <span class="hljs-string">&#39;Buzz&#39;</span>
        }
        num++
        <span class="hljs-keyword">return</span> {
          done  : <span class="hljs-keyword">false</span>
        , value : value
        }
      }
    }
  }
}

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n of FizzBuzz) {
  console.log(n)
}

<span class="hljs-comment">////</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fizzbuzz</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">let</span>
    i      = <span class="hljs-number">1</span>
  , result = []

  ;(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#39;&#39;</span>
    str += fizz(i)
    str += buzz(i)
    result.push(ifFalsy(str, i))
    <span class="hljs-keyword">if</span> (isLt100(i++)) {
      loop()
    }
  })()
  <span class="hljs-keyword">print</span>(result.join(<span class="hljs-string">&#39;, &#39;</span>))
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fizz</span><span class="hljs-params">(num)</span> </span>{
  <span class="hljs-keyword">return</span> isDivBy3(num) ? <span class="hljs-string">&#39;fizz&#39;</span> : <span class="hljs-string">&#39;&#39;</span>
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buzz</span><span class="hljs-params">(num)</span> </span>{
  <span class="hljs-keyword">return</span> isDivBy5(num) ? <span class="hljs-string">&#39;buzz&#39;</span> : <span class="hljs-string">&#39;&#39;</span>
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isDivBy3</span><span class="hljs-params">(num)</span> </span>{
  <span class="hljs-keyword">return</span> num % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isDivBy5</span><span class="hljs-params">(num)</span> </span>{
  <span class="hljs-keyword">return</span> num % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isLt100</span><span class="hljs-params">(num)</span> </span>{
  <span class="hljs-keyword">return</span> num &lt; <span class="hljs-number">100</span>
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ifFalsy</span><span class="hljs-params">(value, fallback)</span> </span>{
  <span class="hljs-keyword">return</span> !value ? fallback : value
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">print</span><span class="hljs-params">(str)</span> </span>{
  console.log(str)
}

fizzbuzz()

<span class="hljs-comment">////</span>

<span class="hljs-keyword">const</span> NumbersFromOne = {
  </em>[Symbol.iterator] () {
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;; ++i) {
      <span class="hljs-keyword">yield</span> i
    }
  }
}

<span class="hljs-keyword">const</span> take = <span class="hljs-function"><span class="hljs-keyword">function</span><em> <span class="hljs-params">(numberToTake, iterable)</span> </span>{
  <span class="hljs-keyword">let</span> remaining = numberToTake

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value of iterable) {
    <span class="hljs-keyword">if</span> (remaining-- &lt;= <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">break</span>
    }
    <span class="hljs-keyword">yield</span> value
  }
}

<span class="hljs-keyword">const</span> replaceEvery = <span class="hljs-function"><span class="hljs-keyword">function</span></em> <span class="hljs-params">(period, replacement, iterable)</span> </span>{
  <span class="hljs-keyword">let</span> count = period

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value of iterable) {
    <span class="hljs-keyword">if</span> (--count === <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">yield</span> replacement
      count = period
    }
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">yield</span> value
  }
}

<span class="hljs-keyword">const</span>
  oneTo100 = take(<span class="hljs-number">100</span>, NumbersFromOne)
, fizz     = replaceEvery(<span class="hljs-number">3</span>, <span class="hljs-string">&#39;fizz&#39;</span>, oneTo100)
, buzz     = replaceEvery(<span class="hljs-number">5</span>, <span class="hljs-string">&#39;buzz&#39;</span>, fizz)
, fizzbuzz = replaceEvery(<span class="hljs-number">15</span>, <span class="hljs-string">&#39;fizzbuzz&#39;</span>, buzz)

console.log(...fizzbuzz)

<span class="hljs-comment">////</span>

<span class="hljs-comment">// with tests</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fizzbuzz</span><span class="hljs-params">(value)</span> </span>{
  <span class="hljs-keyword">if</span> (value % <span class="hljs-number">15</span> == <span class="hljs-number">0</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;fizzbuzz&#39;</span>
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;fizz&#39;</span>
  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;buzz&#39;</span>
  }

  <span class="hljs-keyword">return</span> value
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assertEquals</span><span class="hljs-params">(expected, actual)</span> </span>{
  <span class="hljs-keyword">if</span> (expected !== actual) {
    console.error(<span class="hljs-string">&#39;Expected &#39;</span> + actual + <span class="hljs-string">&#39; to equal &#39;</span> + expected)
  }
}

;[<span class="hljs-number">15</span>, <span class="hljs-number">30</span>, <span class="hljs-number">45</span>, <span class="hljs-number">60</span>].<span class="hljs-keyword">forEach</span>(value =&gt; {
  assertEquals(<span class="hljs-string">&#39;fizzbuzz&#39;</span>, fizzbuzz(value))
})

;[<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">24</span>, <span class="hljs-number">27</span>, <span class="hljs-number">33</span>].<span class="hljs-keyword">forEach</span>(value =&gt; {
  assertEquals(<span class="hljs-string">&#39;fizz&#39;</span>, fizzbuzz(value))
})

;[<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>, <span class="hljs-number">35</span>, <span class="hljs-number">40</span>].<span class="hljs-keyword">forEach</span>(value =&gt; {
  assertEquals(<span class="hljs-string">&#39;buzz&#39;</span>, fizzbuzz(value))
})

;[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>].<span class="hljs-keyword">forEach</span>(value =&gt; {
  assertEquals(value, fizzbuzz(value))
})

<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {
  console.log(fizzbuzz(i))
}

<span class="hljs-comment">////</span>

<span class="hljs-comment">// this one is CLOSE but not quite there!</span>
<em>=$=+!![];$__=((</em>$={})+<span class="hljs-string">&#39;&#39;</span>)[<em>+$+</em>+$+<em>];__$=((![])+<span class="hljs-string">&#39;&#39;</span>)[$];</em>$<em>=((</em>$={})+<span class="hljs-string">&#39;&#39;</span>)
[<em>+$+</em>+$+<em>+$];<strong>__=[][$</strong>+((</em>$={})+<span class="hljs-string">&#39;&#39;</span>)[$]+(($)/(![])+<span class="hljs-string">&#39;&#39;</span>)[$]+$<strong>+</strong>$+<em>$</em>];$<strong>$=(!![]+<span class="hljs-string">&quot;&quot;</span>)
[$+$+$]+([][(![]+<span class="hljs-string">&quot;&quot;</span>)[$+$+$]+(+[]+{})[$+$]+(!![]+<span class="hljs-string">&quot;&quot;</span>)[$]+(!![]+<span class="hljs-string">&quot;&quot;</span>)[+[]]]+<span class="hljs-string">&quot;&quot;</span>)[($+$)+<span class="hljs-string">&quot;&quot;</span>+
($+$+$)]+(![]+<span class="hljs-string">&quot;&quot;</span>)[$]+(![]+<span class="hljs-string">&quot;&quot;</span>)[$+$];$<em>$</em>=__</strong>()[$-$]<a href="span class=&quot;hljs-string&quot;&gt;&quot;\&quot;\\&quot;&lt;/span&gt;+($">$__$</a>+($+$+$+$+$+$+$)+
($+$)+<span class="hljs-string">&quot;\&quot;&quot;</span>);<em>$=(![]+<span class="hljs-string">&#39;&#39;</span>)[$-$]+([][[]]+[])[$+$+$+$+$]+$</em>$<em>+$</em>$<em>;$</em>=(<em>+{})[$+$+$]+(!![]+<span class="hljs-string">&#39;&#39;</span>)
[</em>+$]+$<em>$</em>+$<em>$</em>;<em>--,$$=$+$;<strong>__()[$-$][$</strong>$]((![]+<span class="hljs-string">&quot;&quot;</span>)[+[]]+(+[]+{})[$+$]+(!![]+<span class="hljs-string">&quot;&quot;</span>)[$]+
<span class="hljs-string">&quot;(;++</em>;)$$$=!(<em>%(&quot;</span>+($$+$$+$)+<span class="hljs-string">&quot;)),<strong>__()[+[]][</strong>$+((![])+&#39;&#39;)[&quot;</span>+($+$)+<span class="hljs-string">&quot;]+((!![])+&#39;&#39;)[&quot;</span>+
($+$+$)+<span class="hljs-string">&quot;]+((!![])+&#39;&#39;)[+!![]]+</em>$<em>](!(</em>%(&quot;</span>+($$+$)+<span class="hljs-string">&quot;))?$$$?<em>$+$</em>:<em>$:$$$?$</em>:_);&quot;</span>);</code></pre><h2 id="and-finally-in-html-and-css">and finally, in html and css</h2>
<pre class="hljs"><code><span class="hljs-doctype">&lt;!doctype html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">lang</span>=<span class="hljs-value">&quot;en&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>fizzbuzz<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">&quot;text/css&quot;</span>&gt;</span><span class="css">
      <span class="hljs-tag">ul</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">list-style-type</span>:<span class="hljs-value"> none</span></span>; }</span>
      <span class="hljs-tag">li</span><span class="hljs-pseudo">:nth-child(3n)</span>, <span class="hljs-tag">li</span><span class="hljs-pseudo">:nth-child(5n)</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">0px</span></span></span>; }</span>
      <span class="hljs-tag">li</span><span class="hljs-pseudo">:nth-child(3n)</span><span class="hljs-pseudo">:before</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">16px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">content</span>:<span class="hljs-value"> <span class="hljs-string">&quot;Fizz&quot;</span></span></span>; }</span>
      <span class="hljs-tag">li</span><span class="hljs-pseudo">:nth-child(5n)</span><span class="hljs-pseudo">:after</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">16px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">content</span>:<span class="hljs-value"> <span class="hljs-string">&quot;Buzz&quot;</span></span></span>; }</span>
    </span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">ul</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>14<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>16<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>19<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>22<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>23<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>24<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>26<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>27<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>28<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>29<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>31<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>32<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>33<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>34<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>35<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>36<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>37<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>38<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>39<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>40<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>41<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>42<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>43<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>44<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>45<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>46<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>47<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>48<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>49<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>50<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>51<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>52<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>53<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>54<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>55<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>56<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>57<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>58<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>59<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>61<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>62<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>63<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>64<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>65<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>66<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>67<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>68<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>69<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>70<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>71<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>72<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>73<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>74<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>75<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>76<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>77<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>78<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>79<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>81<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>82<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>83<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>84<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>85<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>86<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>87<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>88<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>89<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>90<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>91<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>92<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>93<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>94<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>95<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>96<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>97<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>98<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>99<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">li</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-title">li</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">ul</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre>]]></description><link>/2016/fizzbuzz.html</link><guid isPermaLink="true">/2016/fizzbuzz.html</guid><category><![CDATA[js]]></category><category><![CDATA[fizzbuzz]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sat, 07 May 2016 18:38:00 GMT</pubDate></item></channel></rss>