<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - angr]]></title><description><![CDATA[writings from zac anger]]></description><link>http://blog.zacanger.com/</link><generator>Ghost</generator><lastBuildDate>Thu, 25 Aug 2016 04:10:37 GMT</lastBuildDate><atom:link href="http://blog.zacanger.com/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[currying and partial application]]></title><description><![CDATA[<pre class="hljs"><code><span class="hljs-comment">// Prototype&#39;s version?</span>
<span class="hljs-built_in">Function</span>.prototype.curry = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-keyword">var</span> fn   = <span class="hljs-keyword">this</span>
    , args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>)
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-keyword">this</span>, args.concat(<span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>)))
  }
}

<span class="hljs-comment">// Functional&#39;s version?</span>
<span class="hljs-built_in">Function</span>.prototype.partial = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-keyword">var</span> fn   = <span class="hljs-keyword">this</span>
    , args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>)
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">var</span> arg = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; args.length &amp;&amp; arg &lt; <span class="hljs-built_in">arguments</span>.length; i++) {
      <span class="hljs-keyword">if</span> (args[i] === <span class="hljs-literal">undefined</span>) {
        args [i] = <span class="hljs-built_in">arguments</span>[arg++]
      }
      <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-keyword">this</span>, args)
    }
  }
}

<span class="hljs-comment">// from angus croll&#39;s blog</span>
<span class="hljs-comment">// note, the toArray is because the <code>arguments</code> array is actually and object</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span>(<span class="hljs-params">enumm</span>)</span>{
  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.prototype.slice.call(enumm)
}
<span class="hljs-comment">// toArray is superfluous now, though, because we can just do</span>
<span class="hljs-keyword">let</span> args = <span class="hljs-built_in">Array</span>.from(<span class="hljs-built_in">arguments</span>)
<span class="hljs-comment">//</span>
<span class="hljs-built_in">Function</span>.prototype.curry = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length &lt; <span class="hljs-number">1</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
  }
  <span class="hljs-keyword">var</span> <strong> method = <span class="hljs-keyword">this</span>
    , args      = toArray(<span class="hljs-built_in">arguments</span>)
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">return</span> </strong>method.apply(<span class="hljs-keyword">this</span>, args.concat(toArray(<span class="hljs-built_in">arguments</span>)))
  }
}
<span class="hljs-comment">// and an example from his blog, using the above</span>
<span class="hljs-keyword">const</span>
  converter = (ratio, symbol, input) =&gt; [(input <em> ratio).toFixed(<span class="hljs-number">1</span>), symbol].join(<span class="hljs-string">&#39; &#39;</span>)
, kgToLb    = converter.curry(<span class="hljs-number">2.2</span>, <span class="hljs-string">&#39;lbs&#39;</span>)
, liToPi    = converter.curry(<span class="hljs-number">1.98</span>, <span class="hljs-string">&#39;pints&#39;</span>)
, miToKm    = converter.curry(<span class="hljs-number">1.62</span>, <span class="hljs-string">&#39;km&#39;</span>)


<span class="hljs-comment">// note that these are all examples of partial application,</span>
<span class="hljs-comment">// not true currying as one would have in a purely functional language</span>
<span class="hljs-comment">// see:</span>
<span class="hljs-keyword">const</span> foo = (a, b) =&gt; a + b
foo.partiallyApply(<span class="hljs-number">2</span>) <span class="hljs-comment">// b =&gt; 2 + b</span>
foo.curry() <span class="hljs-comment">// a =&gt; b =&gt; a + b</span>
foo.curry()(<span class="hljs-number">2</span>) <span class="hljs-comment">// foo.partiallyApply(2)</span>

<span class="hljs-built_in">Function</span>.prototype.curry = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-keyword">var</span>
    method = <span class="hljs-keyword">this</span>
  , i      = <span class="hljs-number">0</span>
  , len    = <span class="hljs-keyword">this</span>.length
  , args   = []

  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>{
    args.push(<span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>])
    <span class="hljs-keyword">if</span> (++i &lt; len) {
      <span class="hljs-keyword">return</span> f
    } <span class="hljs-keyword">else</span> {
      method.apply(<span class="hljs-keyword">this</span>, args)
    }
  }
  <span class="hljs-keyword">return</span> f
}

<span class="hljs-comment">// here&#39;s a super simplistic adding thingy</span>
<span class="hljs-keyword">const</span> adder = (a, b) =&gt; <span class="hljs-keyword">typeof</span>(b) !== <span class="hljs-string">&#39;undefined&#39;</span> ? a + b : c =&gt; a + c
<span class="hljs-comment">// i think the es6 is right for this? in es5 also:</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">adder</span>(<span class="hljs-params">a, b</span>) </span>{
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">&#39;undefined&#39;</span>) {
    <span class="hljs-keyword">return</span> a + b
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>)</span>{
      <span class="hljs-keyword">return</span> a + c
    }
  }
}

<span class="hljs-comment">// the real difference between partial application and currying:</span>
<span class="hljs-comment">// a curried function will accept ONLY one argument at a time.</span>
<span class="hljs-comment">// it will continue accepting one argument each time it&#39;s called right</span>
<span class="hljs-comment">// up until it&#39;s got enough, then will finally be executed for realz.</span>

<span class="hljs-comment">// so: a function that can take a function as input, and an int for</span>
<span class="hljs-comment">// the max args. should be able to call like so:</span>
curry(fn, n, ...args) <span class="hljs-comment">// ... that is,</span>
curry(fn, n, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// or</span>
curry(fn, n)(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>) <span class="hljs-comment">// or</span>
curry(fn, n)(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// and we should get the same results each way.</span>
<span class="hljs-comment">// so</span>
curry(fn, n, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) == curry(fn, n, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)

<span class="hljs-comment">// notes on the below:</span>
<span class="hljs-comment">// fn.apply(a, [1, 2, 3]) is kinda the same as doing</span>
<span class="hljs-comment">// fn.call(a, 1, 2, 3), where <code>a</code> is <code>this</code></span>
<span class="hljs-keyword">const</span> argsArr = args =&gt; <span class="hljs-built_in">Array</span>.from(args)

<span class="hljs-keyword">const</span> curry = (fn, n) =&gt; {
  <span class="hljs-keyword">const</span> args = argsArr(<span class="hljs-built_in">arguments</span>)
  <span class="hljs-keyword">if</span> (n === args.length -<span class="hljs-number">2</span>) {
    <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-literal">undefined</span>, args.slice(<span class="hljs-number">2</span>))
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">return</span> () =&gt; {
      <span class="hljs-keyword">return</span> curry.apply(<span class="hljs-literal">undefined</span>, args.concat(<span class="hljs-built_in">arguments</span>))
    }
  }
}
<span class="hljs-comment">// so try:</span>
<span class="hljs-keyword">const</span> addFour = (a, b, c, d) =&gt; a + b + c + d
curry(addFour, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>)(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)

<span class="hljs-comment">// modified to use Function.length</span>
<span class="hljs-keyword">const</span> newCurry = (fn, n) =&gt; {
  <span class="hljs-keyword">let</span> args = argsArr(<span class="hljs-built_in">arguments</span>)
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(n) == <span class="hljs-string">&#39;undefined&#39;</span>) {
    args[<span class="hljs-number">1</span>] = fn.length
  }
  <span class="hljs-keyword">if</span> (n === args.length - <span class="hljs-number">2</span>) {
    <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-literal">undefined</span>, args.slice(<span class="hljs-number">2</span>))
  }
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">return</span> newCurry.apply(<span class="hljs-literal">undefined</span>, args.concat(argsArr(<span class="hljs-built_in">arguments</span>)))
  }
}


<span class="hljs-comment">// okay, so, from some other blog</span>
<span class="hljs-keyword">const</span> objs = [{id : <span class="hljs-number">1</span>}, {id : <span class="hljs-number">2</span>}, {id : <span class="hljs-number">3</span>}, {id : <span class="hljs-number">4</span>}]
objs.map(o =&gt; o.id)
<span class="hljs-comment">// this is actualy a lot cleaner than his example, because he&#39;s doing it like</span>
<span class="hljs-keyword">var</span> objs = [{id : <span class="hljs-number">1</span>}, {id : <span class="hljs-number">2</span>}, {id : <span class="hljs-number">3</span>}, {id : <span class="hljs-number">4</span>}]
objs.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">o</span>)</span>{<span class="hljs-keyword">return</span> o.id})
<span class="hljs-comment">// but we&#39;ll see where this goes, anyway</span>
<span class="hljs-keyword">const</span> curry = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;curry&#39;</span>) <span class="hljs-comment">// npm i -S curry</span>
<span class="hljs-keyword">const</span> get = curry(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">property, object</span>)</span>{<span class="hljs-keyword">return</span> object[property]})
objs.map(get(<span class="hljs-string">&#39;id&#39;</span>))
<span class="hljs-comment">// meh.</span>
<span class="hljs-keyword">const</span> getIDs = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">objects</span>)</span>{
  <span class="hljs-keyword">return</span> objects.map(get(<span class="hljs-string">&#39;id&#39;</span>))
}
getIDs(objs)
<span class="hljs-comment">// double meh.</span>
<span class="hljs-keyword">const</span> map    = curry((fn, val) =&gt; val.map(fn))
    , getIDs = map(get(<span class="hljs-string">&#39;id&#39;</span>))

<span class="hljs-comment">// still not sure this is actually cleaner xD</span>
<span class="hljs-comment">// let&#39;s keep going with his examples (translated to ES2015, though)</span>
<span class="hljs-comment">// some sample data (we&#39;ll pretend this is JSON we&#39;re getting from somewhere):</span>
<span class="hljs-keyword">const</span> sampleData = {
  <span class="hljs-string">&quot;user&quot;</span>  : <span class="hljs-string">&quot;z&quot;</span>
  , <span class="hljs-string">&quot;posts&quot;</span> : [
    {<span class="hljs-string">&quot;title&quot;</span> : <span class="hljs-string">&quot;title!&quot;</span>     , <span class="hljs-string">&quot;contents&quot;</span> : <span class="hljs-string">&quot;asdf&quot;</span>  }
  , {<span class="hljs-string">&quot;title&quot;</span> : <span class="hljs-string">&quot;something!&quot;</span> , <span class="hljs-string">&quot;contents&quot;</span> : <span class="hljs-string">&quot;ghjkl;&quot;</span>}
  ]
}
<span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;http&#39;</span>).get(<span class="hljs-string">&#39;something.whatever/that/data.json&#39;</span>)
.then(<span class="hljs-built_in">JSON</span>.parse)
.then(data =&gt; data.posts)
.then(posts =&gt; posts.map(post =&gt; post.title))
<span class="hljs-comment">// or, using the curry stuff</span>
<span class="hljs-built_in">require</span>(<span class="hljs-string">&#39;http&#39;</span>).get(<span class="hljs-string">&#39;something.whatever/that/data.json&#39;</span>)
.then(<span class="hljs-built_in">JSON</span>.parse)
.then(get(<span class="hljs-string">&#39;posts&#39;</span>))
.then(map(get(<span class="hljs-string">&#39;title&#39;</span>)))
<span class="hljs-comment">// uh</span>
<span class="hljs-comment">// okay</span>
<span class="hljs-comment">// i don&#39;t see that this is any better, here.</span>
<span class="hljs-comment">// oh wait, he wrote a follow-up!</span>

<span class="hljs-comment">// shit. i think some of this might be wrong.</span>
<span class="hljs-comment">// there&#39;s no <code>arguments</code>! i knew about <code>this</code>, but not <code>arguments</code>.</span>
<span class="hljs-comment">// (talking about when using <code>=&amp;gt;</code>, i mean.)</span>
<span class="hljs-comment">// not really a big deal, just in the above, we need to use <code>...args</code> instead.</span>
<span class="hljs-comment">// for example,</span>
<span class="hljs-keyword">let</span> sum = (...nums) =&gt; nums.reduce((a, b) =&gt; a + b)



<span class="hljs-comment">// examples:</span>
<span class="hljs-comment">// in es5:</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatter</span>(<span class="hljs-params">tag, text</span>)</span>{
  <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;&lt;&#39;</span> + tag + <span class="hljs-string">&#39;&gt;&#39;</span> + text + <span class="hljs-string">&#39;&lt;/&#39;</span> + tag + <span class="hljs-string">&#39;&gt;&#39;</span>
}
<span class="hljs-keyword">var</span> p = formatter.bind(<span class="hljs-literal">undefined</span>, <span class="hljs-string">&#39;p&#39;</span>)
p(<span class="hljs-string">&#39;some content!&#39;</span>)
<span class="hljs-comment">// in es6:</span>
<span class="hljs-keyword">const</span> formatter = (tag, text) =&gt; <span class="hljs-string"><code>&amp;lt;&lt;span class=&quot;hljs-subst&quot;&gt;${tag}&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-subst&quot;&gt;${text}&lt;/span&gt;&amp;lt;/&lt;span class=&quot;hljs-subst&quot;&gt;${tag}&lt;/span&gt;&amp;gt;</code></span>
<span class="hljs-keyword">const</span> p = text =&gt; formatter(<span class="hljs-string">&#39;p&#39;</span>, text)
<span class="hljs-comment">// accepting addtional arguments (more text):</span>
<span class="hljs-keyword">const</span> fmt = (tag, text, moar) =&gt; <span class="hljs-string"><code>&amp;lt;&lt;span class=&quot;hljs-subst&quot;&gt;${tag}&lt;/span&gt;&amp;gt;&lt;span class=&quot;hljs-subst&quot;&gt;${text}&lt;/span&gt;&lt;span class=&quot;hljs-subst&quot;&gt;${moar}&lt;/span&gt;&amp;lt;/&lt;span class=&quot;hljs-subst&quot;&gt;${tag}&lt;/span&gt;&amp;gt;</code></span>
<span class="hljs-keyword">const</span> span = ...args =&gt; fmt(<span class="hljs-string">&#39;span&#39;</span>, ...args)

<span class="hljs-comment">// okay, that&#39;s cute because it just lets you specify however many you want, but...</span>
<span class="hljs-keyword">const</span> cur = (fn, ...argsOne) =&gt; (...argsTwo) =&gt; fn(...argsOne, ...argsTwo)
<span class="hljs-comment">// or, allowing placeholders, as in underscore:</span>
<span class="hljs-keyword">const</span> curMore = (fn, ...argsOne) =&gt; {
  <span class="hljs-keyword">let</span> i = argsOne.indexOf(<em>)
  <span class="hljs-keyword">let</span> argsOne = (i === -<span class="hljs-number">1</span>) ? [] : argsOne.splice(i).slice(<span class="hljs-number">1</span>)
  <span class="hljs-keyword">return</span> (...argsTwo) =&gt; fn(...argsOne, ...argsTwo, ...argsThree)
}
<span class="hljs-comment">// which can then be used like:</span>
<span class="hljs-keyword">const</span> lessTen = curMore(subtract, </em>, <span class="hljs-number">10</span>) <span class="hljs-comment">// assuming we&#39;ve defined a <code>subtract</code> somewhere</span>



<span class="hljs-comment">// from brian lonsdorf&#39;s blog/medium, a better <code>curry</code> (better in that</span>
<span class="hljs-comment">// it should be easier to debug).</span>
<span class="hljs-comment">// <span class="hljs-doctag">note:</span> very definitely es5. and redifines toString().</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curry</span>(<span class="hljs-params">fx</span>)</span>{
  <span class="hljs-keyword">var</span> arity = fx.length
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">var</span> args = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">0</span>)
    <span class="hljs-keyword">if</span> (args.length &gt;= arity) {
      <span class="hljs-keyword">return</span> fx.apply(<span class="hljs-literal">null</span>, args)
    }
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f2</span>(<span class="hljs-params"></span>)</span>{
      <span class="hljs-keyword">return</span> f1.apply(<span class="hljs-literal">null</span>, args.concat(<span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">0</span>)))
    }
    f2.toString = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
      <span class="hljs-keyword">return</span> fToString(fx) + <span class="hljs-string">&#39;(&#39;</span> + args.join(<span class="hljs-string">&#39;, &#39;</span>) + <span class="hljs-string">&#39;)&#39;</span>
    }
    <span class="hljs-keyword">return</span> f2
  }
  f1.toString = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-keyword">return</span> fToString(fx)
  }
  <span class="hljs-keyword">return</span> f1
}
<span class="hljs-comment">// and a compose from the same:</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">compose</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-keyword">var</span> fns = <span class="hljs-built_in">arguments</span>
  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">result</span>)</span>{
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = fns.length - <span class="hljs-number">1</span>; i &gt; -<span class="hljs-number">1</span>; i--) {
      <span class="hljs-keyword">try</span> {
        result = fns[i].call(<span class="hljs-keyword">this</span>, result)
      } <span class="hljs-keyword">catch</span>(e) {
        e.message = f.toString() + <span class="hljs-string">&#39; failed at &#39;</span> fns[i].toString()
        <span class="hljs-keyword">throw</span>(e)
      }
    }
    f.toString = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
      <span class="hljs-keyword">return</span> <span class="hljs-string">&#39;compose(&#39;</span>+[].slice.call(fns).map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">f</span>)</span>{ <span class="hljs-keyword">return</span> f.toString() }).join(<span class="hljs-string">&#39;, &#39;</span>)+<span class="hljs-string">&#39;)&#39;</span>;
    }
    <span class="hljs-keyword">return</span> result
  }
  <span class="hljs-keyword">return</span> f
}



<span class="hljs-comment">// from reginald braithwaite&#39;s blog</span>
<span class="hljs-comment">// </em> arity: number of arguments a function accepts</span>
<span class="hljs-comment">//   <em> nullary function takes no arguments</span>
<span class="hljs-comment">//   </em> unary function accepts one</span>
<span class="hljs-comment">//   <em> polyadic function accepts more than one</span>
<span class="hljs-comment">//   </em> binary accepts two</span>
<span class="hljs-comment">//   <em> ternary function accepts three</span>
<span class="hljs-comment">//   </em> variadic function accepts a variable number of arguments</span>

<span class="hljs-comment">// a map fn</span>
<span class="hljs-keyword">const</span> <strong> map = [].map
<span class="hljs-keyword">const</span> square = n =&gt; n * n
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">map</span>(<span class="hljs-params">list, unary</span>)</span>{
  <span class="hljs-keyword">return</span> </strong>map.call(list, unaryFn)
}
map([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], square)

<span class="hljs-comment">// this is fine as long as map gets both arguments (is fully applied)</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapWrap</span>(<span class="hljs-params">unaryFn</span>)</span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">list</span>)</span>{
    <span class="hljs-keyword">return</span> map(list, unaryFn)
  }
}
mapWrap(square)([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])

<span class="hljs-keyword">const</span> squareAll = mapWrap(square)
squareAll([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])

<span class="hljs-comment">// woot! that&#39;s fine, but annoying to write. so, a function to wrap functions:</span>
<span class="hljs-comment">// const wrapper = unaryFn =&gt; list =&gt; map(list, unaryFn) // can become:</span>
<span class="hljs-comment">// const wrapper = second =&gt; first =&gt; binaryFn(first, second) // can become:</span>
<span class="hljs-keyword">const</span> rightCurry = binaryFn =&gt; secondArgument =&gt; firstArgument =&gt; binaryFn(firstArgument, secondArgument)
<span class="hljs-comment">// which can be used like</span>
<span class="hljs-keyword">const</span> rightCurryMap = rightCurry(map)
<span class="hljs-keyword">const</span> squareAll     = rightCurryMap(square)
squareAll([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])
<span class="hljs-comment">// calling this rightCurry because it takes any binary function and curries into a chain</span>
<span class="hljs-comment">// of unary functions, starting with the second argument. a curry that starts on the left</span>
<span class="hljs-comment">// is more common, and it&#39;s usually what people mean.</span>
<span class="hljs-keyword">const</span> curry = binaryFn =&gt; firstArg =&gt; secondArg =&gt; binaryFn(firstArg, secondArg)
<span class="hljs-keyword">const</span> cMap  = curry(map)
<span class="hljs-keyword">const</span> twice         = n =&gt; n + n <span class="hljs-comment">// why did i write this down?</span>
<span class="hljs-comment">// whether one goes with a leftmost or rightmost curry could depend on which things</span>
<span class="hljs-comment">// you might need to name and/or reuse</span>

<span class="hljs-comment">// okay so apparently a pattern like this:</span>
<span class="hljs-keyword">const</span> squareAll = rightCurry(map)(square)
<span class="hljs-keyword">const</span> doubleAll = rightCurry(map)(twice)
<span class="hljs-comment">// is called a:</span>
<span class="hljs-comment">// rightmost unary partial application of the map function</span>
<span class="hljs-comment">// which means it starts from the right, takes one arg, applies not all of the args, and works on the map fn</span>

<span class="hljs-comment">// the wrong way to build a first-class function to do this would be:</span>
<span class="hljs-keyword">const</span> rightUnPartApp = (binaryFn, secondArg) =&gt; rightCurr(binaryFn)(secondArg)
<span class="hljs-comment">// and a better way might be</span>
<span class="hljs-keyword">const</span> lastApplication = (binaryFn, secondArg) =&gt; firstArg =&gt; binaryFn(firstArg, secondArg)
<span class="hljs-comment">// which means we could do</span>
<span class="hljs-keyword">const</span> squareAll = lastApplication(map, square)
<span class="hljs-keyword">const</span> doubleAll = lastApplication(map, twice)
<span class="hljs-comment">// and so, we could do</span>
<span class="hljs-keyword">const</span> firstApp = (binaryFn, firstArg) =&gt; secondArg =&gt; binaryFn(firstArg, secondArg)

<span class="hljs-comment">// SO. wat.</span>
<span class="hljs-comment">// Currying : decomposition of a polyadic function into a chain of nested unary functions. Thus,</span>
<span class="hljs-comment">// decomposed, you can partially apply one or more arguments, although the curry operation itself</span>
<span class="hljs-comment">// does not apply any arguments to the function.</span>
<span class="hljs-comment">// Partial application : conversion of a polyadic function into a function taking fewer arguments</span>
<span class="hljs-comment">// by providing one or more arguments in advance.</span>




<span class="hljs-comment">// this is approximately the same as wu.js&#39;s .autoCurry() (which has been removed??)</span>
<span class="hljs-comment">// (es5, obvs. <span class="hljs-doctag">todo:</span> simplify, basically just by making it es6.)</span>
<span class="hljs-keyword">var</span> autoCurry = (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{

  <span class="hljs-keyword">var</span>
    toArray = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span>(<span class="hljs-params">arr, from</span>)</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Array</span>.prototype.slice.call(arr, from || <span class="hljs-number">0</span>)
  }

, curry = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curry</span>(<span class="hljs-params">fn</span>) </span>{
    <span class="hljs-keyword">var</span> args = toArray(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curried</span>(<span class="hljs-params"></span>)</span>{
      <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-keyword">this</span>, args.concat(toArray(<span class="hljs-built_in">arguments</span>)))
    }
  }

  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">autoCurry</span>(<span class="hljs-params">fn, numArgs</span>)</span>{
    numArgs = numArgs || fn.length
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">autoCurried</span>(<span class="hljs-params"></span>)</span>{
      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>.length &lt; numArgs) {
        <span class="hljs-keyword">return</span> numArgs - <span class="hljs-built_in">arguments</span>.length &gt; <span class="hljs-number">0</span> ?
        autoCurry(curry.apply(<span class="hljs-keyword">this</span>, [fn].concat(toArray(<span class="hljs-built_in">arguments</span>)))
      , numArgs - <span class="hljs-built_in">arguments</span>.length)           :
        curry.apply(<span class="hljs-keyword">this</span>, [fn].concat(toArray(<span class="hljs-built_in">arguments</span>)))
      } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>)
      }
    }
  }

}())</code></pre>]]></description><link>/2016/currying-and-partial-application.html</link><guid isPermaLink="true">/2016/currying-and-partial-application.html</guid><category><![CDATA[currying]]></category><category><![CDATA[fp]]></category><category><![CDATA[partial-application]]></category><category><![CDATA[functional-programming]]></category><category><![CDATA[js]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Thu, 05 May 2016 22:00:00 GMT</pubDate></item></channel></rss>