<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[undefined - angr]]></title><description><![CDATA[writings from zac anger]]></description><link>http://blog.zacanger.com/</link><generator>Ghost</generator><lastBuildDate>Wed, 19 Oct 2016 04:07:06 GMT</lastBuildDate><atom:link href="http://blog.zacanger.com/tag/undefined/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[react in one line]]></title><description><![CDATA[<p>like my redux-in-one-line post&mdash;no, not really. just the idea of it.
really the idea of stateless components, the pure-function kind that we got to
start using in 0.14 or whatever.</p>
<pre class="hljs"><code>v = <span class="hljs-function"><span class="hljs-title">f</span><span class="hljs-params">(d)</span></span></code></pre><p>tada.</p>
]]></description><link>/2016/react-in-one-line.html</link><guid isPermaLink="true">/2016/react-in-one-line.html</guid><category><![CDATA[react]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sat, 13 Aug 2016 23:58:00 GMT</pubDate></item><item><title><![CDATA[redux notes, part three]]></title><description><![CDATA[<p>Because the Redux docs say &quot;Redux is actually really simple!&quot; when sometimes
it&#39;s not, and because those docs themselves are pretty overwhelming when
you&#39;re first trying out Redux, I&#39;m going to attempt to distill the docs and
bits of my own (admittedly limited) personal experience with Redux into a
couple of blog posts.</p>
<hr>
<p>Just want to take a second to go over some syntax before going on more about
Redux. A lot of folks who&#39;re new to React might also be new to new JavaScript,
so some things might be looking a little unusual.</p>
<pre class="hljs"><code><span class="hljs-keyword">const</span> foo = <span class="hljs-string">&#39;bar&#39;</span> <span class="hljs-comment">// is roughly the same as</span>
<span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#39;bar&#39;</span> <span class="hljs-comment">// EXCEPT that you could not then do</span>
foo = <span class="hljs-string">&#39;baz&#39;</span> <span class="hljs-comment">// because you&#39;d be reassigning a const which is not okay.</span>
<span class="hljs-keyword">let</span> asdf = <span class="hljs-string">&#39;ghjkl&#39;</span> <span class="hljs-comment">// is a lot more like var</span>
asdf = <span class="hljs-string">&#39;qwerty&#39;</span> <span class="hljs-comment">// no errors</span>

import React from <span class="hljs-string">&#39;react&#39;</span> <span class="hljs-comment">// is kinda like</span>
<span class="hljs-keyword">const</span> React = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#39;react&#39;</span>) <span class="hljs-comment">// except it&#39;s actually just a part of the language now</span>
import { resolve } from <span class="hljs-string">&#39;path&#39;</span> <span class="hljs-comment">// is like</span>
<span class="hljs-keyword">const</span> { resolve } = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#39;path&#39;</span>) <span class="hljs-comment">// which is like</span>
<span class="hljs-keyword">var</span> path = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#39;path&#39;</span>)
<span class="hljs-keyword">var</span> resolve = path.resolve

export <span class="hljs-keyword">const</span> whatever = () =&gt; {} <span class="hljs-comment">// is like</span>
module.exports.whatever = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{}

export <span class="hljs-keyword">default</span> MyThing <span class="hljs-comment">// is like</span>
module.exports = MyThing

<span class="hljs-keyword">const</span>
  a = <span class="hljs-string">&#39;a&#39;</span>
, b = <span class="hljs-string">&#39;b&#39;</span>
, c = <span class="hljs-string">&#39;c&#39;</span>
, o = { a, b, c } <span class="hljs-comment">// is the same as</span>

<span class="hljs-keyword">var</span> a = <span class="hljs-string">&#39;a&#39;</span>
<span class="hljs-keyword">var</span> b = <span class="hljs-string">&#39;b&#39;</span>
<span class="hljs-keyword">var</span> c = <span class="hljs-string">&#39;c&#39;</span>
<span class="hljs-keyword">var</span> o = {
  a : a
, b : b
, c : c
}

<span class="hljs-keyword">const</span> someFunc = param =&gt; param <span class="hljs-comment">// is roughly the same as</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">someFunc</span><span class="hljs-params">(param)</span> </span>{
  <span class="hljs-keyword">return</span> param
}
<span class="hljs-comment">// though there <em>are</em> important differences</span></code></pre><p>If you&#39;re not at all familiar with ES2015, you should really go get comfortable
with it. I put together a repo a while ago for that, full of examples and notes.
Check it out <a href="https://github.com/zacanger/es6-and-builds/tree/master">here</a>.
(Also if you want, check out my semi-maintained bunch of examples and resources
for learning React <a href="https://github.com/zacanger/react-bits">here</a>.)</p>
<hr>
<p><code>react-redux</code> (not a part of Redux itself, since it&#39;s supposed to be
framework/library agnostic... ish) is something you&#39;ll need for writing React
apps using Redux. It sort of enforces the presentational/container (or
dumb/smart) way of structuring your components.</p>
<p>Note&mdash;you don&#39;t <em>need</em> <code>react-redux</code> to be able to use Redux with React, it
just helps. A lot.</p>
<p>I won&#39;t go into the whole presentational/container component thing, there are a
lot of blogs posts and such out there on that topic, but it&#39;s basically what it
sounds like; you have components that handle how things look and components that
handle how things work.</p>
<p><code>react-redux</code> gives you this <code>connect()</code> function which is pretty handy. You can
do a lot of the stuff it does by hand using <code>store.subscribe()</code>, but then you
start needing to worry about <code>shouldComponentUpdate</code> and all this stuff, and
it&#39;s all kind of annoying.</p>
<p>When wrapping a &#39;dumb&#39; component up in a &#39;smart&#39; component, there are two
functions you usually throw in there. One is called <code>mapStateToProps</code>, and the
other is <code>mapDispatchToProps</code>. I&#39;d suggest you take a good look at the <a href="https://github.com/reactjs/react-redux">official
docs</a> on <code>react-redux</code> to get a good
feel for how it all works, but setting up a container component turns out to be
pretty straightforward.</p>
<pre class="hljs"><code><span class="hljs-keyword">import</span> { connect } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;react-redux&#39;</span>
<span class="hljs-keyword">import</span> { someReducer } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./wherever/your/reducers/are&#39;</span>
<span class="hljs-keyword">import</span> AComponent <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./AComponent&#39;</span>

<span class="hljs-keyword">const</span> mapStateToProps = (state, ownProps) =&gt; ({
  <span class="hljs-attribute">somethingInState</span>: someReducer(state, ownProps.maybeSomeProperty.Here)
})

<span class="hljs-keyword">const</span> mapDispatchToProps = (dispatch, ownProps) =&gt; ({
  <span class="hljs-attribute">something</span>: probablyAnActionOrOtherFunction
})

<span class="hljs-keyword">const</span> AComponentThatIsNowConnected = connect(
  mapStateToProps
, mapDispatchToProps
)(AComponent)

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> AComponentThatIsNowConnected</code></pre><p><code>mapDispatchToProps</code> is a little tricky, so I&#39;d really suggest just checking out
<a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md">the docs</a>.</p>
<p>There&#39;s one other important bit, and that&#39;s this thing called <code>Provider</code>. It&#39;s a
component that makes the store available to all your container components
without you needing to actually pass it down everywhere. It uses this funky
<a href="https://facebook.github.io/react/docs/context.html">context</a> thing under the
hood. You don&#39;t need to put it everywhere, you just wrap a root component in it.</p>
<pre class="hljs"><code><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;react&#39;</span>
<span class="hljs-keyword">import</span> { render } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;react-dom&#39;</span>
<span class="hljs-keyword">import</span> { Provider } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;react-redux&#39;</span>
<span class="hljs-keyword">import</span> { createStore } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;redux&#39;</span>
<span class="hljs-keyword">import</span> reducers <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./reducers&#39;</span>
<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;./App&#39;</span>

<span class="hljs-keyword">const</span> store = createStore(reducers)
<span class="hljs-keyword">const</span> root = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#39;root&#39;</span>)

render(
  &lt;Provider store={store}&gt;
    &lt;App /&gt;
  &lt;/Provider&gt;
, root
)</code></pre><p>This can trip you up when testing! You don&#39;t need to do much to work around it,
but it can be annoying the first time you see all these random errors. Try
something like:</p>
<pre class="hljs"><code><span class="hljs-literal">import</span> test from <span class="hljs-string">&#39;ava&#39;</span> <span class="hljs-comment">// seriously awesome test runner</span>
<span class="hljs-literal">import</span> React from <span class="hljs-string">&#39;react&#39;</span>
<span class="hljs-literal">import</span> { mount } from <span class="hljs-string">&#39;enzyme&#39;</span> <span class="hljs-comment">// seriously awesome testing thing for React</span>
<span class="hljs-literal">import</span> { createStore } from <span class="hljs-string">&#39;redux&#39;</span>
<span class="hljs-literal">import</span> { Provider } from <span class="hljs-string">&#39;react-redux&#39;</span>
<span class="hljs-literal">import</span> MyComponent from <span class="hljs-string">&#39;./MyComponent&#39;</span>

test.beforeEach(<span class="hljs-string">&#39;Set up &lt;MyComponent /&gt;&#39;</span>, t =&gt; {
  <span class="hljs-keyword">const</span> store = createStore(() =&gt; ({}))
  t.context = mount(
    &lt;Provider store={store}&gt;
      &lt;MyComponent
        some=<span class="hljs-string">&#39;props&#39;</span>
      /&gt;
    &lt;/Provider&gt;
  )
})

<span class="hljs-comment">// and then you can do</span>
test(<span class="hljs-string">&#39;&lt;MyComponent /&gt; isn\&#39;t broken!&#39;</span>, t =&gt; {
  t.<span class="hljs-keyword">is</span>(t.context.prop(<span class="hljs-string">&#39;some&#39;</span>), <span class="hljs-string">&#39;props&#39;</span>)
})
<span class="hljs-comment">// and it won&#39;t throw errors about not finding a store and stuff!</span></code></pre>]]></description><link>/2016/redux-three.html</link><guid isPermaLink="true">/2016/redux-three.html</guid><category><![CDATA[redux]]></category><category><![CDATA[react]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sun, 07 Aug 2016 03:29:00 GMT</pubDate></item><item><title><![CDATA[redux in two lines]]></title><description><![CDATA[<p>Okay, not actually Redux in two lines, just the idea behind it
And really one of those is basically the idea of React, I guess.</p>
<pre class="hljs"><code>const render = <span class="hljs-keyword">state</span> =&gt; ui
const reducer = (oldState, action) =&gt; newState</code></pre>]]></description><link>/2016/redux-in-two-lines.html</link><guid isPermaLink="true">/2016/redux-in-two-lines.html</guid><category><![CDATA[react]]></category><category><![CDATA[redux]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Fri, 29 Jul 2016 07:09:37 GMT</pubDate></item><item><title><![CDATA[notes and little bits from the react meetup on 17th nov at devmountain]]></title><description><![CDATA[<h1 id="important-">IMPORTANT:</h1>
<p>don&#39;t take anything here seriously. i think it&#39;s just interesting to reread
my initial reaction when i was confronted with everything that is react.</p>
<hr>
<h2 id="react-meetup-17-nov-2015">React Meetup, 17 Nov, 2015</h2>
<p>React:</p>
<ul>
<li>Good at managing state.</li>
<li>which is to say, dynamism</li>
<li>Components, just like... everything else these days, so that&#39;s totally irrelevant.</li>
<li>virtual dom, which is not exactly facebook&#39;s anyway.</li>
<li>unidirectional data flow, which is a mouthful.</li>
<li>that is, the loop.</li>
<li>more boilerplate to run that... less boilerplate-replacer built into react?</li>
</ul>
<hr>
<p>Random-ass notes and stuff.</p>
<p>Erm. Thus far, it&#39;s web architecture 101. Components are a thing. People don&#39;t
like to refresh whole pages. Etc.</p>
<p><code>render() == render: function(){}</code></p>
<p><code>this.setState</code> = important, should always use</p>
<p>React is a view. But, does server-side rendering. Which is much more up my
alley, because it&#39;s not making life miserable for users. We can check that out
when we check out all those other frameworks, for fun.</p>
<p>React is compiled.</p>
<p>Redux is a state container. Which actually makes sense now. Because everything
is state, in React, it seems. So, it abstracts state and manages it
independently from the front-end, which is how React <em>can</em> do it&#39;s thing on the
server.</p>
<p>My god, though, React people are worse than Lisp people. Everything has to be
about how they do things better, even when they very clearly just do things at a
totally okay level.</p>
<p><a href="https://www.quora.com/React-JS-Library/How-was-the-idea-to-develop-React-conceived-and-how-many-people-worked-on-developing-it-and-implementing-it-at-Facebook">OH. It turns out that React looks like PHP to be because it was influenced by XHP</a>.
Which is PHP, influenced by E4X (ECMAScript with random XML all up in it). So
React is Javascript based on PHP based on Javascript based on XML. So it&#39;s
totally okay to think that it&#39;s hideous. That&#39;s good.</p>
<p>app.jsx:</p>
<pre class="hljs"><code><span class="hljs-literal">import</span> React from <span class="hljs-string">&#39;react&#39;</span> <span class="hljs-comment">// same as var React = require(&#39;react&#39;)</span>
<span class="hljs-literal">import</span> ReactDOM from <span class="hljs-string">&#39;react-dom&#39;</span>
<span class="hljs-literal">import</span> <span class="hljs-built_in">List</span> from <span class="hljs-string">&#39;./List&#39;</span>
<span class="hljs-literal">import</span> Friendz from <span class="hljs-string">&#39;./Friendz&#39;</span>

<span class="hljs-keyword">const</span> App = React.createClass({
  getInitialState(){
    <span class="hljs-keyword">return</span> (
      bros: [<span class="hljs-string">&#39;bman&#39;</span>, <span class="hljs-string">&#39;brosef&#39;</span>]
    )
  },
  componentDidMount(){}, <span class="hljs-comment">// onload</span>
  componentWillMount(){}, <span class="hljs-comment">// not quite on load?</span>
  addFriend(newFriend){
    <span class="hljs-keyword">this</span>.setState({
      friends: <span class="hljs-keyword">this</span>.state.friends.cocat(<span class="hljs-keyword">new</span>, newFriend)
    })
  }

  render() {
    <span class="hljs-keyword">return</span> (
      &lt;div&gt;what up {<span class="hljs-keyword">this</span>.state.bros}&lt;/div&gt;
    )
  }
})

ReactDOM.render(
  &lt;App /&gt;,
  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#39;root&#39;</span>)
)</code></pre><p>miniform.jsx:</p>
<pre class="hljs"><code>import React <span class="hljs-keyword">from</span> &#39;react&#39;

const Friendz = React.createClass(
  render() {
    getInitialState(){
      return {
        newFriend: &#39;&#39;
      }
    },
    updateFriend(e){ // <span class="hljs-keyword">for</span> event.
      this.<span class="hljs-built_in">set</span>State({
        newFriend: event.target.value
      })
    },
    return (
      <span class="hljs-variable">&lt;div&gt;</span>
        <span class="hljs-variable">&lt;input type=&quot;text&quot; /&gt;</span>
        <span class="hljs-variable">&lt;button onClick={() =&gt;</span> this.props.addFriend} <span class="hljs-keyword">on</span>Change={this.<span class="hljs-keyword">state</span>.newFriend}&gt;add it!<span class="hljs-variable">&lt;/button&gt;</span>
      <span class="hljs-variable">&lt;/div&gt;</span>
    )
  }
)

export <span class="hljs-keyword">default</span> Friendz</code></pre><p>list.jsx:</p>
<pre class="hljs"><code><span class="hljs-literal">import</span> React from <span class="hljs-string">&#39;react&#39;</span>

<span class="hljs-keyword">const</span> <span class="hljs-built_in">List</span> = React.createClass({
  render() {
    <span class="hljs-keyword">const</span> friendsLIs = <span class="hljs-keyword">this</span>.props.friends.map({item, list}) =&gt;
      <span class="hljs-keyword">return</span> &lt;li key={index}&gt;{item}&lt;/li&gt;
      <span class="hljs-comment">// return ( ) something...?</span>
  }
})

<span class="hljs-literal">export</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">List</span> <span class="hljs-comment">// like module.exports = {}</span></code></pre>]]></description><link>/2016/react-meetup-notes.html</link><guid isPermaLink="true">/2016/react-meetup-notes.html</guid><category><![CDATA[react]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sun, 22 May 2016 21:30:00 GMT</pubDate></item><item><title><![CDATA[React Performance]]></title><description><![CDATA[<ul>
<li>Take a baseline measurement.<ul>
<li>There&#39;s no way to measure improvements without something to measure against.</li>
<li>Chrome&#39;s Timeline thing works well for this.</li>
<li>Try measuring total elapsed time between the initial paint and the final rendering.</li>
<li>Make sure the &#39;Paint&#39; and &#39;Screenshot&#39; options are checked.</li>
</ul>
</li>
<li>Obviously the first big one is to just make your production code production code.<ul>
<li><code>NODE_ENV=production</code>, <code>webpack -p</code>, etc.</li>
<li>You can do something like this in your Webpack config:</li>
</ul>
</li>
</ul>
<pre class="hljs"><code><span class="hljs-comment">// stuff</span>
<span class="hljs-string">plugins :</span> [
  <span class="hljs-keyword">new</span> webpack.DefinePlugin({
    <span class="hljs-string">&#39;process.env.NODE_ENV&#39;</span> : JSON.stringify(<span class="hljs-string">&#39;production&#39;</span>)
  })
, <span class="hljs-keyword">new</span> webpack.optimize.UglifyJsPlugin({
    <span class="hljs-string">compress :</span> {
      <span class="hljs-string">warnings :</span> <span class="hljs-literal">false</span>
    }
  })
]
<span class="hljs-comment">// stuff</span></code></pre><ul>
<li>Reduce calls to <code>React.createClass</code> (if we&#39;re still doing that).<ul>
<li>Try using React Inline Elements for this.</li>
<li>We could configure Babel for this like so (this example would go directly in your package.json):</li>
</ul>
</li>
</ul>
<pre class="hljs"><code><span class="hljs-string">&quot;babel&quot;</span>: { <span class="hljs-string">&quot;env&quot;</span>: { <span class="hljs-string">&quot;production&quot;</span>: { <span class="hljs-string">&quot;plugins&quot;</span>: [
  <span class="hljs-string">&quot;transform-react-constant-elements&quot;</span>,
  <span class="hljs-string">&quot;transform-react-inline-elements&quot;</span>
] } } }</code></pre><ul>
<li>Keep checking against the initial benchmark.</li>
<li>&#39;babel-plugin-transform-react-remove-prop-types&#39; might also be useful. It removes unwanted/unused React.PropTypes.</li>
<li>There&#39;s also &#39;babel-preset-react-optimize&#39;</li>
</ul>
]]></description><link>/2016/react-performance.html</link><guid isPermaLink="true">/2016/react-performance.html</guid><category><![CDATA[react]]></category><category><![CDATA[performance]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Sat, 14 May 2016 22:06:37 GMT</pubDate></item><item><title><![CDATA[ideas for a better jsx]]></title><description><![CDATA[<p>please note: these aren&#39;t all my ideas, some are from <a href="http://ryanwalsh.io">ryan walsh</a></p>
<p>also, all of this was from back when both myself and ryan were just starting to learn react</p>
<p>i don&#39;t dislike jsx, i got over that</p>
<p>pretty sure ryan did, too</p>
<pre class="hljs"><code><span class="hljs-comment">// JSX</span>
export <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProfileInfo</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span></span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> {</span>
  render() {
    <span class="hljs-keyword">return</span> (
      &lt;div className=<span class="hljs-string">&quot;profile-info-container&quot;</span>&gt;

        &lt;div className=<span class="hljs-string">&quot;profile-image-wrapper&quot;</span>&gt;
          &lt;img className=<span class="hljs-string">&quot;profile-image&quot;</span> src=<span class="hljs-string">&quot;<a href="https://avatars1.githubusercontent.com/u/12636781?v=3&amp;s=460">https://avatars1.githubusercontent.com/u/12636781?v=3&amp;s=460</a>&quot;</span> /&gt;
        &lt;/div&gt;

        &lt;div className=<span class="hljs-string">&quot;name-info-container&quot;</span>&gt;
          &lt;h2 className=<span class="hljs-string">&quot;display-name&quot;</span>&gt;<span class="hljs-type">Ryan</span> <span class="hljs-type">Walsh</span>&lt;/h2&gt;
          &lt;h3 className=<span class="hljs-string">&quot;username&quot;</span>&gt;r-walsh&lt;/h3&gt;
        &lt;/div&gt;

        &lt;table className=<span class="hljs-string">&quot;profile-guide-info&quot;</span>&gt;
          &lt;tr className=<span class="hljs-string">&quot;number-container&quot;</span>&gt;
            &lt;th className=<span class="hljs-string">&quot;guide-info-number&quot;</span>&gt;
              &lt;span className=<span class="hljs-string">&quot;profile-authored&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;/profile&quot;</span>&gt;<span class="hljs-number">12</span>&lt;/a&gt;&lt;/span&gt;
            &lt;/th&gt;
            &lt;th className=<span class="hljs-string">&quot;guide-info-number&quot;</span>&gt;
              &lt;span className=<span class="hljs-string">&quot;profile-favorites&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;/profile&quot;</span>&gt;<span class="hljs-number">20</span>&lt;/a&gt;&lt;/span&gt;
            &lt;/th&gt;
            &lt;th className=<span class="hljs-string">&quot;guide-info-number&quot;</span>&gt;
              &lt;span className=<span class="hljs-string">&quot;profile-followers&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;/profile&quot;</span>&gt;<span class="hljs-number">47</span>&lt;/a&gt;&lt;/span&gt;
            &lt;/th&gt;
          &lt;/tr&gt;

          &lt;tr&gt;
            &lt;td&gt;
              &lt;span className=<span class="hljs-string">&quot;profile-authored&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;/profile&quot;</span>&gt;&lt;i className=<span class="hljs-string">&quot;fa fa-pencil&quot;</span>&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;
            &lt;/td&gt;
            &lt;td&gt;
              &lt;span className=<span class="hljs-string">&quot;profile-favorites&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;/profile&quot;</span>&gt;&lt;i className=<span class="hljs-string">&quot;fa fa-heart&quot;</span>&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;
            &lt;/td&gt;
            &lt;td&gt;
              &lt;span className=<span class="hljs-string">&quot;profile-followers&quot;</span>&gt;&lt;a href=<span class="hljs-string">&quot;/profile&quot;</span>&gt;&lt;i className=<span class="hljs-string">&quot;fa fa-eye&quot;</span>&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;

      &lt;/div&gt;
    )
  }
}

<span class="hljs-comment">// Other nonsense</span>
export <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProfileInfo</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span></span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> {</span>
  render() {
    <span class="hljs-keyword">return</span> (
      div( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;profile</span>-guide-info-container&#39;] } ) {

        div( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-string">&quot;profile-image-wrapper&quot;</span>] } ) {
          img( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;profile</span>-image&#39;], src: <span class="hljs-symbol">&#39;https</span>:<span class="hljs-comment">//avatars1.githubusercontent.com/u/12636781?v=3&amp;s=460&#39; } ) {}</span>
        }

        div( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> <span class="hljs-symbol">&#39;name</span>-info-container&#39; } ) {
          h2( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> <span class="hljs-string">&quot;display-name&quot;</span> } ) { <span class="hljs-type">John</span> <span class="hljs-type">Doe</span> }
          h3( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> <span class="hljs-symbol">&#39;usernam</span>e&#39; } ) { jdoe }
        }

        table( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;profile</span>-guide-info&#39;] } ) {
          tr( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;number</span>-container&#39;] } ) {
            th( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;guide</span>-info-number&#39;] } ) {
              span( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;profile</span>-authored&#39;] } )
            }

            th( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;guide</span>-info-number&#39;] } ) {
              span( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;profile</span>-authored&#39;] } )
            }

            th( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;guide</span>-info-number&#39;] } ) {
              span( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;profile</span>-authored&#39;] } )
            }
          }

          tr() {
            td() {
              span( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;profile</span>-authored&#39;] } ) {}
            }

            td() {
              span( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;profile</span>-authored&#39;] } ) {}
            }

            td() {
              span( { <span class="hljs-class"><span class="hljs-keyword">class</span>:</span> [<span class="hljs-symbol">&#39;profile</span>-authored&#39;] } ) {}
            }
          }
        }
      }
    )
  }
}

<span class="hljs-comment">// why not like this?</span>
export <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProfileInfo</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span></span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>{</span>
  render() {
    <span class="hljs-keyword">return</span> ({
      div : {
        <span class="hljs-class"><span class="hljs-keyword">class</span> :</span> [<span class="hljs-symbol">&#39;fo</span>o&#39;, <span class="hljs-symbol">&#39;ba</span>r&#39;]
      , p : {
          str : <span class="hljs-symbol">&#39;Bespoke</span> scenester retro bitters <span class="hljs-type">Pitchfork</span> <span class="hljs-number">8</span>-bit mixtape <span class="hljs-type">PBR</span>&amp;<span class="hljs-type">B</span> mlkshk iphone wire-rimmed glasses forage <span class="hljs-type">Helvetica</span> put a bird on it intelligentsia semiotics leggings normcore. <span class="hljs-type">Flexitarian</span> <span class="hljs-type">Echo</span> <span class="hljs-type">Park</span> mustache carles kickstarter <span class="hljs-type">Echo</span> <span class="hljs-type">Park</span> <span class="hljs-type">Blue</span> <span class="hljs-type">Bottle</span> actually tumblr beard literally tote bag <span class="hljs-type">Pitchfork</span> cray shabby <span class="hljs-type">Portland</span> stumptown asymmetrical.&#39;
        }
      }
    , footer : {
        span : {
          str : <code>&lt;span class=&quot;hljs-type&quot;&gt;Copyright&lt;/span&gt; ${datespan} ${company}. &lt;span class=&quot;hljs-type&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Rights&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;Reserved&lt;/span&gt;.</code>
}}})}

<span class="hljs-comment">// or this?</span>
const n = notJSX
function notJSXparser(){
  <span class="hljs-keyword">return</span> n(<span class="hljs-symbol">&#39;bod</span>y&#39;, [
    n(<span class="hljs-symbol">&#39;h</span>1&#39;, {<span class="hljs-symbol">&#39;this</span> is a website&#39;},
      n(&#39;p&#39;, {<span class="hljs-symbol">&#39;this</span> is a lot of text! texytext, text. texting. txet.&#39;},
        n(<span class="hljs-symbol">&#39;foote</span>r&#39;, {<code>&lt;span class=&quot;hljs-type&quot;&gt;Copyright&lt;/span&gt; ${stuff}</code>})
      )
    )
  ])
}

<span class="hljs-comment">// how they do it in EVE&#39;s UI (<span class="hljs-doctag">note:</span> they use typescript and an in-house custom lib they call &#39;microReact&#39;)</span>
const page = {
  t          : <span class="hljs-symbol">&#39;spa</span>n&#39; <span class="hljs-comment">// the tag type; defauts to &#39;div&#39;</span>
, c          : <span class="hljs-symbol">&#39;col</span>-<span class="hljs-number">12</span>&#39; <span class="hljs-comment">// className</span>
, text       : <span class="hljs-symbol">&#39;some</span> content&#39;
, children   : [{
    <span class="hljs-comment">// array of further nodes</span>
  }]
, top        : <span class="hljs-number">10</span>
, width      : <span class="hljs-number">100</span> <span class="hljs-comment">// more styles can go here, like react&#39;s style object basically</span>
, click      : someHandler
, svg        : <span class="hljs-literal">true</span> <span class="hljs-comment">// to add svg properties... why? idk. just &#39;cuz, i guess.</span>
, cx         : <span class="hljs-number">4</span>
, cy         : <span class="hljs-number">4</span>
, postRender : someDomManipulationFunction <span class="hljs-comment">// on insertion and on update</span>
}

<span class="hljs-comment">// how jsx actually kinda works (reactelement anyway) under the hood:</span>
let someEl = {
  <span class="hljs-class"><span class="hljs-keyword">type</span>  :</span> <span class="hljs-symbol">&#39;di</span>v&#39;
, props : {}
, ref   : <span class="hljs-literal">null</span>
, key   : <span class="hljs-literal">null</span>
}</code></pre>]]></description><link>/2016/better-jsx.html</link><guid isPermaLink="true">/2016/better-jsx.html</guid><category><![CDATA[jsx]]></category><category><![CDATA[react]]></category><category><![CDATA[js]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Thu, 05 May 2016 20:00:00 GMT</pubDate></item><item><title><![CDATA[Creating A React Component]]></title><description><![CDATA[<p>Okay so basically React changes like every two weeks and it&#39;s really tough to know which way to do which thing.</p>
<p>So. Which way should you create a freaking component? These notes are more for myself than anyone else.</p>
<p>Use a class if you need <code>this</code> or lifecycle methods. (An ES6 class. <code>class foo extends React.Component</code>.)</p>
<p>So, <code>this</code> actually refers to that <code>ReactComponent</code>.</p>
<p>If you can use a function, <em>use one</em>.</p>
<p>This refers to a &#39;stateless functional component.&#39;</p>
<p>These are, basically, pure functions. Which are basically <strong>always</strong> a good thing.</p>
<p>Don&#39;t use <code>React.createClass</code>, basically ever. Use <code>React.Component</code> instead.</p>
<p>So basically, use a function if you possibly can. Otherwise use <code>class bar extends React.Component</code>.</p>
<p>That was easy.</p>
]]></description><link>/2016/react-which.html</link><guid isPermaLink="true">/2016/react-which.html</guid><category><![CDATA[react]]></category><category><![CDATA[es6]]></category><dc:creator><![CDATA[zac anger]]></dc:creator><pubDate>Thu, 05 May 2016 18:42:00 GMT</pubDate></item></channel></rss>